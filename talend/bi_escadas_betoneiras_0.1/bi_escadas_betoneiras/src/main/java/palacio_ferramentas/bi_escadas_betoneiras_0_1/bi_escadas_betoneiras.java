// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.bi_escadas_betoneiras_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: bi_escadas_betoneiras Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class bi_escadas_betoneiras implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "bi_escadas_betoneiras";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				bi_escadas_betoneiras.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(bi_escadas_betoneiras.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		
	

	
        String properties_tDBConnection_1 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
            properties_tDBConnection_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_1.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_1.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_1 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_1;
	String dbUser_tDBConnection_1 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.AUTCOM_PASSWORD)

; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.cj.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_1",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		


	
            String dbProperties_tDBConnection_2 = "ApplicationName=bi_escadas_betoneiras";
            String url_tDBConnection_2 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_2 != null && !"".equals(dbProperties_tDBConnection_2.trim())) {
                url_tDBConnection_2 = url_tDBConnection_2 + "?" + dbProperties_tDBConnection_2;
            }
	String dbUser_tDBConnection_2 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_2 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_2 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_2.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_2 = drivers_tDBConnection_2.nextElement();
        if (redShiftDriverNames_tDBConnection_2.contains(d_tDBConnection_2.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_2);
                java.sql.DriverManager.registerDriver(d_tDBConnection_2);
            } catch (java.lang.Exception e_tDBConnection_2) {
globalMap.put("tDBConnection_2_ERROR_MESSAGE",e_tDBConnection_2.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_2 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_2","");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_bi_escadas_betoneiras_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row5.mensagem;
					oneRow_tHashOutput_1.uuid = row5.uuid;
					oneRow_tHashOutput_1.versao = row5.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_1", false);
		start_Hash.put("tDBRow_1", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_1";
	
	
		int tos_count_tDBRow_1 = 0;
		

	java.sql.Connection conn_tDBRow_1 = null;
	String query_tDBRow_1 = "";
	boolean whetherReject_tDBRow_1 = false;
	int count_tDBRow_1 = 0;
				conn_tDBRow_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_1", conn_tDBRow_1);
        java.sql.Statement stmt_tDBRow_1 = conn_tDBRow_1.createStatement();
        resourceMap.put("stmt_tDBRow_1", stmt_tDBRow_1);

 



/**
 * [tDBRow_1 begin ] stop
 */
	
	/**
	 * [tDBRow_1 main ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

query_tDBRow_1 = "\nSET @CLAFIS = (SELECT SIS_VALCFG FROM CFGSIS WHERE SIS_CODCFG = 'CFG_CLAVEN' AND SIS_CODEMP = '001')\n";
whetherReject_tDBRow_1 = false;
globalMap.put("tDBRow_1_QUERY",query_tDBRow_1);
try {
				stmt_tDBRow_1.execute(query_tDBRow_1);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_1 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_1_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_1) {
		
	}
	

 


	tos_count_tDBRow_1++;

/**
 * [tDBRow_1 main ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

 



/**
 * [tDBRow_1 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_1 end ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

	globalMap.put("tDBRow_1_NB_LINE", count_tDBRow_1);
        stmt_tDBRow_1.close();
        resourceMap.remove("stmt_tDBRow_1");
    resourceMap.put("statementClosed_tDBRow_1", true);
    resourceMap.put("finish_tDBRow_1", true);
 

ok_Hash.put("tDBRow_1", true);
end_Hash.put("tDBRow_1", System.currentTimeMillis());




/**
 * [tDBRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_1 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_1";
	
	

    if (resourceMap.get("statementClosed_tDBRow_1") == null) {
            java.sql.Statement stmtToClose_tDBRow_1 = null;
            if ((stmtToClose_tDBRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_1")) != null) {
                stmtToClose_tDBRow_1.close();
            }
    }
 



/**
 * [tDBRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBRow_2", false);
		start_Hash.put("tDBRow_2", System.currentTimeMillis());
		
	
	currentComponent="tDBRow_2";
	
	
		int tos_count_tDBRow_2 = 0;
		

	java.sql.Connection conn_tDBRow_2 = null;
	String query_tDBRow_2 = "";
	boolean whetherReject_tDBRow_2 = false;
	int count_tDBRow_2 = 0;
				conn_tDBRow_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			
        resourceMap.put("conn_tDBRow_2", conn_tDBRow_2);
        java.sql.Statement stmt_tDBRow_2 = conn_tDBRow_2.createStatement();
        resourceMap.put("stmt_tDBRow_2", stmt_tDBRow_2);

 



/**
 * [tDBRow_2 begin ] stop
 */
	
	/**
	 * [tDBRow_2 main ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	

query_tDBRow_2 = "\nSET @CLAFIS = `fTransform`( @CLAFIS, 4,'_')\n";
whetherReject_tDBRow_2 = false;
globalMap.put("tDBRow_2_QUERY",query_tDBRow_2);
try {
				stmt_tDBRow_2.execute(query_tDBRow_2);
	} catch (java.lang.Exception e) {
		whetherReject_tDBRow_2 = true;
		
				System.err.print(e.getMessage());
				globalMap.put("tDBRow_2_ERROR_MESSAGE", e.getMessage());
				
	}
	
	if(!whetherReject_tDBRow_2) {
		
	}
	

 


	tos_count_tDBRow_2++;

/**
 * [tDBRow_2 main ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	

 



/**
 * [tDBRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	

 



/**
 * [tDBRow_2 process_data_end ] stop
 */
	
	/**
	 * [tDBRow_2 end ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	

	globalMap.put("tDBRow_2_NB_LINE", count_tDBRow_2);
        stmt_tDBRow_2.close();
        resourceMap.remove("stmt_tDBRow_2");
    resourceMap.put("statementClosed_tDBRow_2", true);
    resourceMap.put("finish_tDBRow_2", true);
 

ok_Hash.put("tDBRow_2", true);
end_Hash.put("tDBRow_2", System.currentTimeMillis());




/**
 * [tDBRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBRow_2 finally ] start
	 */

	

	
	
	currentComponent="tDBRow_2";
	
	

    if (resourceMap.get("statementClosed_tDBRow_2") == null) {
            java.sql.Statement stmtToClose_tDBRow_2 = null;
            if ((stmtToClose_tDBRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tDBRow_2")) != null) {
                stmtToClose_tDBRow_2.close();
            }
    }
 



/**
 * [tDBRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class log_erroStruct implements routines.system.IPersistableRow<log_erroStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String NM_PROGRAMA;

				public String getNM_PROGRAMA () {
					return this.NM_PROGRAMA;
				}

				public Boolean NM_PROGRAMAIsNullable(){
				    return true;
				}
				public Boolean NM_PROGRAMAIsKey(){
				    return false;
				}
				public Integer NM_PROGRAMALength(){
				    return null;
				}
				public Integer NM_PROGRAMAPrecision(){
				    return null;
				}
				public String NM_PROGRAMADefault(){
				
					return null;
				
				}
				public String NM_PROGRAMAComment(){
				
				    return "";
				
				}
				public String NM_PROGRAMAPattern(){
				
					return "";
				
				}
				public String NM_PROGRAMAOriginalDbColumnName(){
				
					return "NM_PROGRAMA";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				
			    public String ERROR_CODE;

				public String getERROR_CODE () {
					return this.ERROR_CODE;
				}

				public Boolean ERROR_CODEIsNullable(){
				    return true;
				}
				public Boolean ERROR_CODEIsKey(){
				    return false;
				}
				public Integer ERROR_CODELength(){
				    return 255;
				}
				public Integer ERROR_CODEPrecision(){
				    return 0;
				}
				public String ERROR_CODEDefault(){
				
					return null;
				
				}
				public String ERROR_CODEComment(){
				
				    return null;
				
				}
				public String ERROR_CODEPattern(){
				
				    return null;
				
				}
				public String ERROR_CODEOriginalDbColumnName(){
				
					return "ERROR_CODE";
				
				}

				
			    public String ERROR_MESSAGE;

				public String getERROR_MESSAGE () {
					return this.ERROR_MESSAGE;
				}

				public Boolean ERROR_MESSAGEIsNullable(){
				    return true;
				}
				public Boolean ERROR_MESSAGEIsKey(){
				    return false;
				}
				public Integer ERROR_MESSAGELength(){
				    return 255;
				}
				public Integer ERROR_MESSAGEPrecision(){
				    return 0;
				}
				public String ERROR_MESSAGEDefault(){
				
					return null;
				
				}
				public String ERROR_MESSAGEComment(){
				
				    return null;
				
				}
				public String ERROR_MESSAGEPattern(){
				
				    return null;
				
				}
				public String ERROR_MESSAGEOriginalDbColumnName(){
				
					return "ERROR_MESSAGE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.NM_PROGRAMA = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
					this.ERROR_CODE = readString(dis);
					
					this.ERROR_MESSAGE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.NM_PROGRAMA = readString(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
					this.ERROR_CODE = readString(dis);
					
					this.ERROR_MESSAGE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NM_PROGRAMA,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
					// String
				
						writeString(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.ERROR_MESSAGE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NM_PROGRAMA,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
					// String
				
						writeString(this.ERROR_CODE,dos);
					
					// String
				
						writeString(this.ERROR_MESSAGE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NM_PROGRAMA="+NM_PROGRAMA);
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
		sb.append(",ERROR_CODE="+ERROR_CODE);
		sb.append(",ERROR_MESSAGE="+ERROR_MESSAGE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(log_erroStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public java.util.Date DATA_FATURAMENTO;

				public java.util.Date getDATA_FATURAMENTO () {
					return this.DATA_FATURAMENTO;
				}

				public Boolean DATA_FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean DATA_FATURAMENTOIsKey(){
				    return false;
				}
				public Integer DATA_FATURAMENTOLength(){
				    return null;
				}
				public Integer DATA_FATURAMENTOPrecision(){
				    return null;
				}
				public String DATA_FATURAMENTODefault(){
				
					return null;
				
				}
				public String DATA_FATURAMENTOComment(){
				
				    return "";
				
				}
				public String DATA_FATURAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_FATURAMENTOOriginalDbColumnName(){
				
					return "DATA_FATURAMENTO";
				
				}

				
			    public String NOTA_FISCAL;

				public String getNOTA_FISCAL () {
					return this.NOTA_FISCAL;
				}

				public Boolean NOTA_FISCALIsNullable(){
				    return true;
				}
				public Boolean NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NOTA_FISCALPrecision(){
				    return null;
				}
				public String NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NOTA_FISCALOriginalDbColumnName(){
				
					return "NOTA_FISCAL";
				
				}

				
			    public String CODIGO_VENDEDOR;

				public String getCODIGO_VENDEDOR () {
					return this.CODIGO_VENDEDOR;
				}

				public Boolean CODIGO_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VENDEDORIsKey(){
				    return false;
				}
				public Integer CODIGO_VENDEDORLength(){
				    return 3;
				}
				public Integer CODIGO_VENDEDORPrecision(){
				    return null;
				}
				public String CODIGO_VENDEDORDefault(){
				
					return null;
				
				}
				public String CODIGO_VENDEDORComment(){
				
				    return "";
				
				}
				public String CODIGO_VENDEDORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_VENDEDOROriginalDbColumnName(){
				
					return "CODIGO_VENDEDOR";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return 5;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer CODIGO_PRODUTO2;

				public Integer getCODIGO_PRODUTO2 () {
					return this.CODIGO_PRODUTO2;
				}

				public Boolean CODIGO_PRODUTO2IsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTO2IsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTO2Length(){
				    return 5;
				}
				public Integer CODIGO_PRODUTO2Precision(){
				    return null;
				}
				public String CODIGO_PRODUTO2Default(){
				
					return null;
				
				}
				public String CODIGO_PRODUTO2Comment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTO2Pattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTO2OriginalDbColumnName(){
				
					return "CODIGO_PRODUTO2";
				
				}

				
			    public String DESCRICAO_PRODUTO;

				public String getDESCRICAO_PRODUTO () {
					return this.DESCRICAO_PRODUTO;
				}

				public Boolean DESCRICAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESCRICAO_PRODUTOLength(){
				    return 70;
				}
				public Integer DESCRICAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESCRICAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESCRICAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESCRICAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESCRICAO_PRODUTOOriginalDbColumnName(){
				
					return "DESCRICAO_PRODUTO";
				
				}

				
			    public BigDecimal DIMENSAO_ALTURA;

				public BigDecimal getDIMENSAO_ALTURA () {
					return this.DIMENSAO_ALTURA;
				}

				public Boolean DIMENSAO_ALTURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_ALTURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_ALTURALength(){
				    return 12;
				}
				public Integer DIMENSAO_ALTURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_ALTURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_ALTURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_ALTURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_ALTURAOriginalDbColumnName(){
				
					return "DIMENSAO_ALTURA";
				
				}

				
			    public BigDecimal DIMENSAO_LARGURA;

				public BigDecimal getDIMENSAO_LARGURA () {
					return this.DIMENSAO_LARGURA;
				}

				public Boolean DIMENSAO_LARGURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_LARGURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_LARGURALength(){
				    return 12;
				}
				public Integer DIMENSAO_LARGURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_LARGURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_LARGURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_LARGURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_LARGURAOriginalDbColumnName(){
				
					return "DIMENSAO_LARGURA";
				
				}

				
			    public BigDecimal DIMENSAO_PROFUNDIDADE;

				public BigDecimal getDIMENSAO_PROFUNDIDADE () {
					return this.DIMENSAO_PROFUNDIDADE;
				}

				public Boolean DIMENSAO_PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PROFUNDIDADELength(){
				    return 12;
				}
				public Integer DIMENSAO_PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String DIMENSAO_PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String DIMENSAO_PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEOriginalDbColumnName(){
				
					return "DIMENSAO_PROFUNDIDADE";
				
				}

				
			    public BigDecimal DIMENSAO_PESO;

				public BigDecimal getDIMENSAO_PESO () {
					return this.DIMENSAO_PESO;
				}

				public Boolean DIMENSAO_PESOIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PESOIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PESOLength(){
				    return 15;
				}
				public Integer DIMENSAO_PESOPrecision(){
				    return 4;
				}
				public String DIMENSAO_PESODefault(){
				
					return null;
				
				}
				public String DIMENSAO_PESOComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PESOPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PESOOriginalDbColumnName(){
				
					return "DIMENSAO_PESO";
				
				}

				
			    public BigDecimal QUANTIDADE_VENDIDA;

				public BigDecimal getQUANTIDADE_VENDIDA () {
					return this.QUANTIDADE_VENDIDA;
				}

				public Boolean QUANTIDADE_VENDIDAIsNullable(){
				    return true;
				}
				public Boolean QUANTIDADE_VENDIDAIsKey(){
				    return false;
				}
				public Integer QUANTIDADE_VENDIDALength(){
				    return 12;
				}
				public Integer QUANTIDADE_VENDIDAPrecision(){
				    return 4;
				}
				public String QUANTIDADE_VENDIDADefault(){
				
					return null;
				
				}
				public String QUANTIDADE_VENDIDAComment(){
				
				    return "";
				
				}
				public String QUANTIDADE_VENDIDAPattern(){
				
					return "";
				
				}
				public String QUANTIDADE_VENDIDAOriginalDbColumnName(){
				
					return "QUANTIDADE_VENDIDA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CFOP;

				public String getCFOP () {
					return this.CFOP;
				}

				public Boolean CFOPIsNullable(){
				    return true;
				}
				public Boolean CFOPIsKey(){
				    return false;
				}
				public Integer CFOPLength(){
				    return 4;
				}
				public Integer CFOPPrecision(){
				    return null;
				}
				public String CFOPDefault(){
				
					return null;
				
				}
				public String CFOPComment(){
				
				    return "";
				
				}
				public String CFOPPattern(){
				
					return "";
				
				}
				public String CFOPOriginalDbColumnName(){
				
					return "CFOP";
				
				}

				
			    public java.util.Date DET_DTADOC;

				public java.util.Date getDET_DTADOC () {
					return this.DET_DTADOC;
				}

				public Boolean DET_DTADOCIsNullable(){
				    return true;
				}
				public Boolean DET_DTADOCIsKey(){
				    return false;
				}
				public Integer DET_DTADOCLength(){
				    return null;
				}
				public Integer DET_DTADOCPrecision(){
				    return null;
				}
				public String DET_DTADOCDefault(){
				
					return null;
				
				}
				public String DET_DTADOCComment(){
				
				    return "";
				
				}
				public String DET_DTADOCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTADOCOriginalDbColumnName(){
				
					return "DET_DTADOC";
				
				}

				
			    public String ESPDOC;

				public String getESPDOC () {
					return this.ESPDOC;
				}

				public Boolean ESPDOCIsNullable(){
				    return true;
				}
				public Boolean ESPDOCIsKey(){
				    return false;
				}
				public Integer ESPDOCLength(){
				    return 2;
				}
				public Integer ESPDOCPrecision(){
				    return null;
				}
				public String ESPDOCDefault(){
				
					return null;
				
				}
				public String ESPDOCComment(){
				
				    return "";
				
				}
				public String ESPDOCPattern(){
				
					return "";
				
				}
				public String ESPDOCOriginalDbColumnName(){
				
					return "ESPDOC";
				
				}

				
			    public String GER_CODEMP;

				public String getGER_CODEMP () {
					return this.GER_CODEMP;
				}

				public Boolean GER_CODEMPIsNullable(){
				    return true;
				}
				public Boolean GER_CODEMPIsKey(){
				    return false;
				}
				public Integer GER_CODEMPLength(){
				    return 3;
				}
				public Integer GER_CODEMPPrecision(){
				    return null;
				}
				public String GER_CODEMPDefault(){
				
					return null;
				
				}
				public String GER_CODEMPComment(){
				
				    return "";
				
				}
				public String GER_CODEMPPattern(){
				
					return "";
				
				}
				public String GER_CODEMPOriginalDbColumnName(){
				
					return "GER_CODEMP";
				
				}

				
			    public String GER_BAICON;

				public String getGER_BAICON () {
					return this.GER_BAICON;
				}

				public Boolean GER_BAICONIsNullable(){
				    return true;
				}
				public Boolean GER_BAICONIsKey(){
				    return false;
				}
				public Integer GER_BAICONLength(){
				    return 30;
				}
				public Integer GER_BAICONPrecision(){
				    return null;
				}
				public String GER_BAICONDefault(){
				
					return null;
				
				}
				public String GER_BAICONComment(){
				
				    return "";
				
				}
				public String GER_BAICONPattern(){
				
					return "";
				
				}
				public String GER_BAICONOriginalDbColumnName(){
				
					return "GER_BAICON";
				
				}

				
			    public String GER_ENDCON;

				public String getGER_ENDCON () {
					return this.GER_ENDCON;
				}

				public Boolean GER_ENDCONIsNullable(){
				    return true;
				}
				public Boolean GER_ENDCONIsKey(){
				    return false;
				}
				public Integer GER_ENDCONLength(){
				    return 40;
				}
				public Integer GER_ENDCONPrecision(){
				    return null;
				}
				public String GER_ENDCONDefault(){
				
					return null;
				
				}
				public String GER_ENDCONComment(){
				
				    return "";
				
				}
				public String GER_ENDCONPattern(){
				
					return "";
				
				}
				public String GER_ENDCONOriginalDbColumnName(){
				
					return "GER_ENDCON";
				
				}

				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}

				public Boolean CEPIsNullable(){
				    return true;
				}
				public Boolean CEPIsKey(){
				    return false;
				}
				public Integer CEPLength(){
				    return 8;
				}
				public Integer CEPPrecision(){
				    return null;
				}
				public String CEPDefault(){
				
					return null;
				
				}
				public String CEPComment(){
				
				    return "";
				
				}
				public String CEPPattern(){
				
					return "";
				
				}
				public String CEPOriginalDbColumnName(){
				
					return "CEP";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 40;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return true;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return null;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}

				public Boolean errorCodeIsNullable(){
				    return true;
				}
				public Boolean errorCodeIsKey(){
				    return false;
				}
				public Integer errorCodeLength(){
				    return 255;
				}
				public Integer errorCodePrecision(){
				    return 0;
				}
				public String errorCodeDefault(){
				
					return "";
				
				}
				public String errorCodeComment(){
				
				    return null;
				
				}
				public String errorCodePattern(){
				
				    return null;
				
				}
				public String errorCodeOriginalDbColumnName(){
				
					return "errorCode";
				
				}

				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}

				public Boolean errorMessageIsNullable(){
				    return true;
				}
				public Boolean errorMessageIsKey(){
				    return false;
				}
				public Integer errorMessageLength(){
				    return 255;
				}
				public Integer errorMessagePrecision(){
				    return 0;
				}
				public String errorMessageDefault(){
				
					return "";
				
				}
				public String errorMessageComment(){
				
				    return null;
				
				}
				public String errorMessagePattern(){
				
				    return null;
				
				}
				public String errorMessageOriginalDbColumnName(){
				
					return "errorMessage";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA_FATURAMENTO="+String.valueOf(DATA_FATURAMENTO));
		sb.append(",NOTA_FISCAL="+NOTA_FISCAL);
		sb.append(",CODIGO_VENDEDOR="+CODIGO_VENDEDOR);
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",CODIGO_PRODUTO2="+String.valueOf(CODIGO_PRODUTO2));
		sb.append(",DESCRICAO_PRODUTO="+DESCRICAO_PRODUTO);
		sb.append(",DIMENSAO_ALTURA="+String.valueOf(DIMENSAO_ALTURA));
		sb.append(",DIMENSAO_LARGURA="+String.valueOf(DIMENSAO_LARGURA));
		sb.append(",DIMENSAO_PROFUNDIDADE="+String.valueOf(DIMENSAO_PROFUNDIDADE));
		sb.append(",DIMENSAO_PESO="+String.valueOf(DIMENSAO_PESO));
		sb.append(",QUANTIDADE_VENDIDA="+String.valueOf(QUANTIDADE_VENDIDA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CFOP="+CFOP);
		sb.append(",DET_DTADOC="+String.valueOf(DET_DTADOC));
		sb.append(",ESPDOC="+ESPDOC);
		sb.append(",GER_CODEMP="+GER_CODEMP);
		sb.append(",GER_BAICON="+GER_BAICON);
		sb.append(",GER_ENDCON="+GER_ENDCON);
		sb.append(",CEP="+CEP);
		sb.append(",UF="+UF);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",AUTOINCREM="+AUTOINCREM);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DATA_FATURAMENTO;

				public java.util.Date getDATA_FATURAMENTO () {
					return this.DATA_FATURAMENTO;
				}

				public Boolean DATA_FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean DATA_FATURAMENTOIsKey(){
				    return false;
				}
				public Integer DATA_FATURAMENTOLength(){
				    return null;
				}
				public Integer DATA_FATURAMENTOPrecision(){
				    return null;
				}
				public String DATA_FATURAMENTODefault(){
				
					return null;
				
				}
				public String DATA_FATURAMENTOComment(){
				
				    return "";
				
				}
				public String DATA_FATURAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_FATURAMENTOOriginalDbColumnName(){
				
					return "DATA_FATURAMENTO";
				
				}

				
			    public String NOTA_FISCAL;

				public String getNOTA_FISCAL () {
					return this.NOTA_FISCAL;
				}

				public Boolean NOTA_FISCALIsNullable(){
				    return true;
				}
				public Boolean NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NOTA_FISCALPrecision(){
				    return null;
				}
				public String NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NOTA_FISCALOriginalDbColumnName(){
				
					return "NOTA_FISCAL";
				
				}

				
			    public String CODIGO_VENDEDOR;

				public String getCODIGO_VENDEDOR () {
					return this.CODIGO_VENDEDOR;
				}

				public Boolean CODIGO_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VENDEDORIsKey(){
				    return false;
				}
				public Integer CODIGO_VENDEDORLength(){
				    return 3;
				}
				public Integer CODIGO_VENDEDORPrecision(){
				    return null;
				}
				public String CODIGO_VENDEDORDefault(){
				
					return null;
				
				}
				public String CODIGO_VENDEDORComment(){
				
				    return "";
				
				}
				public String CODIGO_VENDEDORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_VENDEDOROriginalDbColumnName(){
				
					return "CODIGO_VENDEDOR";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return 5;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer CODIGO_PRODUTO2;

				public Integer getCODIGO_PRODUTO2 () {
					return this.CODIGO_PRODUTO2;
				}

				public Boolean CODIGO_PRODUTO2IsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTO2IsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTO2Length(){
				    return 5;
				}
				public Integer CODIGO_PRODUTO2Precision(){
				    return null;
				}
				public String CODIGO_PRODUTO2Default(){
				
					return null;
				
				}
				public String CODIGO_PRODUTO2Comment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTO2Pattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTO2OriginalDbColumnName(){
				
					return "CODIGO_PRODUTO2";
				
				}

				
			    public String DESCRICAO_PRODUTO;

				public String getDESCRICAO_PRODUTO () {
					return this.DESCRICAO_PRODUTO;
				}

				public Boolean DESCRICAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESCRICAO_PRODUTOLength(){
				    return 70;
				}
				public Integer DESCRICAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESCRICAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESCRICAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESCRICAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESCRICAO_PRODUTOOriginalDbColumnName(){
				
					return "DESCRICAO_PRODUTO";
				
				}

				
			    public BigDecimal DIMENSAO_ALTURA;

				public BigDecimal getDIMENSAO_ALTURA () {
					return this.DIMENSAO_ALTURA;
				}

				public Boolean DIMENSAO_ALTURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_ALTURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_ALTURALength(){
				    return 12;
				}
				public Integer DIMENSAO_ALTURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_ALTURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_ALTURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_ALTURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_ALTURAOriginalDbColumnName(){
				
					return "DIMENSAO_ALTURA";
				
				}

				
			    public BigDecimal DIMENSAO_LARGURA;

				public BigDecimal getDIMENSAO_LARGURA () {
					return this.DIMENSAO_LARGURA;
				}

				public Boolean DIMENSAO_LARGURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_LARGURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_LARGURALength(){
				    return 12;
				}
				public Integer DIMENSAO_LARGURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_LARGURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_LARGURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_LARGURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_LARGURAOriginalDbColumnName(){
				
					return "DIMENSAO_LARGURA";
				
				}

				
			    public BigDecimal DIMENSAO_PROFUNDIDADE;

				public BigDecimal getDIMENSAO_PROFUNDIDADE () {
					return this.DIMENSAO_PROFUNDIDADE;
				}

				public Boolean DIMENSAO_PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PROFUNDIDADELength(){
				    return 12;
				}
				public Integer DIMENSAO_PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String DIMENSAO_PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String DIMENSAO_PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEOriginalDbColumnName(){
				
					return "DIMENSAO_PROFUNDIDADE";
				
				}

				
			    public BigDecimal DIMENSAO_PESO;

				public BigDecimal getDIMENSAO_PESO () {
					return this.DIMENSAO_PESO;
				}

				public Boolean DIMENSAO_PESOIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PESOIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PESOLength(){
				    return 15;
				}
				public Integer DIMENSAO_PESOPrecision(){
				    return 4;
				}
				public String DIMENSAO_PESODefault(){
				
					return null;
				
				}
				public String DIMENSAO_PESOComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PESOPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PESOOriginalDbColumnName(){
				
					return "DIMENSAO_PESO";
				
				}

				
			    public BigDecimal QUANTIDADE_VENDIDA;

				public BigDecimal getQUANTIDADE_VENDIDA () {
					return this.QUANTIDADE_VENDIDA;
				}

				public Boolean QUANTIDADE_VENDIDAIsNullable(){
				    return true;
				}
				public Boolean QUANTIDADE_VENDIDAIsKey(){
				    return false;
				}
				public Integer QUANTIDADE_VENDIDALength(){
				    return 12;
				}
				public Integer QUANTIDADE_VENDIDAPrecision(){
				    return 4;
				}
				public String QUANTIDADE_VENDIDADefault(){
				
					return null;
				
				}
				public String QUANTIDADE_VENDIDAComment(){
				
				    return "";
				
				}
				public String QUANTIDADE_VENDIDAPattern(){
				
					return "";
				
				}
				public String QUANTIDADE_VENDIDAOriginalDbColumnName(){
				
					return "QUANTIDADE_VENDIDA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CFOP;

				public String getCFOP () {
					return this.CFOP;
				}

				public Boolean CFOPIsNullable(){
				    return true;
				}
				public Boolean CFOPIsKey(){
				    return false;
				}
				public Integer CFOPLength(){
				    return 4;
				}
				public Integer CFOPPrecision(){
				    return null;
				}
				public String CFOPDefault(){
				
					return null;
				
				}
				public String CFOPComment(){
				
				    return "";
				
				}
				public String CFOPPattern(){
				
					return "";
				
				}
				public String CFOPOriginalDbColumnName(){
				
					return "CFOP";
				
				}

				
			    public java.util.Date DET_DTADOC;

				public java.util.Date getDET_DTADOC () {
					return this.DET_DTADOC;
				}

				public Boolean DET_DTADOCIsNullable(){
				    return true;
				}
				public Boolean DET_DTADOCIsKey(){
				    return false;
				}
				public Integer DET_DTADOCLength(){
				    return null;
				}
				public Integer DET_DTADOCPrecision(){
				    return null;
				}
				public String DET_DTADOCDefault(){
				
					return null;
				
				}
				public String DET_DTADOCComment(){
				
				    return "";
				
				}
				public String DET_DTADOCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTADOCOriginalDbColumnName(){
				
					return "DET_DTADOC";
				
				}

				
			    public String ESPDOC;

				public String getESPDOC () {
					return this.ESPDOC;
				}

				public Boolean ESPDOCIsNullable(){
				    return true;
				}
				public Boolean ESPDOCIsKey(){
				    return false;
				}
				public Integer ESPDOCLength(){
				    return 2;
				}
				public Integer ESPDOCPrecision(){
				    return null;
				}
				public String ESPDOCDefault(){
				
					return null;
				
				}
				public String ESPDOCComment(){
				
				    return "";
				
				}
				public String ESPDOCPattern(){
				
					return "";
				
				}
				public String ESPDOCOriginalDbColumnName(){
				
					return "ESPDOC";
				
				}

				
			    public String GER_CODEMP;

				public String getGER_CODEMP () {
					return this.GER_CODEMP;
				}

				public Boolean GER_CODEMPIsNullable(){
				    return true;
				}
				public Boolean GER_CODEMPIsKey(){
				    return false;
				}
				public Integer GER_CODEMPLength(){
				    return 3;
				}
				public Integer GER_CODEMPPrecision(){
				    return null;
				}
				public String GER_CODEMPDefault(){
				
					return null;
				
				}
				public String GER_CODEMPComment(){
				
				    return "";
				
				}
				public String GER_CODEMPPattern(){
				
					return "";
				
				}
				public String GER_CODEMPOriginalDbColumnName(){
				
					return "GER_CODEMP";
				
				}

				
			    public String GER_BAICON;

				public String getGER_BAICON () {
					return this.GER_BAICON;
				}

				public Boolean GER_BAICONIsNullable(){
				    return true;
				}
				public Boolean GER_BAICONIsKey(){
				    return false;
				}
				public Integer GER_BAICONLength(){
				    return 30;
				}
				public Integer GER_BAICONPrecision(){
				    return null;
				}
				public String GER_BAICONDefault(){
				
					return null;
				
				}
				public String GER_BAICONComment(){
				
				    return "";
				
				}
				public String GER_BAICONPattern(){
				
					return "";
				
				}
				public String GER_BAICONOriginalDbColumnName(){
				
					return "GER_BAICON";
				
				}

				
			    public String GER_ENDCON;

				public String getGER_ENDCON () {
					return this.GER_ENDCON;
				}

				public Boolean GER_ENDCONIsNullable(){
				    return true;
				}
				public Boolean GER_ENDCONIsKey(){
				    return false;
				}
				public Integer GER_ENDCONLength(){
				    return 40;
				}
				public Integer GER_ENDCONPrecision(){
				    return null;
				}
				public String GER_ENDCONDefault(){
				
					return null;
				
				}
				public String GER_ENDCONComment(){
				
				    return "";
				
				}
				public String GER_ENDCONPattern(){
				
					return "";
				
				}
				public String GER_ENDCONOriginalDbColumnName(){
				
					return "GER_ENDCON";
				
				}

				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}

				public Boolean CEPIsNullable(){
				    return true;
				}
				public Boolean CEPIsKey(){
				    return false;
				}
				public Integer CEPLength(){
				    return 8;
				}
				public Integer CEPPrecision(){
				    return null;
				}
				public String CEPDefault(){
				
					return null;
				
				}
				public String CEPComment(){
				
				    return "";
				
				}
				public String CEPPattern(){
				
					return "";
				
				}
				public String CEPOriginalDbColumnName(){
				
					return "CEP";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 40;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return true;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return null;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.AUTOINCREM == null) {
							if (other.AUTOINCREM != null)
								return false;
						
						} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.DATA_FATURAMENTO = this.DATA_FATURAMENTO;
	            other.NOTA_FISCAL = this.NOTA_FISCAL;
	            other.CODIGO_VENDEDOR = this.CODIGO_VENDEDOR;
	            other.CODIGO_PRODUTO = this.CODIGO_PRODUTO;
	            other.CODIGO_PRODUTO2 = this.CODIGO_PRODUTO2;
	            other.DESCRICAO_PRODUTO = this.DESCRICAO_PRODUTO;
	            other.DIMENSAO_ALTURA = this.DIMENSAO_ALTURA;
	            other.DIMENSAO_LARGURA = this.DIMENSAO_LARGURA;
	            other.DIMENSAO_PROFUNDIDADE = this.DIMENSAO_PROFUNDIDADE;
	            other.DIMENSAO_PESO = this.DIMENSAO_PESO;
	            other.QUANTIDADE_VENDIDA = this.QUANTIDADE_VENDIDA;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            other.CFOP = this.CFOP;
	            other.DET_DTADOC = this.DET_DTADOC;
	            other.ESPDOC = this.ESPDOC;
	            other.GER_CODEMP = this.GER_CODEMP;
	            other.GER_BAICON = this.GER_BAICON;
	            other.GER_ENDCON = this.GER_ENDCON;
	            other.CEP = this.CEP;
	            other.UF = this.UF;
	            other.CIDADE = this.CIDADE;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.AUTOINCREM = this.AUTOINCREM;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA_FATURAMENTO="+String.valueOf(DATA_FATURAMENTO));
		sb.append(",NOTA_FISCAL="+NOTA_FISCAL);
		sb.append(",CODIGO_VENDEDOR="+CODIGO_VENDEDOR);
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",CODIGO_PRODUTO2="+String.valueOf(CODIGO_PRODUTO2));
		sb.append(",DESCRICAO_PRODUTO="+DESCRICAO_PRODUTO);
		sb.append(",DIMENSAO_ALTURA="+String.valueOf(DIMENSAO_ALTURA));
		sb.append(",DIMENSAO_LARGURA="+String.valueOf(DIMENSAO_LARGURA));
		sb.append(",DIMENSAO_PROFUNDIDADE="+String.valueOf(DIMENSAO_PROFUNDIDADE));
		sb.append(",DIMENSAO_PESO="+String.valueOf(DIMENSAO_PESO));
		sb.append(",QUANTIDADE_VENDIDA="+String.valueOf(QUANTIDADE_VENDIDA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CFOP="+CFOP);
		sb.append(",DET_DTADOC="+String.valueOf(DET_DTADOC));
		sb.append(",ESPDOC="+ESPDOC);
		sb.append(",GER_CODEMP="+GER_CODEMP);
		sb.append(",GER_BAICON="+GER_BAICON);
		sb.append(",GER_ENDCON="+GER_ENDCON);
		sb.append(",CEP="+CEP);
		sb.append(",UF="+UF);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",AUTOINCREM="+AUTOINCREM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUTOINCREM, other.AUTOINCREM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date DATA_FATURAMENTO;

				public java.util.Date getDATA_FATURAMENTO () {
					return this.DATA_FATURAMENTO;
				}

				public Boolean DATA_FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean DATA_FATURAMENTOIsKey(){
				    return false;
				}
				public Integer DATA_FATURAMENTOLength(){
				    return null;
				}
				public Integer DATA_FATURAMENTOPrecision(){
				    return null;
				}
				public String DATA_FATURAMENTODefault(){
				
					return null;
				
				}
				public String DATA_FATURAMENTOComment(){
				
				    return "";
				
				}
				public String DATA_FATURAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_FATURAMENTOOriginalDbColumnName(){
				
					return "DATA_FATURAMENTO";
				
				}

				
			    public String NOTA_FISCAL;

				public String getNOTA_FISCAL () {
					return this.NOTA_FISCAL;
				}

				public Boolean NOTA_FISCALIsNullable(){
				    return true;
				}
				public Boolean NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NOTA_FISCALPrecision(){
				    return null;
				}
				public String NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NOTA_FISCALOriginalDbColumnName(){
				
					return "NOTA_FISCAL";
				
				}

				
			    public String CODIGO_VENDEDOR;

				public String getCODIGO_VENDEDOR () {
					return this.CODIGO_VENDEDOR;
				}

				public Boolean CODIGO_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VENDEDORIsKey(){
				    return false;
				}
				public Integer CODIGO_VENDEDORLength(){
				    return 3;
				}
				public Integer CODIGO_VENDEDORPrecision(){
				    return null;
				}
				public String CODIGO_VENDEDORDefault(){
				
					return null;
				
				}
				public String CODIGO_VENDEDORComment(){
				
				    return "";
				
				}
				public String CODIGO_VENDEDORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_VENDEDOROriginalDbColumnName(){
				
					return "CODIGO_VENDEDOR";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return 5;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer CODIGO_PRODUTO2;

				public Integer getCODIGO_PRODUTO2 () {
					return this.CODIGO_PRODUTO2;
				}

				public Boolean CODIGO_PRODUTO2IsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTO2IsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTO2Length(){
				    return 5;
				}
				public Integer CODIGO_PRODUTO2Precision(){
				    return null;
				}
				public String CODIGO_PRODUTO2Default(){
				
					return null;
				
				}
				public String CODIGO_PRODUTO2Comment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTO2Pattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTO2OriginalDbColumnName(){
				
					return "CODIGO_PRODUTO2";
				
				}

				
			    public String DESCRICAO_PRODUTO;

				public String getDESCRICAO_PRODUTO () {
					return this.DESCRICAO_PRODUTO;
				}

				public Boolean DESCRICAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESCRICAO_PRODUTOLength(){
				    return 70;
				}
				public Integer DESCRICAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESCRICAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESCRICAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESCRICAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESCRICAO_PRODUTOOriginalDbColumnName(){
				
					return "DESCRICAO_PRODUTO";
				
				}

				
			    public BigDecimal DIMENSAO_ALTURA;

				public BigDecimal getDIMENSAO_ALTURA () {
					return this.DIMENSAO_ALTURA;
				}

				public Boolean DIMENSAO_ALTURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_ALTURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_ALTURALength(){
				    return 12;
				}
				public Integer DIMENSAO_ALTURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_ALTURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_ALTURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_ALTURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_ALTURAOriginalDbColumnName(){
				
					return "DIMENSAO_ALTURA";
				
				}

				
			    public BigDecimal DIMENSAO_LARGURA;

				public BigDecimal getDIMENSAO_LARGURA () {
					return this.DIMENSAO_LARGURA;
				}

				public Boolean DIMENSAO_LARGURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_LARGURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_LARGURALength(){
				    return 12;
				}
				public Integer DIMENSAO_LARGURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_LARGURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_LARGURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_LARGURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_LARGURAOriginalDbColumnName(){
				
					return "DIMENSAO_LARGURA";
				
				}

				
			    public BigDecimal DIMENSAO_PROFUNDIDADE;

				public BigDecimal getDIMENSAO_PROFUNDIDADE () {
					return this.DIMENSAO_PROFUNDIDADE;
				}

				public Boolean DIMENSAO_PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PROFUNDIDADELength(){
				    return 12;
				}
				public Integer DIMENSAO_PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String DIMENSAO_PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String DIMENSAO_PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEOriginalDbColumnName(){
				
					return "DIMENSAO_PROFUNDIDADE";
				
				}

				
			    public BigDecimal DIMENSAO_PESO;

				public BigDecimal getDIMENSAO_PESO () {
					return this.DIMENSAO_PESO;
				}

				public Boolean DIMENSAO_PESOIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PESOIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PESOLength(){
				    return 15;
				}
				public Integer DIMENSAO_PESOPrecision(){
				    return 4;
				}
				public String DIMENSAO_PESODefault(){
				
					return null;
				
				}
				public String DIMENSAO_PESOComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PESOPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PESOOriginalDbColumnName(){
				
					return "DIMENSAO_PESO";
				
				}

				
			    public BigDecimal QUANTIDADE_VENDIDA;

				public BigDecimal getQUANTIDADE_VENDIDA () {
					return this.QUANTIDADE_VENDIDA;
				}

				public Boolean QUANTIDADE_VENDIDAIsNullable(){
				    return true;
				}
				public Boolean QUANTIDADE_VENDIDAIsKey(){
				    return false;
				}
				public Integer QUANTIDADE_VENDIDALength(){
				    return 12;
				}
				public Integer QUANTIDADE_VENDIDAPrecision(){
				    return 4;
				}
				public String QUANTIDADE_VENDIDADefault(){
				
					return null;
				
				}
				public String QUANTIDADE_VENDIDAComment(){
				
				    return "";
				
				}
				public String QUANTIDADE_VENDIDAPattern(){
				
					return "";
				
				}
				public String QUANTIDADE_VENDIDAOriginalDbColumnName(){
				
					return "QUANTIDADE_VENDIDA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CFOP;

				public String getCFOP () {
					return this.CFOP;
				}

				public Boolean CFOPIsNullable(){
				    return true;
				}
				public Boolean CFOPIsKey(){
				    return false;
				}
				public Integer CFOPLength(){
				    return 4;
				}
				public Integer CFOPPrecision(){
				    return null;
				}
				public String CFOPDefault(){
				
					return null;
				
				}
				public String CFOPComment(){
				
				    return "";
				
				}
				public String CFOPPattern(){
				
					return "";
				
				}
				public String CFOPOriginalDbColumnName(){
				
					return "CFOP";
				
				}

				
			    public java.util.Date DET_DTADOC;

				public java.util.Date getDET_DTADOC () {
					return this.DET_DTADOC;
				}

				public Boolean DET_DTADOCIsNullable(){
				    return true;
				}
				public Boolean DET_DTADOCIsKey(){
				    return false;
				}
				public Integer DET_DTADOCLength(){
				    return null;
				}
				public Integer DET_DTADOCPrecision(){
				    return null;
				}
				public String DET_DTADOCDefault(){
				
					return null;
				
				}
				public String DET_DTADOCComment(){
				
				    return "";
				
				}
				public String DET_DTADOCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTADOCOriginalDbColumnName(){
				
					return "DET_DTADOC";
				
				}

				
			    public String ESPDOC;

				public String getESPDOC () {
					return this.ESPDOC;
				}

				public Boolean ESPDOCIsNullable(){
				    return true;
				}
				public Boolean ESPDOCIsKey(){
				    return false;
				}
				public Integer ESPDOCLength(){
				    return 2;
				}
				public Integer ESPDOCPrecision(){
				    return null;
				}
				public String ESPDOCDefault(){
				
					return null;
				
				}
				public String ESPDOCComment(){
				
				    return "";
				
				}
				public String ESPDOCPattern(){
				
					return "";
				
				}
				public String ESPDOCOriginalDbColumnName(){
				
					return "ESPDOC";
				
				}

				
			    public String GER_CODEMP;

				public String getGER_CODEMP () {
					return this.GER_CODEMP;
				}

				public Boolean GER_CODEMPIsNullable(){
				    return true;
				}
				public Boolean GER_CODEMPIsKey(){
				    return false;
				}
				public Integer GER_CODEMPLength(){
				    return 3;
				}
				public Integer GER_CODEMPPrecision(){
				    return null;
				}
				public String GER_CODEMPDefault(){
				
					return null;
				
				}
				public String GER_CODEMPComment(){
				
				    return "";
				
				}
				public String GER_CODEMPPattern(){
				
					return "";
				
				}
				public String GER_CODEMPOriginalDbColumnName(){
				
					return "GER_CODEMP";
				
				}

				
			    public String GER_BAICON;

				public String getGER_BAICON () {
					return this.GER_BAICON;
				}

				public Boolean GER_BAICONIsNullable(){
				    return true;
				}
				public Boolean GER_BAICONIsKey(){
				    return false;
				}
				public Integer GER_BAICONLength(){
				    return 30;
				}
				public Integer GER_BAICONPrecision(){
				    return null;
				}
				public String GER_BAICONDefault(){
				
					return null;
				
				}
				public String GER_BAICONComment(){
				
				    return "";
				
				}
				public String GER_BAICONPattern(){
				
					return "";
				
				}
				public String GER_BAICONOriginalDbColumnName(){
				
					return "GER_BAICON";
				
				}

				
			    public String GER_ENDCON;

				public String getGER_ENDCON () {
					return this.GER_ENDCON;
				}

				public Boolean GER_ENDCONIsNullable(){
				    return true;
				}
				public Boolean GER_ENDCONIsKey(){
				    return false;
				}
				public Integer GER_ENDCONLength(){
				    return 40;
				}
				public Integer GER_ENDCONPrecision(){
				    return null;
				}
				public String GER_ENDCONDefault(){
				
					return null;
				
				}
				public String GER_ENDCONComment(){
				
				    return "";
				
				}
				public String GER_ENDCONPattern(){
				
					return "";
				
				}
				public String GER_ENDCONOriginalDbColumnName(){
				
					return "GER_ENDCON";
				
				}

				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}

				public Boolean CEPIsNullable(){
				    return true;
				}
				public Boolean CEPIsKey(){
				    return false;
				}
				public Integer CEPLength(){
				    return 8;
				}
				public Integer CEPPrecision(){
				    return null;
				}
				public String CEPDefault(){
				
					return null;
				
				}
				public String CEPComment(){
				
				    return "";
				
				}
				public String CEPPattern(){
				
					return "";
				
				}
				public String CEPOriginalDbColumnName(){
				
					return "CEP";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 40;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return true;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return null;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.AUTOINCREM == null) {
							if (other.AUTOINCREM != null)
								return false;
						
						} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.DATA_FATURAMENTO = this.DATA_FATURAMENTO;
	            other.NOTA_FISCAL = this.NOTA_FISCAL;
	            other.CODIGO_VENDEDOR = this.CODIGO_VENDEDOR;
	            other.CODIGO_PRODUTO = this.CODIGO_PRODUTO;
	            other.CODIGO_PRODUTO2 = this.CODIGO_PRODUTO2;
	            other.DESCRICAO_PRODUTO = this.DESCRICAO_PRODUTO;
	            other.DIMENSAO_ALTURA = this.DIMENSAO_ALTURA;
	            other.DIMENSAO_LARGURA = this.DIMENSAO_LARGURA;
	            other.DIMENSAO_PROFUNDIDADE = this.DIMENSAO_PROFUNDIDADE;
	            other.DIMENSAO_PESO = this.DIMENSAO_PESO;
	            other.QUANTIDADE_VENDIDA = this.QUANTIDADE_VENDIDA;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            other.CFOP = this.CFOP;
	            other.DET_DTADOC = this.DET_DTADOC;
	            other.ESPDOC = this.ESPDOC;
	            other.GER_CODEMP = this.GER_CODEMP;
	            other.GER_BAICON = this.GER_BAICON;
	            other.GER_ENDCON = this.GER_ENDCON;
	            other.CEP = this.CEP;
	            other.UF = this.UF;
	            other.CIDADE = this.CIDADE;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            other.AUTOINCREM = this.AUTOINCREM;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
					this.AUTOINCREM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
					// String
				
						writeString(this.AUTOINCREM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATA_FATURAMENTO="+String.valueOf(DATA_FATURAMENTO));
		sb.append(",NOTA_FISCAL="+NOTA_FISCAL);
		sb.append(",CODIGO_VENDEDOR="+CODIGO_VENDEDOR);
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",CODIGO_PRODUTO2="+String.valueOf(CODIGO_PRODUTO2));
		sb.append(",DESCRICAO_PRODUTO="+DESCRICAO_PRODUTO);
		sb.append(",DIMENSAO_ALTURA="+String.valueOf(DIMENSAO_ALTURA));
		sb.append(",DIMENSAO_LARGURA="+String.valueOf(DIMENSAO_LARGURA));
		sb.append(",DIMENSAO_PROFUNDIDADE="+String.valueOf(DIMENSAO_PROFUNDIDADE));
		sb.append(",DIMENSAO_PESO="+String.valueOf(DIMENSAO_PESO));
		sb.append(",QUANTIDADE_VENDIDA="+String.valueOf(QUANTIDADE_VENDIDA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CFOP="+CFOP);
		sb.append(",DET_DTADOC="+String.valueOf(DET_DTADOC));
		sb.append(",ESPDOC="+ESPDOC);
		sb.append(",GER_CODEMP="+GER_CODEMP);
		sb.append(",GER_BAICON="+GER_BAICON);
		sb.append(",GER_ENDCON="+GER_ENDCON);
		sb.append(",CEP="+CEP);
		sb.append(",UF="+UF);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
		sb.append(",AUTOINCREM="+AUTOINCREM);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUTOINCREM, other.AUTOINCREM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return true;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return null;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public java.util.Date DATA_FATURAMENTO;

				public java.util.Date getDATA_FATURAMENTO () {
					return this.DATA_FATURAMENTO;
				}

				public Boolean DATA_FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean DATA_FATURAMENTOIsKey(){
				    return false;
				}
				public Integer DATA_FATURAMENTOLength(){
				    return null;
				}
				public Integer DATA_FATURAMENTOPrecision(){
				    return null;
				}
				public String DATA_FATURAMENTODefault(){
				
					return null;
				
				}
				public String DATA_FATURAMENTOComment(){
				
				    return "";
				
				}
				public String DATA_FATURAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_FATURAMENTOOriginalDbColumnName(){
				
					return "DATA_FATURAMENTO";
				
				}

				
			    public String NOTA_FISCAL;

				public String getNOTA_FISCAL () {
					return this.NOTA_FISCAL;
				}

				public Boolean NOTA_FISCALIsNullable(){
				    return true;
				}
				public Boolean NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NOTA_FISCALPrecision(){
				    return null;
				}
				public String NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NOTA_FISCALOriginalDbColumnName(){
				
					return "NOTA_FISCAL";
				
				}

				
			    public String CODIGO_VENDEDOR;

				public String getCODIGO_VENDEDOR () {
					return this.CODIGO_VENDEDOR;
				}

				public Boolean CODIGO_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VENDEDORIsKey(){
				    return false;
				}
				public Integer CODIGO_VENDEDORLength(){
				    return 3;
				}
				public Integer CODIGO_VENDEDORPrecision(){
				    return null;
				}
				public String CODIGO_VENDEDORDefault(){
				
					return null;
				
				}
				public String CODIGO_VENDEDORComment(){
				
				    return "";
				
				}
				public String CODIGO_VENDEDORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_VENDEDOROriginalDbColumnName(){
				
					return "CODIGO_VENDEDOR";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return 5;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer CODIGO_PRODUTO2;

				public Integer getCODIGO_PRODUTO2 () {
					return this.CODIGO_PRODUTO2;
				}

				public Boolean CODIGO_PRODUTO2IsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTO2IsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTO2Length(){
				    return 5;
				}
				public Integer CODIGO_PRODUTO2Precision(){
				    return null;
				}
				public String CODIGO_PRODUTO2Default(){
				
					return null;
				
				}
				public String CODIGO_PRODUTO2Comment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTO2Pattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTO2OriginalDbColumnName(){
				
					return "CODIGO_PRODUTO2";
				
				}

				
			    public String DESCRICAO_PRODUTO;

				public String getDESCRICAO_PRODUTO () {
					return this.DESCRICAO_PRODUTO;
				}

				public Boolean DESCRICAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESCRICAO_PRODUTOLength(){
				    return 70;
				}
				public Integer DESCRICAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESCRICAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESCRICAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESCRICAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESCRICAO_PRODUTOOriginalDbColumnName(){
				
					return "DESCRICAO_PRODUTO";
				
				}

				
			    public BigDecimal DIMENSAO_ALTURA;

				public BigDecimal getDIMENSAO_ALTURA () {
					return this.DIMENSAO_ALTURA;
				}

				public Boolean DIMENSAO_ALTURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_ALTURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_ALTURALength(){
				    return 12;
				}
				public Integer DIMENSAO_ALTURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_ALTURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_ALTURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_ALTURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_ALTURAOriginalDbColumnName(){
				
					return "DIMENSAO_ALTURA";
				
				}

				
			    public BigDecimal DIMENSAO_LARGURA;

				public BigDecimal getDIMENSAO_LARGURA () {
					return this.DIMENSAO_LARGURA;
				}

				public Boolean DIMENSAO_LARGURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_LARGURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_LARGURALength(){
				    return 12;
				}
				public Integer DIMENSAO_LARGURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_LARGURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_LARGURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_LARGURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_LARGURAOriginalDbColumnName(){
				
					return "DIMENSAO_LARGURA";
				
				}

				
			    public BigDecimal DIMENSAO_PROFUNDIDADE;

				public BigDecimal getDIMENSAO_PROFUNDIDADE () {
					return this.DIMENSAO_PROFUNDIDADE;
				}

				public Boolean DIMENSAO_PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PROFUNDIDADELength(){
				    return 12;
				}
				public Integer DIMENSAO_PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String DIMENSAO_PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String DIMENSAO_PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEOriginalDbColumnName(){
				
					return "DIMENSAO_PROFUNDIDADE";
				
				}

				
			    public BigDecimal DIMENSAO_PESO;

				public BigDecimal getDIMENSAO_PESO () {
					return this.DIMENSAO_PESO;
				}

				public Boolean DIMENSAO_PESOIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PESOIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PESOLength(){
				    return 15;
				}
				public Integer DIMENSAO_PESOPrecision(){
				    return 4;
				}
				public String DIMENSAO_PESODefault(){
				
					return null;
				
				}
				public String DIMENSAO_PESOComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PESOPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PESOOriginalDbColumnName(){
				
					return "DIMENSAO_PESO";
				
				}

				
			    public BigDecimal QUANTIDADE_VENDIDA;

				public BigDecimal getQUANTIDADE_VENDIDA () {
					return this.QUANTIDADE_VENDIDA;
				}

				public Boolean QUANTIDADE_VENDIDAIsNullable(){
				    return true;
				}
				public Boolean QUANTIDADE_VENDIDAIsKey(){
				    return false;
				}
				public Integer QUANTIDADE_VENDIDALength(){
				    return 12;
				}
				public Integer QUANTIDADE_VENDIDAPrecision(){
				    return 4;
				}
				public String QUANTIDADE_VENDIDADefault(){
				
					return null;
				
				}
				public String QUANTIDADE_VENDIDAComment(){
				
				    return "";
				
				}
				public String QUANTIDADE_VENDIDAPattern(){
				
					return "";
				
				}
				public String QUANTIDADE_VENDIDAOriginalDbColumnName(){
				
					return "QUANTIDADE_VENDIDA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CFOP;

				public String getCFOP () {
					return this.CFOP;
				}

				public Boolean CFOPIsNullable(){
				    return true;
				}
				public Boolean CFOPIsKey(){
				    return false;
				}
				public Integer CFOPLength(){
				    return 4;
				}
				public Integer CFOPPrecision(){
				    return null;
				}
				public String CFOPDefault(){
				
					return null;
				
				}
				public String CFOPComment(){
				
				    return "";
				
				}
				public String CFOPPattern(){
				
					return "";
				
				}
				public String CFOPOriginalDbColumnName(){
				
					return "CFOP";
				
				}

				
			    public java.util.Date DET_DTADOC;

				public java.util.Date getDET_DTADOC () {
					return this.DET_DTADOC;
				}

				public Boolean DET_DTADOCIsNullable(){
				    return true;
				}
				public Boolean DET_DTADOCIsKey(){
				    return false;
				}
				public Integer DET_DTADOCLength(){
				    return null;
				}
				public Integer DET_DTADOCPrecision(){
				    return null;
				}
				public String DET_DTADOCDefault(){
				
					return null;
				
				}
				public String DET_DTADOCComment(){
				
				    return "";
				
				}
				public String DET_DTADOCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTADOCOriginalDbColumnName(){
				
					return "DET_DTADOC";
				
				}

				
			    public String ESPDOC;

				public String getESPDOC () {
					return this.ESPDOC;
				}

				public Boolean ESPDOCIsNullable(){
				    return true;
				}
				public Boolean ESPDOCIsKey(){
				    return false;
				}
				public Integer ESPDOCLength(){
				    return 2;
				}
				public Integer ESPDOCPrecision(){
				    return null;
				}
				public String ESPDOCDefault(){
				
					return null;
				
				}
				public String ESPDOCComment(){
				
				    return "";
				
				}
				public String ESPDOCPattern(){
				
					return "";
				
				}
				public String ESPDOCOriginalDbColumnName(){
				
					return "ESPDOC";
				
				}

				
			    public String GER_CODEMP;

				public String getGER_CODEMP () {
					return this.GER_CODEMP;
				}

				public Boolean GER_CODEMPIsNullable(){
				    return true;
				}
				public Boolean GER_CODEMPIsKey(){
				    return false;
				}
				public Integer GER_CODEMPLength(){
				    return 3;
				}
				public Integer GER_CODEMPPrecision(){
				    return null;
				}
				public String GER_CODEMPDefault(){
				
					return null;
				
				}
				public String GER_CODEMPComment(){
				
				    return "";
				
				}
				public String GER_CODEMPPattern(){
				
					return "";
				
				}
				public String GER_CODEMPOriginalDbColumnName(){
				
					return "GER_CODEMP";
				
				}

				
			    public String GER_BAICON;

				public String getGER_BAICON () {
					return this.GER_BAICON;
				}

				public Boolean GER_BAICONIsNullable(){
				    return true;
				}
				public Boolean GER_BAICONIsKey(){
				    return false;
				}
				public Integer GER_BAICONLength(){
				    return 30;
				}
				public Integer GER_BAICONPrecision(){
				    return null;
				}
				public String GER_BAICONDefault(){
				
					return null;
				
				}
				public String GER_BAICONComment(){
				
				    return "";
				
				}
				public String GER_BAICONPattern(){
				
					return "";
				
				}
				public String GER_BAICONOriginalDbColumnName(){
				
					return "GER_BAICON";
				
				}

				
			    public String GER_ENDCON;

				public String getGER_ENDCON () {
					return this.GER_ENDCON;
				}

				public Boolean GER_ENDCONIsNullable(){
				    return true;
				}
				public Boolean GER_ENDCONIsKey(){
				    return false;
				}
				public Integer GER_ENDCONLength(){
				    return 40;
				}
				public Integer GER_ENDCONPrecision(){
				    return null;
				}
				public String GER_ENDCONDefault(){
				
					return null;
				
				}
				public String GER_ENDCONComment(){
				
				    return "";
				
				}
				public String GER_ENDCONPattern(){
				
					return "";
				
				}
				public String GER_ENDCONOriginalDbColumnName(){
				
					return "GER_ENDCON";
				
				}

				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}

				public Boolean CEPIsNullable(){
				    return true;
				}
				public Boolean CEPIsKey(){
				    return false;
				}
				public Integer CEPLength(){
				    return 8;
				}
				public Integer CEPPrecision(){
				    return null;
				}
				public String CEPDefault(){
				
					return null;
				
				}
				public String CEPComment(){
				
				    return "";
				
				}
				public String CEPPattern(){
				
					return "";
				
				}
				public String CEPOriginalDbColumnName(){
				
					return "CEP";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 40;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.AUTOINCREM = readString(dis);
					
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.AUTOINCREM = readString(dis);
					
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTOINCREM="+AUTOINCREM);
		sb.append(",DATA_FATURAMENTO="+String.valueOf(DATA_FATURAMENTO));
		sb.append(",NOTA_FISCAL="+NOTA_FISCAL);
		sb.append(",CODIGO_VENDEDOR="+CODIGO_VENDEDOR);
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",CODIGO_PRODUTO2="+String.valueOf(CODIGO_PRODUTO2));
		sb.append(",DESCRICAO_PRODUTO="+DESCRICAO_PRODUTO);
		sb.append(",DIMENSAO_ALTURA="+String.valueOf(DIMENSAO_ALTURA));
		sb.append(",DIMENSAO_LARGURA="+String.valueOf(DIMENSAO_LARGURA));
		sb.append(",DIMENSAO_PROFUNDIDADE="+String.valueOf(DIMENSAO_PROFUNDIDADE));
		sb.append(",DIMENSAO_PESO="+String.valueOf(DIMENSAO_PESO));
		sb.append(",QUANTIDADE_VENDIDA="+String.valueOf(QUANTIDADE_VENDIDA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CFOP="+CFOP);
		sb.append(",DET_DTADOC="+String.valueOf(DET_DTADOC));
		sb.append(",ESPDOC="+ESPDOC);
		sb.append(",GER_CODEMP="+GER_CODEMP);
		sb.append(",GER_BAICON="+GER_BAICON);
		sb.append(",GER_ENDCON="+GER_ENDCON);
		sb.append(",CEP="+CEP);
		sb.append(",UF="+UF);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String AUTOINCREM;

				public String getAUTOINCREM () {
					return this.AUTOINCREM;
				}

				public Boolean AUTOINCREMIsNullable(){
				    return true;
				}
				public Boolean AUTOINCREMIsKey(){
				    return true;
				}
				public Integer AUTOINCREMLength(){
				    return 20;
				}
				public Integer AUTOINCREMPrecision(){
				    return null;
				}
				public String AUTOINCREMDefault(){
				
					return null;
				
				}
				public String AUTOINCREMComment(){
				
				    return "";
				
				}
				public String AUTOINCREMPattern(){
				
					return "";
				
				}
				public String AUTOINCREMOriginalDbColumnName(){
				
					return "AUTOINCREM";
				
				}

				
			    public java.util.Date DATA_FATURAMENTO;

				public java.util.Date getDATA_FATURAMENTO () {
					return this.DATA_FATURAMENTO;
				}

				public Boolean DATA_FATURAMENTOIsNullable(){
				    return true;
				}
				public Boolean DATA_FATURAMENTOIsKey(){
				    return false;
				}
				public Integer DATA_FATURAMENTOLength(){
				    return null;
				}
				public Integer DATA_FATURAMENTOPrecision(){
				    return null;
				}
				public String DATA_FATURAMENTODefault(){
				
					return null;
				
				}
				public String DATA_FATURAMENTOComment(){
				
				    return "";
				
				}
				public String DATA_FATURAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DATA_FATURAMENTOOriginalDbColumnName(){
				
					return "DATA_FATURAMENTO";
				
				}

				
			    public String NOTA_FISCAL;

				public String getNOTA_FISCAL () {
					return this.NOTA_FISCAL;
				}

				public Boolean NOTA_FISCALIsNullable(){
				    return true;
				}
				public Boolean NOTA_FISCALIsKey(){
				    return false;
				}
				public Integer NOTA_FISCALLength(){
				    return 12;
				}
				public Integer NOTA_FISCALPrecision(){
				    return null;
				}
				public String NOTA_FISCALDefault(){
				
					return null;
				
				}
				public String NOTA_FISCALComment(){
				
				    return "";
				
				}
				public String NOTA_FISCALPattern(){
				
					return "";
				
				}
				public String NOTA_FISCALOriginalDbColumnName(){
				
					return "NOTA_FISCAL";
				
				}

				
			    public String CODIGO_VENDEDOR;

				public String getCODIGO_VENDEDOR () {
					return this.CODIGO_VENDEDOR;
				}

				public Boolean CODIGO_VENDEDORIsNullable(){
				    return true;
				}
				public Boolean CODIGO_VENDEDORIsKey(){
				    return false;
				}
				public Integer CODIGO_VENDEDORLength(){
				    return 3;
				}
				public Integer CODIGO_VENDEDORPrecision(){
				    return null;
				}
				public String CODIGO_VENDEDORDefault(){
				
					return null;
				
				}
				public String CODIGO_VENDEDORComment(){
				
				    return "";
				
				}
				public String CODIGO_VENDEDORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CODIGO_VENDEDOROriginalDbColumnName(){
				
					return "CODIGO_VENDEDOR";
				
				}

				
			    public String CODIGO_PRODUTO;

				public String getCODIGO_PRODUTO () {
					return this.CODIGO_PRODUTO;
				}

				public Boolean CODIGO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTOIsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTOLength(){
				    return 5;
				}
				public Integer CODIGO_PRODUTOPrecision(){
				    return null;
				}
				public String CODIGO_PRODUTODefault(){
				
					return null;
				
				}
				public String CODIGO_PRODUTOComment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTOPattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTOOriginalDbColumnName(){
				
					return "CODIGO_PRODUTO";
				
				}

				
			    public Integer CODIGO_PRODUTO2;

				public Integer getCODIGO_PRODUTO2 () {
					return this.CODIGO_PRODUTO2;
				}

				public Boolean CODIGO_PRODUTO2IsNullable(){
				    return true;
				}
				public Boolean CODIGO_PRODUTO2IsKey(){
				    return false;
				}
				public Integer CODIGO_PRODUTO2Length(){
				    return 5;
				}
				public Integer CODIGO_PRODUTO2Precision(){
				    return null;
				}
				public String CODIGO_PRODUTO2Default(){
				
					return null;
				
				}
				public String CODIGO_PRODUTO2Comment(){
				
				    return "";
				
				}
				public String CODIGO_PRODUTO2Pattern(){
				
					return "";
				
				}
				public String CODIGO_PRODUTO2OriginalDbColumnName(){
				
					return "CODIGO_PRODUTO2";
				
				}

				
			    public String DESCRICAO_PRODUTO;

				public String getDESCRICAO_PRODUTO () {
					return this.DESCRICAO_PRODUTO;
				}

				public Boolean DESCRICAO_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean DESCRICAO_PRODUTOIsKey(){
				    return false;
				}
				public Integer DESCRICAO_PRODUTOLength(){
				    return 70;
				}
				public Integer DESCRICAO_PRODUTOPrecision(){
				    return null;
				}
				public String DESCRICAO_PRODUTODefault(){
				
					return null;
				
				}
				public String DESCRICAO_PRODUTOComment(){
				
				    return "";
				
				}
				public String DESCRICAO_PRODUTOPattern(){
				
					return "";
				
				}
				public String DESCRICAO_PRODUTOOriginalDbColumnName(){
				
					return "DESCRICAO_PRODUTO";
				
				}

				
			    public BigDecimal DIMENSAO_ALTURA;

				public BigDecimal getDIMENSAO_ALTURA () {
					return this.DIMENSAO_ALTURA;
				}

				public Boolean DIMENSAO_ALTURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_ALTURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_ALTURALength(){
				    return 12;
				}
				public Integer DIMENSAO_ALTURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_ALTURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_ALTURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_ALTURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_ALTURAOriginalDbColumnName(){
				
					return "DIMENSAO_ALTURA";
				
				}

				
			    public BigDecimal DIMENSAO_LARGURA;

				public BigDecimal getDIMENSAO_LARGURA () {
					return this.DIMENSAO_LARGURA;
				}

				public Boolean DIMENSAO_LARGURAIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_LARGURAIsKey(){
				    return false;
				}
				public Integer DIMENSAO_LARGURALength(){
				    return 12;
				}
				public Integer DIMENSAO_LARGURAPrecision(){
				    return 3;
				}
				public String DIMENSAO_LARGURADefault(){
				
					return null;
				
				}
				public String DIMENSAO_LARGURAComment(){
				
				    return "";
				
				}
				public String DIMENSAO_LARGURAPattern(){
				
					return "";
				
				}
				public String DIMENSAO_LARGURAOriginalDbColumnName(){
				
					return "DIMENSAO_LARGURA";
				
				}

				
			    public BigDecimal DIMENSAO_PROFUNDIDADE;

				public BigDecimal getDIMENSAO_PROFUNDIDADE () {
					return this.DIMENSAO_PROFUNDIDADE;
				}

				public Boolean DIMENSAO_PROFUNDIDADEIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PROFUNDIDADEIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PROFUNDIDADELength(){
				    return 12;
				}
				public Integer DIMENSAO_PROFUNDIDADEPrecision(){
				    return 3;
				}
				public String DIMENSAO_PROFUNDIDADEDefault(){
				
					return null;
				
				}
				public String DIMENSAO_PROFUNDIDADEComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PROFUNDIDADEOriginalDbColumnName(){
				
					return "DIMENSAO_PROFUNDIDADE";
				
				}

				
			    public BigDecimal DIMENSAO_PESO;

				public BigDecimal getDIMENSAO_PESO () {
					return this.DIMENSAO_PESO;
				}

				public Boolean DIMENSAO_PESOIsNullable(){
				    return true;
				}
				public Boolean DIMENSAO_PESOIsKey(){
				    return false;
				}
				public Integer DIMENSAO_PESOLength(){
				    return 15;
				}
				public Integer DIMENSAO_PESOPrecision(){
				    return 4;
				}
				public String DIMENSAO_PESODefault(){
				
					return null;
				
				}
				public String DIMENSAO_PESOComment(){
				
				    return "";
				
				}
				public String DIMENSAO_PESOPattern(){
				
					return "";
				
				}
				public String DIMENSAO_PESOOriginalDbColumnName(){
				
					return "DIMENSAO_PESO";
				
				}

				
			    public BigDecimal QUANTIDADE_VENDIDA;

				public BigDecimal getQUANTIDADE_VENDIDA () {
					return this.QUANTIDADE_VENDIDA;
				}

				public Boolean QUANTIDADE_VENDIDAIsNullable(){
				    return true;
				}
				public Boolean QUANTIDADE_VENDIDAIsKey(){
				    return false;
				}
				public Integer QUANTIDADE_VENDIDALength(){
				    return 12;
				}
				public Integer QUANTIDADE_VENDIDAPrecision(){
				    return 4;
				}
				public String QUANTIDADE_VENDIDADefault(){
				
					return null;
				
				}
				public String QUANTIDADE_VENDIDAComment(){
				
				    return "";
				
				}
				public String QUANTIDADE_VENDIDAPattern(){
				
					return "";
				
				}
				public String QUANTIDADE_VENDIDAOriginalDbColumnName(){
				
					return "QUANTIDADE_VENDIDA";
				
				}

				
			    public BigDecimal VALOR_UNITARIO;

				public BigDecimal getVALOR_UNITARIO () {
					return this.VALOR_UNITARIO;
				}

				public Boolean VALOR_UNITARIOIsNullable(){
				    return true;
				}
				public Boolean VALOR_UNITARIOIsKey(){
				    return false;
				}
				public Integer VALOR_UNITARIOLength(){
				    return 12;
				}
				public Integer VALOR_UNITARIOPrecision(){
				    return 4;
				}
				public String VALOR_UNITARIODefault(){
				
					return null;
				
				}
				public String VALOR_UNITARIOComment(){
				
				    return "";
				
				}
				public String VALOR_UNITARIOPattern(){
				
					return "";
				
				}
				public String VALOR_UNITARIOOriginalDbColumnName(){
				
					return "VALOR_UNITARIO";
				
				}

				
			    public String CFOP;

				public String getCFOP () {
					return this.CFOP;
				}

				public Boolean CFOPIsNullable(){
				    return true;
				}
				public Boolean CFOPIsKey(){
				    return false;
				}
				public Integer CFOPLength(){
				    return 4;
				}
				public Integer CFOPPrecision(){
				    return null;
				}
				public String CFOPDefault(){
				
					return null;
				
				}
				public String CFOPComment(){
				
				    return "";
				
				}
				public String CFOPPattern(){
				
					return "";
				
				}
				public String CFOPOriginalDbColumnName(){
				
					return "CFOP";
				
				}

				
			    public java.util.Date DET_DTADOC;

				public java.util.Date getDET_DTADOC () {
					return this.DET_DTADOC;
				}

				public Boolean DET_DTADOCIsNullable(){
				    return true;
				}
				public Boolean DET_DTADOCIsKey(){
				    return false;
				}
				public Integer DET_DTADOCLength(){
				    return null;
				}
				public Integer DET_DTADOCPrecision(){
				    return null;
				}
				public String DET_DTADOCDefault(){
				
					return null;
				
				}
				public String DET_DTADOCComment(){
				
				    return "";
				
				}
				public String DET_DTADOCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DET_DTADOCOriginalDbColumnName(){
				
					return "DET_DTADOC";
				
				}

				
			    public String ESPDOC;

				public String getESPDOC () {
					return this.ESPDOC;
				}

				public Boolean ESPDOCIsNullable(){
				    return true;
				}
				public Boolean ESPDOCIsKey(){
				    return false;
				}
				public Integer ESPDOCLength(){
				    return 2;
				}
				public Integer ESPDOCPrecision(){
				    return null;
				}
				public String ESPDOCDefault(){
				
					return null;
				
				}
				public String ESPDOCComment(){
				
				    return "";
				
				}
				public String ESPDOCPattern(){
				
					return "";
				
				}
				public String ESPDOCOriginalDbColumnName(){
				
					return "ESPDOC";
				
				}

				
			    public String GER_CODEMP;

				public String getGER_CODEMP () {
					return this.GER_CODEMP;
				}

				public Boolean GER_CODEMPIsNullable(){
				    return true;
				}
				public Boolean GER_CODEMPIsKey(){
				    return false;
				}
				public Integer GER_CODEMPLength(){
				    return 3;
				}
				public Integer GER_CODEMPPrecision(){
				    return null;
				}
				public String GER_CODEMPDefault(){
				
					return null;
				
				}
				public String GER_CODEMPComment(){
				
				    return "";
				
				}
				public String GER_CODEMPPattern(){
				
					return "";
				
				}
				public String GER_CODEMPOriginalDbColumnName(){
				
					return "GER_CODEMP";
				
				}

				
			    public String GER_BAICON;

				public String getGER_BAICON () {
					return this.GER_BAICON;
				}

				public Boolean GER_BAICONIsNullable(){
				    return true;
				}
				public Boolean GER_BAICONIsKey(){
				    return false;
				}
				public Integer GER_BAICONLength(){
				    return 30;
				}
				public Integer GER_BAICONPrecision(){
				    return null;
				}
				public String GER_BAICONDefault(){
				
					return null;
				
				}
				public String GER_BAICONComment(){
				
				    return "";
				
				}
				public String GER_BAICONPattern(){
				
					return "";
				
				}
				public String GER_BAICONOriginalDbColumnName(){
				
					return "GER_BAICON";
				
				}

				
			    public String GER_ENDCON;

				public String getGER_ENDCON () {
					return this.GER_ENDCON;
				}

				public Boolean GER_ENDCONIsNullable(){
				    return true;
				}
				public Boolean GER_ENDCONIsKey(){
				    return false;
				}
				public Integer GER_ENDCONLength(){
				    return 40;
				}
				public Integer GER_ENDCONPrecision(){
				    return null;
				}
				public String GER_ENDCONDefault(){
				
					return null;
				
				}
				public String GER_ENDCONComment(){
				
				    return "";
				
				}
				public String GER_ENDCONPattern(){
				
					return "";
				
				}
				public String GER_ENDCONOriginalDbColumnName(){
				
					return "GER_ENDCON";
				
				}

				
			    public String CEP;

				public String getCEP () {
					return this.CEP;
				}

				public Boolean CEPIsNullable(){
				    return true;
				}
				public Boolean CEPIsKey(){
				    return false;
				}
				public Integer CEPLength(){
				    return 8;
				}
				public Integer CEPPrecision(){
				    return null;
				}
				public String CEPDefault(){
				
					return null;
				
				}
				public String CEPComment(){
				
				    return "";
				
				}
				public String CEPPattern(){
				
					return "";
				
				}
				public String CEPOriginalDbColumnName(){
				
					return "CEP";
				
				}

				
			    public String UF;

				public String getUF () {
					return this.UF;
				}

				public Boolean UFIsNullable(){
				    return true;
				}
				public Boolean UFIsKey(){
				    return false;
				}
				public Integer UFLength(){
				    return 2;
				}
				public Integer UFPrecision(){
				    return null;
				}
				public String UFDefault(){
				
					return null;
				
				}
				public String UFComment(){
				
				    return "";
				
				}
				public String UFPattern(){
				
					return "";
				
				}
				public String UFOriginalDbColumnName(){
				
					return "UF";
				
				}

				
			    public String CIDADE;

				public String getCIDADE () {
					return this.CIDADE;
				}

				public Boolean CIDADEIsNullable(){
				    return true;
				}
				public Boolean CIDADEIsKey(){
				    return false;
				}
				public Integer CIDADELength(){
				    return 40;
				}
				public Integer CIDADEPrecision(){
				    return null;
				}
				public String CIDADEDefault(){
				
					return null;
				
				}
				public String CIDADEComment(){
				
				    return "";
				
				}
				public String CIDADEPattern(){
				
					return "";
				
				}
				public String CIDADEOriginalDbColumnName(){
				
					return "CIDADE";
				
				}

				
			    public String TRA_NOMTRA;

				public String getTRA_NOMTRA () {
					return this.TRA_NOMTRA;
				}

				public Boolean TRA_NOMTRAIsNullable(){
				    return true;
				}
				public Boolean TRA_NOMTRAIsKey(){
				    return false;
				}
				public Integer TRA_NOMTRALength(){
				    return 40;
				}
				public Integer TRA_NOMTRAPrecision(){
				    return null;
				}
				public String TRA_NOMTRADefault(){
				
					return null;
				
				}
				public String TRA_NOMTRAComment(){
				
				    return "";
				
				}
				public String TRA_NOMTRAPattern(){
				
					return "";
				
				}
				public String TRA_NOMTRAOriginalDbColumnName(){
				
					return "TRA_NOMTRA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.AUTOINCREM == null) {
							if (other.AUTOINCREM != null)
								return false;
						
						} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            other.DATA_FATURAMENTO = this.DATA_FATURAMENTO;
	            other.NOTA_FISCAL = this.NOTA_FISCAL;
	            other.CODIGO_VENDEDOR = this.CODIGO_VENDEDOR;
	            other.CODIGO_PRODUTO = this.CODIGO_PRODUTO;
	            other.CODIGO_PRODUTO2 = this.CODIGO_PRODUTO2;
	            other.DESCRICAO_PRODUTO = this.DESCRICAO_PRODUTO;
	            other.DIMENSAO_ALTURA = this.DIMENSAO_ALTURA;
	            other.DIMENSAO_LARGURA = this.DIMENSAO_LARGURA;
	            other.DIMENSAO_PROFUNDIDADE = this.DIMENSAO_PROFUNDIDADE;
	            other.DIMENSAO_PESO = this.DIMENSAO_PESO;
	            other.QUANTIDADE_VENDIDA = this.QUANTIDADE_VENDIDA;
	            other.VALOR_UNITARIO = this.VALOR_UNITARIO;
	            other.CFOP = this.CFOP;
	            other.DET_DTADOC = this.DET_DTADOC;
	            other.ESPDOC = this.ESPDOC;
	            other.GER_CODEMP = this.GER_CODEMP;
	            other.GER_BAICON = this.GER_BAICON;
	            other.GER_ENDCON = this.GER_ENDCON;
	            other.CEP = this.CEP;
	            other.UF = this.UF;
	            other.CIDADE = this.CIDADE;
	            other.TRA_NOMTRA = this.TRA_NOMTRA;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.AUTOINCREM = this.AUTOINCREM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.AUTOINCREM = readString(dis);
					
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.AUTOINCREM = readString(dis);
					
					this.DATA_FATURAMENTO = readDate(dis);
					
					this.NOTA_FISCAL = readString(dis);
					
					this.CODIGO_VENDEDOR = readString(dis);
					
					this.CODIGO_PRODUTO = readString(dis);
					
						this.CODIGO_PRODUTO2 = readInteger(dis);
					
					this.DESCRICAO_PRODUTO = readString(dis);
					
						this.DIMENSAO_ALTURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_LARGURA = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PROFUNDIDADE = (BigDecimal) dis.readObject();
					
						this.DIMENSAO_PESO = (BigDecimal) dis.readObject();
					
						this.QUANTIDADE_VENDIDA = (BigDecimal) dis.readObject();
					
						this.VALOR_UNITARIO = (BigDecimal) dis.readObject();
					
					this.CFOP = readString(dis);
					
					this.DET_DTADOC = readDate(dis);
					
					this.ESPDOC = readString(dis);
					
					this.GER_CODEMP = readString(dis);
					
					this.GER_BAICON = readString(dis);
					
					this.GER_ENDCON = readString(dis);
					
					this.CEP = readString(dis);
					
					this.UF = readString(dis);
					
					this.CIDADE = readString(dis);
					
					this.TRA_NOMTRA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.AUTOINCREM,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_FATURAMENTO,dos);
					
					// String
				
						writeString(this.NOTA_FISCAL,dos);
					
					// String
				
						writeString(this.CODIGO_VENDEDOR,dos);
					
					// String
				
						writeString(this.CODIGO_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.CODIGO_PRODUTO2,dos);
					
					// String
				
						writeString(this.DESCRICAO_PRODUTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_ALTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_LARGURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PROFUNDIDADE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIMENSAO_PESO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.QUANTIDADE_VENDIDA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_UNITARIO);
					
					// String
				
						writeString(this.CFOP,dos);
					
					// java.util.Date
				
						writeDate(this.DET_DTADOC,dos);
					
					// String
				
						writeString(this.ESPDOC,dos);
					
					// String
				
						writeString(this.GER_CODEMP,dos);
					
					// String
				
						writeString(this.GER_BAICON,dos);
					
					// String
				
						writeString(this.GER_ENDCON,dos);
					
					// String
				
						writeString(this.CEP,dos);
					
					// String
				
						writeString(this.UF,dos);
					
					// String
				
						writeString(this.CIDADE,dos);
					
					// String
				
						writeString(this.TRA_NOMTRA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTOINCREM="+AUTOINCREM);
		sb.append(",DATA_FATURAMENTO="+String.valueOf(DATA_FATURAMENTO));
		sb.append(",NOTA_FISCAL="+NOTA_FISCAL);
		sb.append(",CODIGO_VENDEDOR="+CODIGO_VENDEDOR);
		sb.append(",CODIGO_PRODUTO="+CODIGO_PRODUTO);
		sb.append(",CODIGO_PRODUTO2="+String.valueOf(CODIGO_PRODUTO2));
		sb.append(",DESCRICAO_PRODUTO="+DESCRICAO_PRODUTO);
		sb.append(",DIMENSAO_ALTURA="+String.valueOf(DIMENSAO_ALTURA));
		sb.append(",DIMENSAO_LARGURA="+String.valueOf(DIMENSAO_LARGURA));
		sb.append(",DIMENSAO_PROFUNDIDADE="+String.valueOf(DIMENSAO_PROFUNDIDADE));
		sb.append(",DIMENSAO_PESO="+String.valueOf(DIMENSAO_PESO));
		sb.append(",QUANTIDADE_VENDIDA="+String.valueOf(QUANTIDADE_VENDIDA));
		sb.append(",VALOR_UNITARIO="+String.valueOf(VALOR_UNITARIO));
		sb.append(",CFOP="+CFOP);
		sb.append(",DET_DTADOC="+String.valueOf(DET_DTADOC));
		sb.append(",ESPDOC="+ESPDOC);
		sb.append(",GER_CODEMP="+GER_CODEMP);
		sb.append(",GER_BAICON="+GER_BAICON);
		sb.append(",GER_ENDCON="+GER_ENDCON);
		sb.append(",CEP="+CEP);
		sb.append(",UF="+UF);
		sb.append(",CIDADE="+CIDADE);
		sb.append(",TRA_NOMTRA="+TRA_NOMTRA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AUTOINCREM, other.AUTOINCREM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
out1Struct out1 = new out1Struct();
row2Struct row2 = new row2Struct();
row8Struct row8 = new row8Struct();
log_erroStruct log_erro = new log_erroStruct();









	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"log_erro");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dw_log_erro").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dw_log_erro").toLowerCase();
}


int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_4=0;
        java.lang.StringBuilder sb_tDBOutput_4 = new java.lang.StringBuilder();
        sb_tDBOutput_4.append("INSERT INTO \"").append(tableName_tDBOutput_4).append("\" (\"nm_programa\",\"data_execucao\",\"error_code\",\"error_message\") VALUES (?,?,?,?)");

        String insert_tDBOutput_4 = sb_tDBOutput_4.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
log_erroStruct log_erro_tmp = new log_erroStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("bi_betoneiras_escadas").toLowerCase();
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("bi_betoneiras_escadas").toLowerCase();
}

        int updateKeyCount_tDBOutput_5 = 1;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 23 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_5=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_5 + "\" WHERE \"autoincrem\" = ?");
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5 + "\" (\"data_faturamento\",\"nota_fiscal\",\"codigo_vendedor\",\"codigo_produto\",\"codigo_produto2\",\"descricao_produto\",\"dimensao_altura\",\"dimensao_largura\",\"dimensao_profundidade\",\"dimensao_peso\",\"quantidade_vendida\",\"valor_unitario\",\"cfop\",\"det_dtadoc\",\"espdoc\",\"ger_codemp\",\"ger_baicon\",\"ger_endcon\",\"cep\",\"uf\",\"cidade\",\"tra_nomtra\",\"autoincrem\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"data_faturamento\" = ?,\"nota_fiscal\" = ?,\"codigo_vendedor\" = ?,\"codigo_produto\" = ?,\"codigo_produto2\" = ?,\"descricao_produto\" = ?,\"dimensao_altura\" = ?,\"dimensao_largura\" = ?,\"dimensao_profundidade\" = ?,\"dimensao_peso\" = ?,\"quantidade_vendida\" = ?,\"valor_unitario\" = ?,\"cfop\" = ?,\"det_dtadoc\" = ?,\"espdoc\" = ?,\"ger_codemp\" = ?,\"ger_baicon\" = ?,\"ger_endcon\" = ?,\"cep\" = ?,\"uf\" = ?,\"cidade\" = ?,\"tra_nomtra\" = ? WHERE \"autoincrem\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmtUpdate_tDBOutput_5", pstmtUpdate_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					java.util.Date DATA_FATURAMENTO;
					String NOTA_FISCAL;
					String CODIGO_VENDEDOR;
					String CODIGO_PRODUTO;
					Integer CODIGO_PRODUTO2;
					String DESCRICAO_PRODUTO;
					BigDecimal DIMENSAO_ALTURA;
					BigDecimal DIMENSAO_LARGURA;
					BigDecimal DIMENSAO_PROFUNDIDADE;
					BigDecimal DIMENSAO_PESO;
					BigDecimal QUANTIDADE_VENDIDA;
					BigDecimal VALOR_UNITARIO;
					String CFOP;
					java.util.Date DET_DTADOC;
					String ESPDOC;
					String GER_CODEMP;
					String GER_BAICON;
					String GER_ENDCON;
					String CEP;
					String UF;
					String CIDADE;
					String TRA_NOMTRA;
					String AUTOINCREM;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.DATA_FATURAMENTO == null) ? 0 : this.DATA_FATURAMENTO.hashCode());
								
								result = prime * result + ((this.NOTA_FISCAL == null) ? 0 : this.NOTA_FISCAL.hashCode());
								
								result = prime * result + ((this.CODIGO_VENDEDOR == null) ? 0 : this.CODIGO_VENDEDOR.hashCode());
								
								result = prime * result + ((this.CODIGO_PRODUTO == null) ? 0 : this.CODIGO_PRODUTO.hashCode());
								
								result = prime * result + ((this.CODIGO_PRODUTO2 == null) ? 0 : this.CODIGO_PRODUTO2.hashCode());
								
								result = prime * result + ((this.DESCRICAO_PRODUTO == null) ? 0 : this.DESCRICAO_PRODUTO.hashCode());
								
								result = prime * result + ((this.DIMENSAO_ALTURA == null) ? 0 : this.DIMENSAO_ALTURA.hashCode());
								
								result = prime * result + ((this.DIMENSAO_LARGURA == null) ? 0 : this.DIMENSAO_LARGURA.hashCode());
								
								result = prime * result + ((this.DIMENSAO_PROFUNDIDADE == null) ? 0 : this.DIMENSAO_PROFUNDIDADE.hashCode());
								
								result = prime * result + ((this.DIMENSAO_PESO == null) ? 0 : this.DIMENSAO_PESO.hashCode());
								
								result = prime * result + ((this.QUANTIDADE_VENDIDA == null) ? 0 : this.QUANTIDADE_VENDIDA.hashCode());
								
								result = prime * result + ((this.VALOR_UNITARIO == null) ? 0 : this.VALOR_UNITARIO.hashCode());
								
								result = prime * result + ((this.CFOP == null) ? 0 : this.CFOP.hashCode());
								
								result = prime * result + ((this.DET_DTADOC == null) ? 0 : this.DET_DTADOC.hashCode());
								
								result = prime * result + ((this.ESPDOC == null) ? 0 : this.ESPDOC.hashCode());
								
								result = prime * result + ((this.GER_CODEMP == null) ? 0 : this.GER_CODEMP.hashCode());
								
								result = prime * result + ((this.GER_BAICON == null) ? 0 : this.GER_BAICON.hashCode());
								
								result = prime * result + ((this.GER_ENDCON == null) ? 0 : this.GER_ENDCON.hashCode());
								
								result = prime * result + ((this.CEP == null) ? 0 : this.CEP.hashCode());
								
								result = prime * result + ((this.UF == null) ? 0 : this.UF.hashCode());
								
								result = prime * result + ((this.CIDADE == null) ? 0 : this.CIDADE.hashCode());
								
								result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
								
								result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.DATA_FATURAMENTO == null) {
										if (other.DATA_FATURAMENTO != null) 
											return false;
								
									} else if (!this.DATA_FATURAMENTO.equals(other.DATA_FATURAMENTO))
								 
										return false;
								
									if (this.NOTA_FISCAL == null) {
										if (other.NOTA_FISCAL != null) 
											return false;
								
									} else if (!this.NOTA_FISCAL.equals(other.NOTA_FISCAL))
								 
										return false;
								
									if (this.CODIGO_VENDEDOR == null) {
										if (other.CODIGO_VENDEDOR != null) 
											return false;
								
									} else if (!this.CODIGO_VENDEDOR.equals(other.CODIGO_VENDEDOR))
								 
										return false;
								
									if (this.CODIGO_PRODUTO == null) {
										if (other.CODIGO_PRODUTO != null) 
											return false;
								
									} else if (!this.CODIGO_PRODUTO.equals(other.CODIGO_PRODUTO))
								 
										return false;
								
									if (this.CODIGO_PRODUTO2 == null) {
										if (other.CODIGO_PRODUTO2 != null) 
											return false;
								
									} else if (!this.CODIGO_PRODUTO2.equals(other.CODIGO_PRODUTO2))
								 
										return false;
								
									if (this.DESCRICAO_PRODUTO == null) {
										if (other.DESCRICAO_PRODUTO != null) 
											return false;
								
									} else if (!this.DESCRICAO_PRODUTO.equals(other.DESCRICAO_PRODUTO))
								 
										return false;
								
									if (this.DIMENSAO_ALTURA == null) {
										if (other.DIMENSAO_ALTURA != null) 
											return false;
								
									} else if (!this.DIMENSAO_ALTURA.equals(other.DIMENSAO_ALTURA))
								 
										return false;
								
									if (this.DIMENSAO_LARGURA == null) {
										if (other.DIMENSAO_LARGURA != null) 
											return false;
								
									} else if (!this.DIMENSAO_LARGURA.equals(other.DIMENSAO_LARGURA))
								 
										return false;
								
									if (this.DIMENSAO_PROFUNDIDADE == null) {
										if (other.DIMENSAO_PROFUNDIDADE != null) 
											return false;
								
									} else if (!this.DIMENSAO_PROFUNDIDADE.equals(other.DIMENSAO_PROFUNDIDADE))
								 
										return false;
								
									if (this.DIMENSAO_PESO == null) {
										if (other.DIMENSAO_PESO != null) 
											return false;
								
									} else if (!this.DIMENSAO_PESO.equals(other.DIMENSAO_PESO))
								 
										return false;
								
									if (this.QUANTIDADE_VENDIDA == null) {
										if (other.QUANTIDADE_VENDIDA != null) 
											return false;
								
									} else if (!this.QUANTIDADE_VENDIDA.equals(other.QUANTIDADE_VENDIDA))
								 
										return false;
								
									if (this.VALOR_UNITARIO == null) {
										if (other.VALOR_UNITARIO != null) 
											return false;
								
									} else if (!this.VALOR_UNITARIO.equals(other.VALOR_UNITARIO))
								 
										return false;
								
									if (this.CFOP == null) {
										if (other.CFOP != null) 
											return false;
								
									} else if (!this.CFOP.equals(other.CFOP))
								 
										return false;
								
									if (this.DET_DTADOC == null) {
										if (other.DET_DTADOC != null) 
											return false;
								
									} else if (!this.DET_DTADOC.equals(other.DET_DTADOC))
								 
										return false;
								
									if (this.ESPDOC == null) {
										if (other.ESPDOC != null) 
											return false;
								
									} else if (!this.ESPDOC.equals(other.ESPDOC))
								 
										return false;
								
									if (this.GER_CODEMP == null) {
										if (other.GER_CODEMP != null) 
											return false;
								
									} else if (!this.GER_CODEMP.equals(other.GER_CODEMP))
								 
										return false;
								
									if (this.GER_BAICON == null) {
										if (other.GER_BAICON != null) 
											return false;
								
									} else if (!this.GER_BAICON.equals(other.GER_BAICON))
								 
										return false;
								
									if (this.GER_ENDCON == null) {
										if (other.GER_ENDCON != null) 
											return false;
								
									} else if (!this.GER_ENDCON.equals(other.GER_ENDCON))
								 
										return false;
								
									if (this.CEP == null) {
										if (other.CEP != null) 
											return false;
								
									} else if (!this.CEP.equals(other.CEP))
								 
										return false;
								
									if (this.UF == null) {
										if (other.UF != null) 
											return false;
								
									} else if (!this.UF.equals(other.UF))
								 
										return false;
								
									if (this.CIDADE == null) {
										if (other.CIDADE != null) 
											return false;
								
									} else if (!this.CIDADE.equals(other.CIDADE))
								 
										return false;
								
									if (this.TRA_NOMTRA == null) {
										if (other.TRA_NOMTRA != null) 
											return false;
								
									} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA))
								 
										return false;
								
									if (this.AUTOINCREM == null) {
										if (other.AUTOINCREM != null) 
											return false;
								
									} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String AUTOINCREM;
					java.util.Date DATA_FATURAMENTO;
					String NOTA_FISCAL;
					String CODIGO_VENDEDOR;
					String CODIGO_PRODUTO;
					Integer CODIGO_PRODUTO2;
					String DESCRICAO_PRODUTO;
					BigDecimal DIMENSAO_ALTURA;
					BigDecimal DIMENSAO_LARGURA;
					BigDecimal DIMENSAO_PROFUNDIDADE;
					BigDecimal DIMENSAO_PESO;
					BigDecimal QUANTIDADE_VENDIDA;
					BigDecimal VALOR_UNITARIO;
					String CFOP;
					java.util.Date DET_DTADOC;
					String ESPDOC;
					String GER_CODEMP;
					String GER_BAICON;
					String GER_ENDCON;
					String CEP;
					String UF;
					String CIDADE;
					String TRA_NOMTRA;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.AUTOINCREM == null) ? 0 : this.AUTOINCREM.hashCode());
								
								result = prime * result + ((this.DATA_FATURAMENTO == null) ? 0 : this.DATA_FATURAMENTO.hashCode());
								
								result = prime * result + ((this.NOTA_FISCAL == null) ? 0 : this.NOTA_FISCAL.hashCode());
								
								result = prime * result + ((this.CODIGO_VENDEDOR == null) ? 0 : this.CODIGO_VENDEDOR.hashCode());
								
								result = prime * result + ((this.CODIGO_PRODUTO == null) ? 0 : this.CODIGO_PRODUTO.hashCode());
								
								result = prime * result + ((this.CODIGO_PRODUTO2 == null) ? 0 : this.CODIGO_PRODUTO2.hashCode());
								
								result = prime * result + ((this.DESCRICAO_PRODUTO == null) ? 0 : this.DESCRICAO_PRODUTO.hashCode());
								
								result = prime * result + ((this.DIMENSAO_ALTURA == null) ? 0 : this.DIMENSAO_ALTURA.hashCode());
								
								result = prime * result + ((this.DIMENSAO_LARGURA == null) ? 0 : this.DIMENSAO_LARGURA.hashCode());
								
								result = prime * result + ((this.DIMENSAO_PROFUNDIDADE == null) ? 0 : this.DIMENSAO_PROFUNDIDADE.hashCode());
								
								result = prime * result + ((this.DIMENSAO_PESO == null) ? 0 : this.DIMENSAO_PESO.hashCode());
								
								result = prime * result + ((this.QUANTIDADE_VENDIDA == null) ? 0 : this.QUANTIDADE_VENDIDA.hashCode());
								
								result = prime * result + ((this.VALOR_UNITARIO == null) ? 0 : this.VALOR_UNITARIO.hashCode());
								
								result = prime * result + ((this.CFOP == null) ? 0 : this.CFOP.hashCode());
								
								result = prime * result + ((this.DET_DTADOC == null) ? 0 : this.DET_DTADOC.hashCode());
								
								result = prime * result + ((this.ESPDOC == null) ? 0 : this.ESPDOC.hashCode());
								
								result = prime * result + ((this.GER_CODEMP == null) ? 0 : this.GER_CODEMP.hashCode());
								
								result = prime * result + ((this.GER_BAICON == null) ? 0 : this.GER_BAICON.hashCode());
								
								result = prime * result + ((this.GER_ENDCON == null) ? 0 : this.GER_ENDCON.hashCode());
								
								result = prime * result + ((this.CEP == null) ? 0 : this.CEP.hashCode());
								
								result = prime * result + ((this.UF == null) ? 0 : this.UF.hashCode());
								
								result = prime * result + ((this.CIDADE == null) ? 0 : this.CIDADE.hashCode());
								
								result = prime * result + ((this.TRA_NOMTRA == null) ? 0 : this.TRA_NOMTRA.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.AUTOINCREM == null) {
										if (other.AUTOINCREM != null) 
											return false;
								
									} else if (!this.AUTOINCREM.equals(other.AUTOINCREM))
								 
										return false;
								
									if (this.DATA_FATURAMENTO == null) {
										if (other.DATA_FATURAMENTO != null) 
											return false;
								
									} else if (!this.DATA_FATURAMENTO.equals(other.DATA_FATURAMENTO))
								 
										return false;
								
									if (this.NOTA_FISCAL == null) {
										if (other.NOTA_FISCAL != null) 
											return false;
								
									} else if (!this.NOTA_FISCAL.equals(other.NOTA_FISCAL))
								 
										return false;
								
									if (this.CODIGO_VENDEDOR == null) {
										if (other.CODIGO_VENDEDOR != null) 
											return false;
								
									} else if (!this.CODIGO_VENDEDOR.equals(other.CODIGO_VENDEDOR))
								 
										return false;
								
									if (this.CODIGO_PRODUTO == null) {
										if (other.CODIGO_PRODUTO != null) 
											return false;
								
									} else if (!this.CODIGO_PRODUTO.equals(other.CODIGO_PRODUTO))
								 
										return false;
								
									if (this.CODIGO_PRODUTO2 == null) {
										if (other.CODIGO_PRODUTO2 != null) 
											return false;
								
									} else if (!this.CODIGO_PRODUTO2.equals(other.CODIGO_PRODUTO2))
								 
										return false;
								
									if (this.DESCRICAO_PRODUTO == null) {
										if (other.DESCRICAO_PRODUTO != null) 
											return false;
								
									} else if (!this.DESCRICAO_PRODUTO.equals(other.DESCRICAO_PRODUTO))
								 
										return false;
								
									if (this.DIMENSAO_ALTURA == null) {
										if (other.DIMENSAO_ALTURA != null) 
											return false;
								
									} else if (!this.DIMENSAO_ALTURA.equals(other.DIMENSAO_ALTURA))
								 
										return false;
								
									if (this.DIMENSAO_LARGURA == null) {
										if (other.DIMENSAO_LARGURA != null) 
											return false;
								
									} else if (!this.DIMENSAO_LARGURA.equals(other.DIMENSAO_LARGURA))
								 
										return false;
								
									if (this.DIMENSAO_PROFUNDIDADE == null) {
										if (other.DIMENSAO_PROFUNDIDADE != null) 
											return false;
								
									} else if (!this.DIMENSAO_PROFUNDIDADE.equals(other.DIMENSAO_PROFUNDIDADE))
								 
										return false;
								
									if (this.DIMENSAO_PESO == null) {
										if (other.DIMENSAO_PESO != null) 
											return false;
								
									} else if (!this.DIMENSAO_PESO.equals(other.DIMENSAO_PESO))
								 
										return false;
								
									if (this.QUANTIDADE_VENDIDA == null) {
										if (other.QUANTIDADE_VENDIDA != null) 
											return false;
								
									} else if (!this.QUANTIDADE_VENDIDA.equals(other.QUANTIDADE_VENDIDA))
								 
										return false;
								
									if (this.VALOR_UNITARIO == null) {
										if (other.VALOR_UNITARIO != null) 
											return false;
								
									} else if (!this.VALOR_UNITARIO.equals(other.VALOR_UNITARIO))
								 
										return false;
								
									if (this.CFOP == null) {
										if (other.CFOP != null) 
											return false;
								
									} else if (!this.CFOP.equals(other.CFOP))
								 
										return false;
								
									if (this.DET_DTADOC == null) {
										if (other.DET_DTADOC != null) 
											return false;
								
									} else if (!this.DET_DTADOC.equals(other.DET_DTADOC))
								 
										return false;
								
									if (this.ESPDOC == null) {
										if (other.ESPDOC != null) 
											return false;
								
									} else if (!this.ESPDOC.equals(other.ESPDOC))
								 
										return false;
								
									if (this.GER_CODEMP == null) {
										if (other.GER_CODEMP != null) 
											return false;
								
									} else if (!this.GER_CODEMP.equals(other.GER_CODEMP))
								 
										return false;
								
									if (this.GER_BAICON == null) {
										if (other.GER_BAICON != null) 
											return false;
								
									} else if (!this.GER_BAICON.equals(other.GER_BAICON))
								 
										return false;
								
									if (this.GER_ENDCON == null) {
										if (other.GER_ENDCON != null) 
											return false;
								
									} else if (!this.GER_ENDCON.equals(other.GER_ENDCON))
								 
										return false;
								
									if (this.CEP == null) {
										if (other.CEP != null) 
											return false;
								
									} else if (!this.CEP.equals(other.CEP))
								 
										return false;
								
									if (this.UF == null) {
										if (other.UF != null) 
											return false;
								
									} else if (!this.UF.equals(other.UF))
								 
										return false;
								
									if (this.CIDADE == null) {
										if (other.CIDADE != null) 
											return false;
								
									} else if (!this.CIDADE.equals(other.CIDADE))
								 
										return false;
								
									if (this.TRA_NOMTRA == null) {
										if (other.TRA_NOMTRA != null) 
											return false;
								
									} else if (!this.TRA_NOMTRA.equals(other.TRA_NOMTRA))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nSELECT\nMD.AUTOINCREM ,\nMD.DET_DTAENT DATA_FATURAMENTO,\nMD.DET_NUMDOC NOTA_FISCAL,\nMD.DET_CODVEN CODIGO_VENDEDOR,"
+"\nMD.DET_CODITE CODIGO_PRODUTO,\nCI.ITE_CODITE CODIGO_PRODUTO2,\nCI.ITE_DESITE DESCRICAO_PRODUTO,\nDS.ITE_EXPALT DIMENSAO"
+"_ALTURA, \nDS.ITE_EXPLAR DIMENSAO_LARGURA, \nDS.ITE_EXPPRO DIMENSAO_PROFUNDIDADE,\nCI.ITE_PESOIT DIMENSAO_PESO,\nMD.DET_"
+"QTDITE QUANTIDADE_VENDIDA,\nMD.DET_UNITAR VALOR_UNITARIO,\nMD.DET_CLAFIS CFOP,\nMD.DET_DTADOC,\nMD.DET_ESPDOC ESPDOC,\nM"
+"G.GER_CODEMP,\nMG.GER_BAICON,\nMG.GER_ENDCON,\nMG.GER_CEPCON CEP,\nMG.GER_ESTADO UF,\nCID.CID_NOMCID CIDADE,\nCT.TRA_NOM"
+"TRA \nFROM MOVGER MG\nINNER JOIN MOVDET MD ON MG.AUTOINCREM = MD.DET_SEQGER\nINNER JOIN CADITE CI ON MD.DET_CODITE = CI."
+"ITE_CODITE AND MG.GER_CODEMP = '001' \nINNER JOIN CADCID CID ON CID.CID_CODCID = MG.GER_CIDCON \nINNER JOIN DESSIT DS ON"
+" CI.ITE_CODITE = DS.ITE_CODITE\nINNER JOIN CADTRA CT ON MG.GER_CODTRA = CT.TRA_CODTRA \nWHERE\nLOCATE(MD.DET_CLAFIS, @CL"
+"AFIS) <> '0'\nAND MD.DET_TIP_FC = 'C'\nAND MD.DET_CODEMP <> '301'\nAND MG.GER_ESPDOC = 'NF'\nAND MD.DET_DTAENT BETWEEN D"
+"ATE_ADD(CURRENT_DATE(), INTERVAL - 1 DAY) AND CURRENT_DATE()\n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.AUTOINCREM = null;
							} else {
	                         		
        	row1.AUTOINCREM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.DATA_FATURAMENTO = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DATA_FATURAMENTO = rs_tDBInput_1.getTimestamp(2);
					} else {
						row1.DATA_FATURAMENTO = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DATA_FATURAMENTO =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.NOTA_FISCAL = null;
							} else {
	                         		
        	row1.NOTA_FISCAL = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.CODIGO_VENDEDOR = null;
							} else {
	                         		
        	row1.CODIGO_VENDEDOR = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.CODIGO_PRODUTO = null;
							} else {
	                         		
        	row1.CODIGO_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.CODIGO_PRODUTO2 = null;
							} else {
		                          
            row1.CODIGO_PRODUTO2 = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.CODIGO_PRODUTO2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.DESCRICAO_PRODUTO = null;
							} else {
	                         		
        	row1.DESCRICAO_PRODUTO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.DIMENSAO_ALTURA = null;
							} else {
		                          
            row1.DIMENSAO_ALTURA = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.DIMENSAO_ALTURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.DIMENSAO_LARGURA = null;
							} else {
		                          
            row1.DIMENSAO_LARGURA = rs_tDBInput_1.getBigDecimal(9);
            if(rs_tDBInput_1.wasNull()){
                    row1.DIMENSAO_LARGURA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.DIMENSAO_PROFUNDIDADE = null;
							} else {
		                          
            row1.DIMENSAO_PROFUNDIDADE = rs_tDBInput_1.getBigDecimal(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.DIMENSAO_PROFUNDIDADE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.DIMENSAO_PESO = null;
							} else {
		                          
            row1.DIMENSAO_PESO = rs_tDBInput_1.getBigDecimal(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.DIMENSAO_PESO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.QUANTIDADE_VENDIDA = null;
							} else {
		                          
            row1.QUANTIDADE_VENDIDA = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    row1.QUANTIDADE_VENDIDA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.VALOR_UNITARIO = null;
							} else {
		                          
            row1.VALOR_UNITARIO = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.VALOR_UNITARIO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.CFOP = null;
							} else {
	                         		
        	row1.CFOP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 14, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.DET_DTADOC = null;
							} else {
										
				if(rs_tDBInput_1.getString(15) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(15);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						row1.DET_DTADOC = rs_tDBInput_1.getTimestamp(15);
					} else {
						row1.DET_DTADOC = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					row1.DET_DTADOC =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.ESPDOC = null;
							} else {
	                         		
        	row1.ESPDOC = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.GER_CODEMP = null;
							} else {
	                         		
        	row1.GER_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.GER_BAICON = null;
							} else {
	                         		
        	row1.GER_BAICON = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.GER_ENDCON = null;
							} else {
	                         		
        	row1.GER_ENDCON = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 20) {
								row1.CEP = null;
							} else {
	                         		
        	row1.CEP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 20, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 21) {
								row1.UF = null;
							} else {
	                         		
        	row1.UF = routines.system.JDBCUtil.getString(rs_tDBInput_1, 21, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 22) {
								row1.CIDADE = null;
							} else {
	                         		
        	row1.CIDADE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 22, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 23) {
								row1.TRA_NOMTRA = null;
							} else {
	                         		
        	row1.TRA_NOMTRA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 23, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					
row3 = null;			
if(row1.AUTOINCREM == null){
	finder_tUniqRow_1.AUTOINCREM = null;
}else{
	finder_tUniqRow_1.AUTOINCREM = row1.AUTOINCREM.toLowerCase();
}
finder_tUniqRow_1.DATA_FATURAMENTO = row1.DATA_FATURAMENTO;
if(row1.NOTA_FISCAL == null){
	finder_tUniqRow_1.NOTA_FISCAL = null;
}else{
	finder_tUniqRow_1.NOTA_FISCAL = row1.NOTA_FISCAL.toLowerCase();
}
if(row1.CODIGO_VENDEDOR == null){
	finder_tUniqRow_1.CODIGO_VENDEDOR = null;
}else{
	finder_tUniqRow_1.CODIGO_VENDEDOR = row1.CODIGO_VENDEDOR.toLowerCase();
}
if(row1.CODIGO_PRODUTO == null){
	finder_tUniqRow_1.CODIGO_PRODUTO = null;
}else{
	finder_tUniqRow_1.CODIGO_PRODUTO = row1.CODIGO_PRODUTO.toLowerCase();
}
finder_tUniqRow_1.CODIGO_PRODUTO2 = row1.CODIGO_PRODUTO2;
if(row1.DESCRICAO_PRODUTO == null){
	finder_tUniqRow_1.DESCRICAO_PRODUTO = null;
}else{
	finder_tUniqRow_1.DESCRICAO_PRODUTO = row1.DESCRICAO_PRODUTO.toLowerCase();
}
finder_tUniqRow_1.DIMENSAO_ALTURA = row1.DIMENSAO_ALTURA;
finder_tUniqRow_1.DIMENSAO_LARGURA = row1.DIMENSAO_LARGURA;
finder_tUniqRow_1.DIMENSAO_PROFUNDIDADE = row1.DIMENSAO_PROFUNDIDADE;
finder_tUniqRow_1.DIMENSAO_PESO = row1.DIMENSAO_PESO;
finder_tUniqRow_1.QUANTIDADE_VENDIDA = row1.QUANTIDADE_VENDIDA;
finder_tUniqRow_1.VALOR_UNITARIO = row1.VALOR_UNITARIO;
if(row1.CFOP == null){
	finder_tUniqRow_1.CFOP = null;
}else{
	finder_tUniqRow_1.CFOP = row1.CFOP.toLowerCase();
}
finder_tUniqRow_1.DET_DTADOC = row1.DET_DTADOC;
if(row1.ESPDOC == null){
	finder_tUniqRow_1.ESPDOC = null;
}else{
	finder_tUniqRow_1.ESPDOC = row1.ESPDOC.toLowerCase();
}
if(row1.GER_CODEMP == null){
	finder_tUniqRow_1.GER_CODEMP = null;
}else{
	finder_tUniqRow_1.GER_CODEMP = row1.GER_CODEMP.toLowerCase();
}
if(row1.GER_BAICON == null){
	finder_tUniqRow_1.GER_BAICON = null;
}else{
	finder_tUniqRow_1.GER_BAICON = row1.GER_BAICON.toLowerCase();
}
if(row1.GER_ENDCON == null){
	finder_tUniqRow_1.GER_ENDCON = null;
}else{
	finder_tUniqRow_1.GER_ENDCON = row1.GER_ENDCON.toLowerCase();
}
if(row1.CEP == null){
	finder_tUniqRow_1.CEP = null;
}else{
	finder_tUniqRow_1.CEP = row1.CEP.toLowerCase();
}
if(row1.UF == null){
	finder_tUniqRow_1.UF = null;
}else{
	finder_tUniqRow_1.UF = row1.UF.toLowerCase();
}
if(row1.CIDADE == null){
	finder_tUniqRow_1.CIDADE = null;
}else{
	finder_tUniqRow_1.CIDADE = row1.CIDADE.toLowerCase();
}
if(row1.TRA_NOMTRA == null){
	finder_tUniqRow_1.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_1.TRA_NOMTRA = row1.TRA_NOMTRA.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row1.AUTOINCREM == null){
	new_tUniqRow_1.AUTOINCREM = null;
}else{
	new_tUniqRow_1.AUTOINCREM = row1.AUTOINCREM.toLowerCase();
}
new_tUniqRow_1.DATA_FATURAMENTO = row1.DATA_FATURAMENTO;
if(row1.NOTA_FISCAL == null){
	new_tUniqRow_1.NOTA_FISCAL = null;
}else{
	new_tUniqRow_1.NOTA_FISCAL = row1.NOTA_FISCAL.toLowerCase();
}
if(row1.CODIGO_VENDEDOR == null){
	new_tUniqRow_1.CODIGO_VENDEDOR = null;
}else{
	new_tUniqRow_1.CODIGO_VENDEDOR = row1.CODIGO_VENDEDOR.toLowerCase();
}
if(row1.CODIGO_PRODUTO == null){
	new_tUniqRow_1.CODIGO_PRODUTO = null;
}else{
	new_tUniqRow_1.CODIGO_PRODUTO = row1.CODIGO_PRODUTO.toLowerCase();
}
new_tUniqRow_1.CODIGO_PRODUTO2 = row1.CODIGO_PRODUTO2;
if(row1.DESCRICAO_PRODUTO == null){
	new_tUniqRow_1.DESCRICAO_PRODUTO = null;
}else{
	new_tUniqRow_1.DESCRICAO_PRODUTO = row1.DESCRICAO_PRODUTO.toLowerCase();
}
new_tUniqRow_1.DIMENSAO_ALTURA = row1.DIMENSAO_ALTURA;
new_tUniqRow_1.DIMENSAO_LARGURA = row1.DIMENSAO_LARGURA;
new_tUniqRow_1.DIMENSAO_PROFUNDIDADE = row1.DIMENSAO_PROFUNDIDADE;
new_tUniqRow_1.DIMENSAO_PESO = row1.DIMENSAO_PESO;
new_tUniqRow_1.QUANTIDADE_VENDIDA = row1.QUANTIDADE_VENDIDA;
new_tUniqRow_1.VALOR_UNITARIO = row1.VALOR_UNITARIO;
if(row1.CFOP == null){
	new_tUniqRow_1.CFOP = null;
}else{
	new_tUniqRow_1.CFOP = row1.CFOP.toLowerCase();
}
new_tUniqRow_1.DET_DTADOC = row1.DET_DTADOC;
if(row1.ESPDOC == null){
	new_tUniqRow_1.ESPDOC = null;
}else{
	new_tUniqRow_1.ESPDOC = row1.ESPDOC.toLowerCase();
}
if(row1.GER_CODEMP == null){
	new_tUniqRow_1.GER_CODEMP = null;
}else{
	new_tUniqRow_1.GER_CODEMP = row1.GER_CODEMP.toLowerCase();
}
if(row1.GER_BAICON == null){
	new_tUniqRow_1.GER_BAICON = null;
}else{
	new_tUniqRow_1.GER_BAICON = row1.GER_BAICON.toLowerCase();
}
if(row1.GER_ENDCON == null){
	new_tUniqRow_1.GER_ENDCON = null;
}else{
	new_tUniqRow_1.GER_ENDCON = row1.GER_ENDCON.toLowerCase();
}
if(row1.CEP == null){
	new_tUniqRow_1.CEP = null;
}else{
	new_tUniqRow_1.CEP = row1.CEP.toLowerCase();
}
if(row1.UF == null){
	new_tUniqRow_1.UF = null;
}else{
	new_tUniqRow_1.UF = row1.UF.toLowerCase();
}
if(row1.CIDADE == null){
	new_tUniqRow_1.CIDADE = null;
}else{
	new_tUniqRow_1.CIDADE = row1.CIDADE.toLowerCase();
}
if(row1.TRA_NOMTRA == null){
	new_tUniqRow_1.TRA_NOMTRA = null;
}else{
	new_tUniqRow_1.TRA_NOMTRA = row1.TRA_NOMTRA.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row3 == null){ 
	
	row3 = new row3Struct();
}row3.AUTOINCREM = row1.AUTOINCREM;			row3.DATA_FATURAMENTO = row1.DATA_FATURAMENTO;			row3.NOTA_FISCAL = row1.NOTA_FISCAL;			row3.CODIGO_VENDEDOR = row1.CODIGO_VENDEDOR;			row3.CODIGO_PRODUTO = row1.CODIGO_PRODUTO;			row3.CODIGO_PRODUTO2 = row1.CODIGO_PRODUTO2;			row3.DESCRICAO_PRODUTO = row1.DESCRICAO_PRODUTO;			row3.DIMENSAO_ALTURA = row1.DIMENSAO_ALTURA;			row3.DIMENSAO_LARGURA = row1.DIMENSAO_LARGURA;			row3.DIMENSAO_PROFUNDIDADE = row1.DIMENSAO_PROFUNDIDADE;			row3.DIMENSAO_PESO = row1.DIMENSAO_PESO;			row3.QUANTIDADE_VENDIDA = row1.QUANTIDADE_VENDIDA;			row3.VALOR_UNITARIO = row1.VALOR_UNITARIO;			row3.CFOP = row1.CFOP;			row3.DET_DTADOC = row1.DET_DTADOC;			row3.ESPDOC = row1.ESPDOC;			row3.GER_CODEMP = row1.GER_CODEMP;			row3.GER_BAICON = row1.GER_BAICON;			row3.GER_ENDCON = row1.GER_ENDCON;			row3.CEP = row1.CEP;			row3.UF = row1.UF;			row3.CIDADE = row1.CIDADE;			row3.TRA_NOMTRA = row1.TRA_NOMTRA;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 
			row8 = null;



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.DATA_FATURAMENTO = row3.DATA_FATURAMENTO ;
out1_tmp.NOTA_FISCAL = row3.NOTA_FISCAL ;
out1_tmp.CODIGO_VENDEDOR = row3.CODIGO_VENDEDOR ;
out1_tmp.CODIGO_PRODUTO = row3.CODIGO_PRODUTO ;
out1_tmp.CODIGO_PRODUTO2 = row3.CODIGO_PRODUTO2 ;
out1_tmp.DESCRICAO_PRODUTO = row3.DESCRICAO_PRODUTO ;
out1_tmp.DIMENSAO_ALTURA = row3.DIMENSAO_ALTURA ;
out1_tmp.DIMENSAO_LARGURA = row3.DIMENSAO_LARGURA ;
out1_tmp.DIMENSAO_PROFUNDIDADE = row3.DIMENSAO_PROFUNDIDADE ;
out1_tmp.DIMENSAO_PESO = row3.DIMENSAO_PESO ;
out1_tmp.QUANTIDADE_VENDIDA = row3.QUANTIDADE_VENDIDA ;
out1_tmp.VALOR_UNITARIO = row3.VALOR_UNITARIO ;
out1_tmp.CFOP = row3.CFOP ;
out1_tmp.DET_DTADOC = row3.DET_DTADOC ;
out1_tmp.ESPDOC = row3.ESPDOC ;
out1_tmp.GER_CODEMP = row3.GER_CODEMP ;
out1_tmp.GER_BAICON = row3.GER_BAICON ;
out1_tmp.GER_ENDCON = row3.GER_ENDCON ;
out1_tmp.CEP = row3.CEP ;
out1_tmp.UF = row3.UF ;
out1_tmp.CIDADE = row3.CIDADE ;
out1_tmp.TRA_NOMTRA = row3.TRA_NOMTRA ;
out1_tmp.AUTOINCREM = row3.AUTOINCREM ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 
			row8 = null;



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
row2 = null;			
finder_tUniqRow_2.DATA_FATURAMENTO = out1.DATA_FATURAMENTO;
if(out1.NOTA_FISCAL == null){
	finder_tUniqRow_2.NOTA_FISCAL = null;
}else{
	finder_tUniqRow_2.NOTA_FISCAL = out1.NOTA_FISCAL.toLowerCase();
}
if(out1.CODIGO_VENDEDOR == null){
	finder_tUniqRow_2.CODIGO_VENDEDOR = null;
}else{
	finder_tUniqRow_2.CODIGO_VENDEDOR = out1.CODIGO_VENDEDOR.toLowerCase();
}
if(out1.CODIGO_PRODUTO == null){
	finder_tUniqRow_2.CODIGO_PRODUTO = null;
}else{
	finder_tUniqRow_2.CODIGO_PRODUTO = out1.CODIGO_PRODUTO.toLowerCase();
}
finder_tUniqRow_2.CODIGO_PRODUTO2 = out1.CODIGO_PRODUTO2;
if(out1.DESCRICAO_PRODUTO == null){
	finder_tUniqRow_2.DESCRICAO_PRODUTO = null;
}else{
	finder_tUniqRow_2.DESCRICAO_PRODUTO = out1.DESCRICAO_PRODUTO.toLowerCase();
}
finder_tUniqRow_2.DIMENSAO_ALTURA = out1.DIMENSAO_ALTURA;
finder_tUniqRow_2.DIMENSAO_LARGURA = out1.DIMENSAO_LARGURA;
finder_tUniqRow_2.DIMENSAO_PROFUNDIDADE = out1.DIMENSAO_PROFUNDIDADE;
finder_tUniqRow_2.DIMENSAO_PESO = out1.DIMENSAO_PESO;
finder_tUniqRow_2.QUANTIDADE_VENDIDA = out1.QUANTIDADE_VENDIDA;
finder_tUniqRow_2.VALOR_UNITARIO = out1.VALOR_UNITARIO;
if(out1.CFOP == null){
	finder_tUniqRow_2.CFOP = null;
}else{
	finder_tUniqRow_2.CFOP = out1.CFOP.toLowerCase();
}
finder_tUniqRow_2.DET_DTADOC = out1.DET_DTADOC;
if(out1.ESPDOC == null){
	finder_tUniqRow_2.ESPDOC = null;
}else{
	finder_tUniqRow_2.ESPDOC = out1.ESPDOC.toLowerCase();
}
if(out1.GER_CODEMP == null){
	finder_tUniqRow_2.GER_CODEMP = null;
}else{
	finder_tUniqRow_2.GER_CODEMP = out1.GER_CODEMP.toLowerCase();
}
if(out1.GER_BAICON == null){
	finder_tUniqRow_2.GER_BAICON = null;
}else{
	finder_tUniqRow_2.GER_BAICON = out1.GER_BAICON.toLowerCase();
}
if(out1.GER_ENDCON == null){
	finder_tUniqRow_2.GER_ENDCON = null;
}else{
	finder_tUniqRow_2.GER_ENDCON = out1.GER_ENDCON.toLowerCase();
}
if(out1.CEP == null){
	finder_tUniqRow_2.CEP = null;
}else{
	finder_tUniqRow_2.CEP = out1.CEP.toLowerCase();
}
if(out1.UF == null){
	finder_tUniqRow_2.UF = null;
}else{
	finder_tUniqRow_2.UF = out1.UF.toLowerCase();
}
if(out1.CIDADE == null){
	finder_tUniqRow_2.CIDADE = null;
}else{
	finder_tUniqRow_2.CIDADE = out1.CIDADE.toLowerCase();
}
if(out1.TRA_NOMTRA == null){
	finder_tUniqRow_2.TRA_NOMTRA = null;
}else{
	finder_tUniqRow_2.TRA_NOMTRA = out1.TRA_NOMTRA.toLowerCase();
}
if(out1.AUTOINCREM == null){
	finder_tUniqRow_2.AUTOINCREM = null;
}else{
	finder_tUniqRow_2.AUTOINCREM = out1.AUTOINCREM.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
new_tUniqRow_2.DATA_FATURAMENTO = out1.DATA_FATURAMENTO;
if(out1.NOTA_FISCAL == null){
	new_tUniqRow_2.NOTA_FISCAL = null;
}else{
	new_tUniqRow_2.NOTA_FISCAL = out1.NOTA_FISCAL.toLowerCase();
}
if(out1.CODIGO_VENDEDOR == null){
	new_tUniqRow_2.CODIGO_VENDEDOR = null;
}else{
	new_tUniqRow_2.CODIGO_VENDEDOR = out1.CODIGO_VENDEDOR.toLowerCase();
}
if(out1.CODIGO_PRODUTO == null){
	new_tUniqRow_2.CODIGO_PRODUTO = null;
}else{
	new_tUniqRow_2.CODIGO_PRODUTO = out1.CODIGO_PRODUTO.toLowerCase();
}
new_tUniqRow_2.CODIGO_PRODUTO2 = out1.CODIGO_PRODUTO2;
if(out1.DESCRICAO_PRODUTO == null){
	new_tUniqRow_2.DESCRICAO_PRODUTO = null;
}else{
	new_tUniqRow_2.DESCRICAO_PRODUTO = out1.DESCRICAO_PRODUTO.toLowerCase();
}
new_tUniqRow_2.DIMENSAO_ALTURA = out1.DIMENSAO_ALTURA;
new_tUniqRow_2.DIMENSAO_LARGURA = out1.DIMENSAO_LARGURA;
new_tUniqRow_2.DIMENSAO_PROFUNDIDADE = out1.DIMENSAO_PROFUNDIDADE;
new_tUniqRow_2.DIMENSAO_PESO = out1.DIMENSAO_PESO;
new_tUniqRow_2.QUANTIDADE_VENDIDA = out1.QUANTIDADE_VENDIDA;
new_tUniqRow_2.VALOR_UNITARIO = out1.VALOR_UNITARIO;
if(out1.CFOP == null){
	new_tUniqRow_2.CFOP = null;
}else{
	new_tUniqRow_2.CFOP = out1.CFOP.toLowerCase();
}
new_tUniqRow_2.DET_DTADOC = out1.DET_DTADOC;
if(out1.ESPDOC == null){
	new_tUniqRow_2.ESPDOC = null;
}else{
	new_tUniqRow_2.ESPDOC = out1.ESPDOC.toLowerCase();
}
if(out1.GER_CODEMP == null){
	new_tUniqRow_2.GER_CODEMP = null;
}else{
	new_tUniqRow_2.GER_CODEMP = out1.GER_CODEMP.toLowerCase();
}
if(out1.GER_BAICON == null){
	new_tUniqRow_2.GER_BAICON = null;
}else{
	new_tUniqRow_2.GER_BAICON = out1.GER_BAICON.toLowerCase();
}
if(out1.GER_ENDCON == null){
	new_tUniqRow_2.GER_ENDCON = null;
}else{
	new_tUniqRow_2.GER_ENDCON = out1.GER_ENDCON.toLowerCase();
}
if(out1.CEP == null){
	new_tUniqRow_2.CEP = null;
}else{
	new_tUniqRow_2.CEP = out1.CEP.toLowerCase();
}
if(out1.UF == null){
	new_tUniqRow_2.UF = null;
}else{
	new_tUniqRow_2.UF = out1.UF.toLowerCase();
}
if(out1.CIDADE == null){
	new_tUniqRow_2.CIDADE = null;
}else{
	new_tUniqRow_2.CIDADE = out1.CIDADE.toLowerCase();
}
if(out1.TRA_NOMTRA == null){
	new_tUniqRow_2.TRA_NOMTRA = null;
}else{
	new_tUniqRow_2.TRA_NOMTRA = out1.TRA_NOMTRA.toLowerCase();
}
if(out1.AUTOINCREM == null){
	new_tUniqRow_2.AUTOINCREM = null;
}else{
	new_tUniqRow_2.AUTOINCREM = out1.AUTOINCREM.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row2 == null){ 
	
	row2 = new row2Struct();
}row2.DATA_FATURAMENTO = out1.DATA_FATURAMENTO;			row2.NOTA_FISCAL = out1.NOTA_FISCAL;			row2.CODIGO_VENDEDOR = out1.CODIGO_VENDEDOR;			row2.CODIGO_PRODUTO = out1.CODIGO_PRODUTO;			row2.CODIGO_PRODUTO2 = out1.CODIGO_PRODUTO2;			row2.DESCRICAO_PRODUTO = out1.DESCRICAO_PRODUTO;			row2.DIMENSAO_ALTURA = out1.DIMENSAO_ALTURA;			row2.DIMENSAO_LARGURA = out1.DIMENSAO_LARGURA;			row2.DIMENSAO_PROFUNDIDADE = out1.DIMENSAO_PROFUNDIDADE;			row2.DIMENSAO_PESO = out1.DIMENSAO_PESO;			row2.QUANTIDADE_VENDIDA = out1.QUANTIDADE_VENDIDA;			row2.VALOR_UNITARIO = out1.VALOR_UNITARIO;			row2.CFOP = out1.CFOP;			row2.DET_DTADOC = out1.DET_DTADOC;			row2.ESPDOC = out1.ESPDOC;			row2.GER_CODEMP = out1.GER_CODEMP;			row2.GER_BAICON = out1.GER_BAICON;			row2.GER_ENDCON = out1.GER_ENDCON;			row2.CEP = out1.CEP;			row2.UF = out1.UF;			row2.CIDADE = out1.CIDADE;			row2.TRA_NOMTRA = out1.TRA_NOMTRA;			row2.AUTOINCREM = out1.AUTOINCREM;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 
			row8 = null;



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



            row8 = null;
        whetherReject_tDBOutput_5 = false;
                    if(row2.AUTOINCREM == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, row2.AUTOINCREM);
}

            int checkCount_tDBOutput_5 = -1;
            try (java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery()) {
                while(rs_tDBOutput_5.next()) {
                    checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
                }
            }
            if(checkCount_tDBOutput_5 > 0) {
                        if(row2.DATA_FATURAMENTO != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(1, new java.sql.Timestamp(row2.DATA_FATURAMENTO.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(1, java.sql.Types.TIMESTAMP);
}

                        if(row2.NOTA_FISCAL == null) {
pstmtUpdate_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(2, row2.NOTA_FISCAL);
}

                        if(row2.CODIGO_VENDEDOR == null) {
pstmtUpdate_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(3, row2.CODIGO_VENDEDOR);
}

                        if(row2.CODIGO_PRODUTO == null) {
pstmtUpdate_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(4, row2.CODIGO_PRODUTO);
}

                        if(row2.CODIGO_PRODUTO2 == null) {
pstmtUpdate_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_5.setInt(5, row2.CODIGO_PRODUTO2);
}

                        if(row2.DESCRICAO_PRODUTO == null) {
pstmtUpdate_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(6, row2.DESCRICAO_PRODUTO);
}

                        pstmtUpdate_tDBOutput_5.setBigDecimal(7, row2.DIMENSAO_ALTURA);

                        pstmtUpdate_tDBOutput_5.setBigDecimal(8, row2.DIMENSAO_LARGURA);

                        pstmtUpdate_tDBOutput_5.setBigDecimal(9, row2.DIMENSAO_PROFUNDIDADE);

                        pstmtUpdate_tDBOutput_5.setBigDecimal(10, row2.DIMENSAO_PESO);

                        pstmtUpdate_tDBOutput_5.setBigDecimal(11, row2.QUANTIDADE_VENDIDA);

                        pstmtUpdate_tDBOutput_5.setBigDecimal(12, row2.VALOR_UNITARIO);

                        if(row2.CFOP == null) {
pstmtUpdate_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(13, row2.CFOP);
}

                        if(row2.DET_DTADOC != null) {
pstmtUpdate_tDBOutput_5.setTimestamp(14, new java.sql.Timestamp(row2.DET_DTADOC.getTime()));
} else {
pstmtUpdate_tDBOutput_5.setNull(14, java.sql.Types.TIMESTAMP);
}

                        if(row2.ESPDOC == null) {
pstmtUpdate_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(15, row2.ESPDOC);
}

                        if(row2.GER_CODEMP == null) {
pstmtUpdate_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(16, row2.GER_CODEMP);
}

                        if(row2.GER_BAICON == null) {
pstmtUpdate_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(17, row2.GER_BAICON);
}

                        if(row2.GER_ENDCON == null) {
pstmtUpdate_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(18, row2.GER_ENDCON);
}

                        if(row2.CEP == null) {
pstmtUpdate_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(19, row2.CEP);
}

                        if(row2.UF == null) {
pstmtUpdate_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(20, row2.UF);
}

                        if(row2.CIDADE == null) {
pstmtUpdate_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(21, row2.CIDADE);
}

                        if(row2.TRA_NOMTRA == null) {
pstmtUpdate_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(22, row2.TRA_NOMTRA);
}

                        if(row2.AUTOINCREM == null) {
pstmtUpdate_tDBOutput_5.setNull(23 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_5.setString(23 + count_tDBOutput_5, row2.AUTOINCREM);
}

                try {
					
                    int processedCount_tDBOutput_5 = pstmtUpdate_tDBOutput_5.executeUpdate();
                    updatedCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            row8 = new row8Struct();
                                row8.DATA_FATURAMENTO = row2.DATA_FATURAMENTO;
                                row8.NOTA_FISCAL = row2.NOTA_FISCAL;
                                row8.CODIGO_VENDEDOR = row2.CODIGO_VENDEDOR;
                                row8.CODIGO_PRODUTO = row2.CODIGO_PRODUTO;
                                row8.CODIGO_PRODUTO2 = row2.CODIGO_PRODUTO2;
                                row8.DESCRICAO_PRODUTO = row2.DESCRICAO_PRODUTO;
                                row8.DIMENSAO_ALTURA = row2.DIMENSAO_ALTURA;
                                row8.DIMENSAO_LARGURA = row2.DIMENSAO_LARGURA;
                                row8.DIMENSAO_PROFUNDIDADE = row2.DIMENSAO_PROFUNDIDADE;
                                row8.DIMENSAO_PESO = row2.DIMENSAO_PESO;
                                row8.QUANTIDADE_VENDIDA = row2.QUANTIDADE_VENDIDA;
                                row8.VALOR_UNITARIO = row2.VALOR_UNITARIO;
                                row8.CFOP = row2.CFOP;
                                row8.DET_DTADOC = row2.DET_DTADOC;
                                row8.ESPDOC = row2.ESPDOC;
                                row8.GER_CODEMP = row2.GER_CODEMP;
                                row8.GER_BAICON = row2.GER_BAICON;
                                row8.GER_ENDCON = row2.GER_ENDCON;
                                row8.CEP = row2.CEP;
                                row8.UF = row2.UF;
                                row8.CIDADE = row2.CIDADE;
                                row8.TRA_NOMTRA = row2.TRA_NOMTRA;
                                row8.AUTOINCREM = row2.AUTOINCREM;
                            rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
                            row8.errorCode = ((java.sql.SQLException)e).getSQLState();
                            row8.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
                }
            } else {
                        if(row2.DATA_FATURAMENTO != null) {
pstmtInsert_tDBOutput_5.setTimestamp(1, new java.sql.Timestamp(row2.DATA_FATURAMENTO.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(1, java.sql.Types.TIMESTAMP);
}

                        if(row2.NOTA_FISCAL == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, row2.NOTA_FISCAL);
}

                        if(row2.CODIGO_VENDEDOR == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(3, row2.CODIGO_VENDEDOR);
}

                        if(row2.CODIGO_PRODUTO == null) {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(4, row2.CODIGO_PRODUTO);
}

                        if(row2.CODIGO_PRODUTO2 == null) {
pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(5, row2.CODIGO_PRODUTO2);
}

                        if(row2.DESCRICAO_PRODUTO == null) {
pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(6, row2.DESCRICAO_PRODUTO);
}

                        pstmtInsert_tDBOutput_5.setBigDecimal(7, row2.DIMENSAO_ALTURA);

                        pstmtInsert_tDBOutput_5.setBigDecimal(8, row2.DIMENSAO_LARGURA);

                        pstmtInsert_tDBOutput_5.setBigDecimal(9, row2.DIMENSAO_PROFUNDIDADE);

                        pstmtInsert_tDBOutput_5.setBigDecimal(10, row2.DIMENSAO_PESO);

                        pstmtInsert_tDBOutput_5.setBigDecimal(11, row2.QUANTIDADE_VENDIDA);

                        pstmtInsert_tDBOutput_5.setBigDecimal(12, row2.VALOR_UNITARIO);

                        if(row2.CFOP == null) {
pstmtInsert_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(13, row2.CFOP);
}

                        if(row2.DET_DTADOC != null) {
pstmtInsert_tDBOutput_5.setTimestamp(14, new java.sql.Timestamp(row2.DET_DTADOC.getTime()));
} else {
pstmtInsert_tDBOutput_5.setNull(14, java.sql.Types.TIMESTAMP);
}

                        if(row2.ESPDOC == null) {
pstmtInsert_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(15, row2.ESPDOC);
}

                        if(row2.GER_CODEMP == null) {
pstmtInsert_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(16, row2.GER_CODEMP);
}

                        if(row2.GER_BAICON == null) {
pstmtInsert_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(17, row2.GER_BAICON);
}

                        if(row2.GER_ENDCON == null) {
pstmtInsert_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(18, row2.GER_ENDCON);
}

                        if(row2.CEP == null) {
pstmtInsert_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(19, row2.CEP);
}

                        if(row2.UF == null) {
pstmtInsert_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(20, row2.UF);
}

                        if(row2.CIDADE == null) {
pstmtInsert_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(21, row2.CIDADE);
}

                        if(row2.TRA_NOMTRA == null) {
pstmtInsert_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(22, row2.TRA_NOMTRA);
}

                        if(row2.AUTOINCREM == null) {
pstmtInsert_tDBOutput_5.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(23, row2.AUTOINCREM);
}

                try {
					
                    int processedCount_tDBOutput_5 = pstmtInsert_tDBOutput_5.executeUpdate();
                    insertedCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    rowsToCommitCount_tDBOutput_5 += processedCount_tDBOutput_5;
                    nb_line_tDBOutput_5++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_5 = true;
                        nb_line_tDBOutput_5++;
                            row8 = new row8Struct();
                                row8.DATA_FATURAMENTO = row2.DATA_FATURAMENTO;
                                row8.NOTA_FISCAL = row2.NOTA_FISCAL;
                                row8.CODIGO_VENDEDOR = row2.CODIGO_VENDEDOR;
                                row8.CODIGO_PRODUTO = row2.CODIGO_PRODUTO;
                                row8.CODIGO_PRODUTO2 = row2.CODIGO_PRODUTO2;
                                row8.DESCRICAO_PRODUTO = row2.DESCRICAO_PRODUTO;
                                row8.DIMENSAO_ALTURA = row2.DIMENSAO_ALTURA;
                                row8.DIMENSAO_LARGURA = row2.DIMENSAO_LARGURA;
                                row8.DIMENSAO_PROFUNDIDADE = row2.DIMENSAO_PROFUNDIDADE;
                                row8.DIMENSAO_PESO = row2.DIMENSAO_PESO;
                                row8.QUANTIDADE_VENDIDA = row2.QUANTIDADE_VENDIDA;
                                row8.VALOR_UNITARIO = row2.VALOR_UNITARIO;
                                row8.CFOP = row2.CFOP;
                                row8.DET_DTADOC = row2.DET_DTADOC;
                                row8.ESPDOC = row2.ESPDOC;
                                row8.GER_CODEMP = row2.GER_CODEMP;
                                row8.GER_BAICON = row2.GER_BAICON;
                                row8.GER_ENDCON = row2.GER_ENDCON;
                                row8.CEP = row2.CEP;
                                row8.UF = row2.UF;
                                row8.CIDADE = row2.CIDADE;
                                row8.TRA_NOMTRA = row2.TRA_NOMTRA;
                                row8.AUTOINCREM = row2.AUTOINCREM;
                            rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
                            row8.errorCode = ((java.sql.SQLException)e).getSQLState();
                            row8.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
                }
            }
            if(!whetherReject_tDBOutput_5) {
            }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

log_erro = null;


// # Output table : 'log_erro'
log_erro_tmp.NM_PROGRAMA = context.programa;
log_erro_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate() ;
log_erro_tmp.ERROR_CODE = row8.errorCode ;
log_erro_tmp.ERROR_MESSAGE = row8.errorMessage ;
log_erro = log_erro_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "log_erro"
if(log_erro != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"log_erro"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(log_erro.NM_PROGRAMA == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, log_erro.NM_PROGRAMA);
}

                    if(log_erro.DATA_EXECUCAO != null) {
pstmt_tDBOutput_4.setTimestamp(2, new java.sql.Timestamp(log_erro.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(log_erro.ERROR_CODE == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, log_erro.ERROR_CODE);
}

                    if(log_erro.ERROR_MESSAGE == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, log_erro.ERROR_MESSAGE);
}

			
            try {
                nb_line_tDBOutput_4++;
				
                int processedCount_tDBOutput_4 = pstmt_tDBOutput_4.executeUpdate();
                insertedCount_tDBOutput_4 += processedCount_tDBOutput_4;
                rowsToCommitCount_tDBOutput_4 += processedCount_tDBOutput_4;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_4 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "log_erro"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



        if(pstmtUpdate_tDBOutput_5 != null){
            pstmtUpdate_tDBOutput_5.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_5");
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"log_erro");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";
	
	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_5 = null;
                if ((pstmtUpdateToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_5")) != null) {
                    pstmtUpdateToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_5 = null;
                if ((pstmtInsertToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_5")) != null) {
                    pstmtInsertToClose_tDBOutput_5.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_bi_escadas_betoneiras, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_bi_escadas_betoneiras) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_2");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	
	



int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_bi_escadas_betoneiras_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, update_log.uuid);
}


            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_bi_escadas_betoneiras_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final bi_escadas_betoneiras bi_escadas_betoneirasClass = new bi_escadas_betoneiras();

        int exitCode = bi_escadas_betoneirasClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = bi_escadas_betoneiras.class.getClassLoader().getResourceAsStream("palacio_ferramentas/bi_escadas_betoneiras_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = bi_escadas_betoneiras.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : bi_escadas_betoneiras");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     423631 characters generated by Talend Open Studio for Big Data 
 *     on the 20 de maio de 2024 15:25:21 BRT
 ************************************************************************************************/