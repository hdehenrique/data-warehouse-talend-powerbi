// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.integracao_estoque_winspare_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: integracao_estoque_winspare Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class integracao_estoque_winspare implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(WINSPARE_DB != null){
				
					this.setProperty("WINSPARE_DB", WINSPARE_DB.toString());
				
			}
			
			if(WINSPARE_HOST != null){
				
					this.setProperty("WINSPARE_HOST", WINSPARE_HOST.toString());
				
			}
			
			if(WINSPARE_PORT != null){
				
					this.setProperty("WINSPARE_PORT", WINSPARE_PORT.toString());
				
			}
			
			if(WINSPARE_PWD != null){
				
					this.setProperty("WINSPARE_PWD", WINSPARE_PWD.toString());
				
			}
			
			if(WINSPARE_USER != null){
				
					this.setProperty("WINSPARE_USER", WINSPARE_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String WINSPARE_DB;
public String getWINSPARE_DB(){
	return this.WINSPARE_DB;
}
public String WINSPARE_HOST;
public String getWINSPARE_HOST(){
	return this.WINSPARE_HOST;
}
public String WINSPARE_PORT;
public String getWINSPARE_PORT(){
	return this.WINSPARE_PORT;
}
public String WINSPARE_PWD;
public String getWINSPARE_PWD(){
	return this.WINSPARE_PWD;
}
public String WINSPARE_USER;
public String getWINSPARE_USER(){
	return this.WINSPARE_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "integracao_estoque_winspare";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				integracao_estoque_winspare.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(integracao_estoque_winspare.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";
	
	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "ApplicationName=integracao_estoque";
            String url_tDBConnection_3 = "jdbc:postgresql://"+System.getenv(context.WINSPARE_HOST)+":"+"5432"+"/"+System.getenv(context.WINSPARE_DB);
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = System.getenv(context.WINSPARE_USER);
	
	
		
	final String decryptedPassword_tDBConnection_3 = System.getenv(context.WINSPARE_PWD); 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3","");

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName=integracao_estoque";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD); 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
insert_logStruct insert_log = new insert_logStruct();
row16Struct row16 = new row16Struct();






	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_integracao_estoque_winspare_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row15.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row15.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row16 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row16 = new row16Struct();
                                row16.nm_programa = insert_log.nm_programa;
                                row16.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row16.data_termino_execucao = insert_log.data_termino_execucao;
                                row16.mensagem = insert_log.mensagem;
                                row16.uuid = insert_log.uuid;
                                row16.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					



    
		row16Struct oneRow_tHashOutput_5 = new row16Struct();
				
					oneRow_tHashOutput_5.nm_programa = row16.nm_programa;
					oneRow_tHashOutput_5.data_inicio_execucao = row16.data_inicio_execucao;
					oneRow_tHashOutput_5.data_termino_execucao = row16.data_termino_execucao;
					oneRow_tHashOutput_5.mensagem = row16.mensagem;
					oneRow_tHashOutput_5.uuid = row16.uuid;
					oneRow_tHashOutput_5.versao = row16.versao;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 12;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return false;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer ESTOQUE_COMBO;

				public Integer getESTOQUE_COMBO () {
					return this.ESTOQUE_COMBO;
				}

				public Boolean ESTOQUE_COMBOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_COMBOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_COMBOLength(){
				    return 12;
				}
				public Integer ESTOQUE_COMBOPrecision(){
				    return null;
				}
				public String ESTOQUE_COMBODefault(){
				
					return null;
				
				}
				public String ESTOQUE_COMBOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_COMBOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_COMBOOriginalDbColumnName(){
				
					return "ESTOQUE_COMBO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_COMBO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.ESTOQUE_COMBO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_COMBO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
						this.ESTOQUE_COMBO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.ESTOQUE_COMBO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
					// Integer
				
						writeInteger(this.ESTOQUE_COMBO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_COMBO="+CD_COMBO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",ESTOQUE_COMBO="+String.valueOf(ESTOQUE_COMBO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_integracao_estoque_winspare_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT ITEM.CD_COMBO      CD_COMBO,\n       ITEM.CD_EMPRESA             CD_EMPRESA,\n              CASE WHEN MIN(ESTOQU"
+"E_COMBO) < 0 THEN 0\n       ELSE MIN(ESTOQUE_COMBO)\n        END ESTOQUE_COMBO\n  FROM (\nSELECT GM.GMT_CODITE CD_COMBO,"
+"\n       G.ITE_CODEMP  CD_EMPRESA,\n       DM.DMT_ITESUB CD_PRODUTO,\n       CE.ITE_DESITE DESCRICAO,\n       GM.GMT_REF"
+"ERE MARCA,\n       DM.DMT_QTDITE QTDE,\n       floor((G.ITE_SALDOS - ITE_QTPD_P - (ITE_QTPD_V+ITE_QTPD_F) - ITE_QTPD_E -"
+" ITE_SALREG - ITE_SALEXT)/DM.DMT_QTDITE) ESTOQUE_COMBO\n  FROM GERMAT GM\n INNER JOIN DETMAT DM ON GM.AUTOINCREM = DM.DM"
+"T_SEQGER\n INNER JOIN CADITE CE ON GM.GMT_CODITE = CE.ITE_CODITE\n INNER JOIN ITEGER G  ON G.ITE_CODITE = DM.DMT_ITESUB "
+"AND G.ITE_CODEMP = GM.GMT_CODEMP\n WHERE G.ITE_CODEMP = '001') ITEM\n GROUP BY ITEM.CD_COMBO,\n          ITEM.CD_EMPRESA"
+"";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.CD_COMBO = null;
							} else {
	                         		
        	row3.CD_COMBO = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.CD_EMPRESA = null;
							} else {
	                         		
        	row3.CD_EMPRESA = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row3.ESTOQUE_COMBO = null;
							} else {
		                          
            row3.ESTOQUE_COMBO = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    row3.ESTOQUE_COMBO = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_3 = new row3Struct();
				
					oneRow_tHashOutput_3.CD_COMBO = row3.CD_COMBO;
					oneRow_tHashOutput_3.CD_EMPRESA = row3.CD_EMPRESA;
					oneRow_tHashOutput_3.ESTOQUE_COMBO = row3.ESTOQUE_COMBO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk15", 0, "ok");
								} 
							
							tDBInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public Integer SALDO_ATUAL_A;

				public Integer getSALDO_ATUAL_A () {
					return this.SALDO_ATUAL_A;
				}

				public Boolean SALDO_ATUAL_AIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUAL_AIsKey(){
				    return false;
				}
				public Integer SALDO_ATUAL_ALength(){
				    return 12;
				}
				public Integer SALDO_ATUAL_APrecision(){
				    return null;
				}
				public String SALDO_ATUAL_ADefault(){
				
					return null;
				
				}
				public String SALDO_ATUAL_AComment(){
				
				    return "";
				
				}
				public String SALDO_ATUAL_APattern(){
				
					return "";
				
				}
				public String SALDO_ATUAL_AOriginalDbColumnName(){
				
					return "SALDO_ATUAL_A";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
						this.SALDO_ATUAL_A = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
						this.SALDO_ATUAL_A = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL_A,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL_A,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",SALDO_ATUAL_A="+String.valueOf(SALDO_ATUAL_A));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saidaStruct implements routines.system.IPersistableRow<saidaStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public Integer SALDO_ATUAL_A;

				public Integer getSALDO_ATUAL_A () {
					return this.SALDO_ATUAL_A;
				}

				public Boolean SALDO_ATUAL_AIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUAL_AIsKey(){
				    return false;
				}
				public Integer SALDO_ATUAL_ALength(){
				    return 12;
				}
				public Integer SALDO_ATUAL_APrecision(){
				    return null;
				}
				public String SALDO_ATUAL_ADefault(){
				
					return null;
				
				}
				public String SALDO_ATUAL_AComment(){
				
				    return "";
				
				}
				public String SALDO_ATUAL_APattern(){
				
					return "";
				
				}
				public String SALDO_ATUAL_AOriginalDbColumnName(){
				
					return "SALDO_ATUAL_A";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
						this.SALDO_ATUAL_A = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
						this.SALDO_ATUAL_A = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL_A,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL_A,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",SALDO_ATUAL_A="+String.valueOf(SALDO_ATUAL_A));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saidaStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
saidaStruct saida = new saidaStruct();
row11Struct row11 = new row11Struct();






	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_integracao_estoque_winspare_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
saidaStruct saida_tmp = new saidaStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";
	
	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select base.CD_EMP,\n	   base.CD_ITEM,\n	   base.DESC_ITEM,\n       CASE WHEN base.SALDO_ATUAL < 0 THEN 0\n            "
+"           ELSE base.SALDO_ATUAL\n                         END SALDO_ATUAL,\n	   base.DATA_EXECUCAO\n  from (\nSELECT IG"
+".ITE_CODEMP AS CD_EMP,\n       CI.ITE_CODITE AS CD_ITEM,\n       CI.ITE_DESITE AS DESC_ITEM,\n       IG.ITE_SALDOS - IG."
+"ITE_SALEXT - IFNULL(IG.ITE_SALREG,0) - (IFNULL(IG.ITE_QTPD_V,0) + IFNULL(IG.ITE_QTPD_F,0) + IFNULL(IG.ITE_QTPD_P,0)) AS "
+"SALDO_ATUAL,\n       NULL AS DATA_EXECUCAO\n  FROM CADITE CI \nINNER JOIN ITEGER IG ON CI.ITE_CODITE = IG.ITE_CODITE \nW"
+"HERE CI.ITE_EXPSIT= 'S'\n  AND IG.ITE_CODEMP IN ('001')\n-- and CI.ITE_CODITE in ('73667')\n    AND IG.ITE_DHUALT >= '20"
+"24-01-01 00:00:01') base";
		    

		    globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);

		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row1.CD_EMP = null;
							} else {
	                         		
        	row1.CD_EMP = routines.system.JDBCUtil.getString(rs_tDBInput_6, 1, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row1.CD_ITEM = null;
							} else {
	                         		
        	row1.CD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row1.DESC_ITEM = null;
							} else {
	                         		
        	row1.DESC_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row1.SALDO_ATUAL = null;
							} else {
		                          
            row1.SALDO_ATUAL = rs_tDBInput_6.getInt(4);
            if(rs_tDBInput_6.wasNull()){
                    row1.SALDO_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row1.DATA_ULT_ATUALIZACAO = null;
							} else {
										
				if(rs_tDBInput_6.getString(5) != null) {
					String dateString_tDBInput_6 = rs_tDBInput_6.getString(5);
					if (!("0000-00-00").equals(dateString_tDBInput_6) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_6)) {
						row1.DATA_ULT_ATUALIZACAO = rs_tDBInput_6.getTimestamp(5);
					} else {
						row1.DATA_ULT_ATUALIZACAO = (java.util.Date) year0_tDBInput_6.clone();
					}
				} else {
					row1.DATA_ULT_ATUALIZACAO =  null;
				}
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row10HashKey.CD_COMBO = row1.CD_ITEM ;
                        		    		
                        		    		    row10HashKey.CD_EMPRESA = row1.CD_EMP ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.CD_COMBO = '" + row10HashKey.CD_COMBO + "', row10.CD_EMPRESA = '" + row10HashKey.CD_EMPRESA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

saida = null;


// # Output table : 'saida'
saida_tmp.CD_EMP = row1.CD_EMP;
saida_tmp.CD_ITEM = row1.CD_ITEM;
saida_tmp.DESC_ITEM = row1.DESC_ITEM ;
saida_tmp.SALDO_ATUAL = row10.ESTOQUE_COMBO ;
saida_tmp.DATA_ULT_ATUALIZACAO = row1.DATA_ULT_ATUALIZACAO;
saida_tmp.SALDO_ATUAL_A = row1.SALDO_ATUAL ;
saida = saida_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "saida"
if(saida != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"saida"
						
						);
					}
					

    //Code generated according to input schema and output schema
row11.CD_EMP = saida.CD_EMP;
row11.CD_ITEM = saida.CD_ITEM;
row11.DESC_ITEM = saida.DESC_ITEM;
//row11.SALDO_ATUAL = saida.SALDO_ATUAL;

if (saida.SALDO_ATUAL != null) {
row11.SALDO_ATUAL = saida.SALDO_ATUAL;
} else{
row11.SALDO_ATUAL = saida.SALDO_ATUAL_A;
}

row11.DATA_ULT_ATUALIZACAO = saida.DATA_ULT_ATUALIZACAO;
//row11.SALDO_ATUAL_A = saida.SALDO_ATUAL_A;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_7 = new row11Struct();
				
					oneRow_tHashOutput_7.CD_EMP = row11.CD_EMP;
					oneRow_tHashOutput_7.CD_ITEM = row11.CD_ITEM;
					oneRow_tHashOutput_7.DESC_ITEM = row11.DESC_ITEM;
					oneRow_tHashOutput_7.SALDO_ATUAL = row11.SALDO_ATUAL;
					oneRow_tHashOutput_7.DATA_ULT_ATUALIZACAO = row11.DATA_ULT_ATUALIZACAO;
					oneRow_tHashOutput_7.SALDO_ATUAL_A = row11.SALDO_ATUAL_A;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "saida"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";
	
	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_COMBO;

				public String getCD_COMBO () {
					return this.CD_COMBO;
				}

				public Boolean CD_COMBOIsNullable(){
				    return true;
				}
				public Boolean CD_COMBOIsKey(){
				    return false;
				}
				public Integer CD_COMBOLength(){
				    return 12;
				}
				public Integer CD_COMBOPrecision(){
				    return null;
				}
				public String CD_COMBODefault(){
				
					return null;
				
				}
				public String CD_COMBOComment(){
				
				    return "";
				
				}
				public String CD_COMBOPattern(){
				
					return "";
				
				}
				public String CD_COMBOOriginalDbColumnName(){
				
					return "CD_COMBO";
				
				}

				
			    public String CD_EMPRESA;

				public String getCD_EMPRESA () {
					return this.CD_EMPRESA;
				}

				public Boolean CD_EMPRESAIsNullable(){
				    return true;
				}
				public Boolean CD_EMPRESAIsKey(){
				    return false;
				}
				public Integer CD_EMPRESALength(){
				    return null;
				}
				public Integer CD_EMPRESAPrecision(){
				    return null;
				}
				public String CD_EMPRESADefault(){
				
					return null;
				
				}
				public String CD_EMPRESAComment(){
				
				    return "";
				
				}
				public String CD_EMPRESAPattern(){
				
					return "";
				
				}
				public String CD_EMPRESAOriginalDbColumnName(){
				
					return "CD_EMPRESA";
				
				}

				
			    public Integer ESTOQUE_COMBO;

				public Integer getESTOQUE_COMBO () {
					return this.ESTOQUE_COMBO;
				}

				public Boolean ESTOQUE_COMBOIsNullable(){
				    return true;
				}
				public Boolean ESTOQUE_COMBOIsKey(){
				    return false;
				}
				public Integer ESTOQUE_COMBOLength(){
				    return 12;
				}
				public Integer ESTOQUE_COMBOPrecision(){
				    return null;
				}
				public String ESTOQUE_COMBODefault(){
				
					return null;
				
				}
				public String ESTOQUE_COMBOComment(){
				
				    return "";
				
				}
				public String ESTOQUE_COMBOPattern(){
				
					return "";
				
				}
				public String ESTOQUE_COMBOOriginalDbColumnName(){
				
					return "ESTOQUE_COMBO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_COMBO == null) ? 0 : this.CD_COMBO.hashCode());
					
						result = prime * result + ((this.CD_EMPRESA == null) ? 0 : this.CD_EMPRESA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.CD_COMBO == null) {
							if (other.CD_COMBO != null)
								return false;
						
						} else if (!this.CD_COMBO.equals(other.CD_COMBO))
						
							return false;
					
						if (this.CD_EMPRESA == null) {
							if (other.CD_EMPRESA != null)
								return false;
						
						} else if (!this.CD_EMPRESA.equals(other.CD_EMPRESA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.CD_COMBO = this.CD_COMBO;
	            other.CD_EMPRESA = this.CD_EMPRESA;
	            other.ESTOQUE_COMBO = this.ESTOQUE_COMBO;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.CD_COMBO = this.CD_COMBO;
	            	other.CD_EMPRESA = this.CD_EMPRESA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_COMBO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_COMBO = readString(dis);
					
					this.CD_EMPRESA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_COMBO,dos);
					
					// String
				
						writeString(this.CD_EMPRESA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ESTOQUE_COMBO = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ESTOQUE_COMBO = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.ESTOQUE_COMBO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.ESTOQUE_COMBO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_COMBO="+CD_COMBO);
		sb.append(",CD_EMPRESA="+CD_EMPRESA);
		sb.append(",ESTOQUE_COMBO="+String.valueOf(ESTOQUE_COMBO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_COMBO, other.CD_COMBO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_EMPRESA, other.CD_EMPRESA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tHashInput_2 - inputs:(after_tDBInput_6) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_4 - inputs:(row1,row10) outputs:(saida)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row3Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row10.CD_COMBO = next_tHashInput_2.CD_COMBO;
	row10.CD_EMPRESA = next_tHashInput_2.CD_EMPRESA;
	row10.ESTOQUE_COMBO = next_tHashInput_2.ESTOQUE_COMBO;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.CD_COMBO = row10.CD_COMBO;
				
				row10_HashRow.CD_EMPRESA = row10.CD_EMPRESA;
				
				row10_HashRow.ESTOQUE_COMBO = row10.ESTOQUE_COMBO;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_integracao_estoque_winspare_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select CD_EMP,\n       CD_ITEM,\n       SALDO_ANTERIOR,\n       SALDO_ATUAL\n  from product_stock";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.CD_EMP = null;
							} else {
	                         		
        	row4.CD_EMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.CD_ITEM = null;
							} else {
	                         		
        	row4.CD_ITEM = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.SALDO_ANTERIOR = null;
							} else {
		                          
            row4.SALDO_ANTERIOR = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    row4.SALDO_ANTERIOR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.SALDO_ATUAL = null;
							} else {
		                          
            row4.SALDO_ATUAL = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    row4.SALDO_ATUAL = null;
            }
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_1 = new row4Struct();
				
					oneRow_tHashOutput_1.CD_EMP = row4.CD_EMP;
					oneRow_tHashOutput_1.CD_ITEM = row4.CD_ITEM;
					oneRow_tHashOutput_1.SALDO_ANTERIOR = row4.SALDO_ANTERIOR;
					oneRow_tHashOutput_1.SALDO_ATUAL = row4.SALDO_ATUAL;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class NaoExisteStruct implements routines.system.IPersistableRow<NaoExisteStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final NaoExisteStruct other = (NaoExisteStruct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(NaoExisteStruct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DESC_ITEM = this.DESC_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            other.DATA_ULT_ATUALIZACAO = this.DATA_ULT_ATUALIZACAO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(NaoExisteStruct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(NaoExisteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_6Struct implements routines.system.IPersistableRow<after_tHashInput_6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);

		row7Struct row7 = new row7Struct();
NaoExisteStruct NaoExiste = new NaoExisteStruct();





	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"NaoExiste");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("product_stock").toLowerCase();
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("product_stock").toLowerCase();
}


int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_6 = 1000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
        java.lang.StringBuilder sb_tDBOutput_6 = new java.lang.StringBuilder();
        sb_tDBOutput_6.append("INSERT INTO \"").append(tableName_tDBOutput_6).append("\" (\"cd_emp\",\"cd_item\",\"desc_item\",\"saldo_anterior\",\"saldo_atual\",\"data_ult_atualizacao\",\"data_execucao\") VALUES (?,?,?,?,?,?,?)");

        String insert_tDBOutput_6 = sb_tDBOutput_6.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
NaoExisteStruct NaoExiste_tmp = new NaoExisteStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row11Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row7.CD_EMP = next_tHashInput_6.CD_EMP;
	row7.CD_ITEM = next_tHashInput_6.CD_ITEM;
	row7.DESC_ITEM = next_tHashInput_6.DESC_ITEM;
	row7.SALDO_ATUAL = next_tHashInput_6.SALDO_ATUAL;
	row7.DATA_ULT_ATUALIZACAO = next_tHashInput_6.DATA_ULT_ATUALIZACAO;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
						row8Struct row8 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row8HashKey.CD_EMP = row7.CD_EMP ;
                        		    		
                        		    		    row8HashKey.CD_ITEM = row7.CD_ITEM ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_8 = true;
	  								
						
									
	
		  								forceLooprow8 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow8 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row8'
									
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								
								if(!forceLooprow8) { // G 46
								
							
								 
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow8 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

NaoExiste = null;

if(!rejectedInnerJoin_tMap_8 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'NaoExiste'
// # Filter conditions 
if( rejectedInnerJoin_tMap_8 ) {
NaoExiste_tmp.CD_EMP = row7.CD_EMP;
NaoExiste_tmp.CD_ITEM = row7.CD_ITEM;
NaoExiste_tmp.DESC_ITEM = row7.DESC_ITEM ;
NaoExiste_tmp.SALDO_ANTERIOR = row7.SALDO_ATUAL;
NaoExiste_tmp.SALDO_ATUAL = row7.SALDO_ATUAL;
NaoExiste_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
NaoExiste_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
NaoExiste = NaoExiste_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "NaoExiste"
if(NaoExiste != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"NaoExiste"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(NaoExiste.CD_EMP == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, NaoExiste.CD_EMP);
}

                    if(NaoExiste.CD_ITEM == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, NaoExiste.CD_ITEM);
}

                    if(NaoExiste.DESC_ITEM == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, NaoExiste.DESC_ITEM);
}

                    if(NaoExiste.SALDO_ANTERIOR == null) {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(4, NaoExiste.SALDO_ANTERIOR);
}

                    if(NaoExiste.SALDO_ATUAL == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_6.setInt(5, NaoExiste.SALDO_ATUAL);
}

                    if(NaoExiste.DATA_ULT_ATUALIZACAO != null) {
pstmt_tDBOutput_6.setTimestamp(6, new java.sql.Timestamp(NaoExiste.DATA_ULT_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(NaoExiste.DATA_EXECUCAO != null) {
pstmt_tDBOutput_6.setTimestamp(7, new java.sql.Timestamp(NaoExiste.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "NaoExiste"



	
		} // close loop of lookup 'row8' // G_TM_M_043
	
	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
			
	    		insertedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"NaoExiste");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class Atualizacao1Struct implements routines.system.IPersistableRow<Atualizacao1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Atualizacao1Struct other = (Atualizacao1Struct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Atualizacao1Struct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DESC_ITEM = this.DESC_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            other.DATA_ULT_ATUALIZACAO = this.DATA_ULT_ATUALIZACAO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(Atualizacao1Struct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Atualizacao1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class winspareStruct implements routines.system.IPersistableRow<winspareStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final winspareStruct other = (winspareStruct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(winspareStruct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DESC_ITEM = this.DESC_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            other.DATA_ULT_ATUALIZACAO = this.DATA_ULT_ATUALIZACAO;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(winspareStruct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(winspareStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AtualizacaoStruct implements routines.system.IPersistableRow<AtualizacaoStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AtualizacaoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return false;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return false;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);
		tHashInput_5Process(globalMap);

		row5Struct row5 = new row5Struct();
AtualizacaoStruct Atualizacao = new AtualizacaoStruct();
Atualizacao1Struct Atualizacao1 = new Atualizacao1Struct();
winspareStruct winspare = new winspareStruct();






	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Atualizacao1");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("product_stock").toLowerCase();
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("product_stock").toLowerCase();
}

        int updateKeyCount_tDBOutput_5 = 2;
        if(updateKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_5 == 7 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_5 = 1000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
	    String update_tDBOutput_5 = "UPDATE \"" + tableName_tDBOutput_5 + "\" SET \"desc_item\" = ?,\"saldo_anterior\" = ?,\"saldo_atual\" = ?,\"data_ult_atualizacao\" = ?,\"data_execucao\" = ? WHERE \"cd_emp\" = ? AND \"cd_item\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(update_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"winspare");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<winspareStruct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_integracao_estoque_winspare_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<winspareStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Atualizacao");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
Atualizacao1Struct Atualizacao1_tmp = new Atualizacao1Struct();
winspareStruct winspare_tmp = new winspareStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
AtualizacaoStruct Atualizacao_tmp = new AtualizacaoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row11Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row5.CD_EMP = next_tHashInput_1.CD_EMP;
	row5.CD_ITEM = next_tHashInput_1.CD_ITEM;
	row5.DESC_ITEM = next_tHashInput_1.DESC_ITEM;
	row5.SALDO_ATUAL = next_tHashInput_1.SALDO_ATUAL;
	row5.DATA_ULT_ATUALIZACAO = next_tHashInput_1.DATA_ULT_ATUALIZACAO;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row6Struct row6 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row6HashKey.CD_EMP = row5.CD_EMP ;
                        		    		
                        		    		    row6HashKey.CD_ITEM = row5.CD_ITEM ;
                        		    		
                        		    		    row6HashKey.SALDO_ATUAL = row5.SALDO_ATUAL ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

Atualizacao = null;

if(!rejectedInnerJoin_tMap_2 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'Atualizacao'
// # Filter conditions 
if( rejectedInnerJoin_tMap_2 ) {
Atualizacao_tmp.CD_EMP = row5.CD_EMP ;
Atualizacao_tmp.CD_ITEM = row5.CD_ITEM ;
Atualizacao_tmp.DESC_ITEM = row5.DESC_ITEM ;
Atualizacao_tmp.SALDO_ANTERIOR = row6.SALDO_ATUAL ;
Atualizacao_tmp.SALDO_ATUAL = row5.SALDO_ATUAL ;
Atualizacao_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
Atualizacao = Atualizacao_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "Atualizacao"
if(Atualizacao != null) { 



	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Atualizacao"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
						row9Struct row9 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row9HashKey.CD_EMP = Atualizacao.CD_EMP ;
                        		    		
                        		    		    row9HashKey.CD_ITEM = Atualizacao.CD_ITEM ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.CD_EMP = '" + row9HashKey.CD_EMP + "', row9.CD_ITEM = '" + row9HashKey.CD_ITEM + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

Atualizacao1 = null;
winspare = null;


// # Output table : 'Atualizacao1'
Atualizacao1_tmp.CD_EMP = Atualizacao.CD_EMP;
Atualizacao1_tmp.CD_ITEM = Atualizacao.CD_ITEM;
Atualizacao1_tmp.DESC_ITEM = Atualizacao.DESC_ITEM ;
Atualizacao1_tmp.SALDO_ANTERIOR = row9.SALDO_ATUAL ;
Atualizacao1_tmp.SALDO_ATUAL = Atualizacao.SALDO_ATUAL;
Atualizacao1_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
Atualizacao1_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
Atualizacao1 = Atualizacao1_tmp;

// # Output table : 'winspare'
winspare_tmp.CD_EMP = Atualizacao.CD_EMP;
winspare_tmp.CD_ITEM = Atualizacao.CD_ITEM;
winspare_tmp.DESC_ITEM = Atualizacao.DESC_ITEM ;
winspare_tmp.SALDO_ANTERIOR = row9.SALDO_ATUAL ;
winspare_tmp.SALDO_ATUAL = Atualizacao.SALDO_ATUAL;
winspare_tmp.DATA_ULT_ATUALIZACAO = TalendDate.getCurrentDate();
winspare_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
winspare = winspare_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "Atualizacao1"
if(Atualizacao1 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Atualizacao1"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(Atualizacao1.DESC_ITEM == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, Atualizacao1.DESC_ITEM);
}

                    if(Atualizacao1.SALDO_ANTERIOR == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(2, Atualizacao1.SALDO_ANTERIOR);
}

                    if(Atualizacao1.SALDO_ATUAL == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_5.setInt(3, Atualizacao1.SALDO_ATUAL);
}

                    if(Atualizacao1.DATA_ULT_ATUALIZACAO != null) {
pstmt_tDBOutput_5.setTimestamp(4, new java.sql.Timestamp(Atualizacao1.DATA_ULT_ATUALIZACAO.getTime()));
} else {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(Atualizacao1.DATA_EXECUCAO != null) {
pstmt_tDBOutput_5.setTimestamp(5, new java.sql.Timestamp(Atualizacao1.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(Atualizacao1.CD_EMP == null) {
pstmt_tDBOutput_5.setNull(6 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(6 + count_tDBOutput_5, Atualizacao1.CD_EMP);
}


                    if(Atualizacao1.CD_ITEM == null) {
pstmt_tDBOutput_5.setNull(7 + count_tDBOutput_5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7 + count_tDBOutput_5, Atualizacao1.CD_ITEM);
}


    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "Atualizacao1"




// Start of branch "winspare"
if(winspare != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"winspare"
						
						);
					}
					



    
		winspareStruct oneRow_tHashOutput_2 = new winspareStruct();
				
					oneRow_tHashOutput_2.CD_EMP = winspare.CD_EMP;
					oneRow_tHashOutput_2.CD_ITEM = winspare.CD_ITEM;
					oneRow_tHashOutput_2.DESC_ITEM = winspare.DESC_ITEM;
					oneRow_tHashOutput_2.SALDO_ANTERIOR = winspare.SALDO_ANTERIOR;
					oneRow_tHashOutput_2.SALDO_ATUAL = winspare.SALDO_ATUAL;
					oneRow_tHashOutput_2.DATA_ULT_ATUALIZACAO = winspare.DATA_ULT_ATUALIZACAO;
					oneRow_tHashOutput_2.DATA_EXECUCAO = winspare.DATA_EXECUCAO;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "winspare"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */

} // End of branch "Atualizacao"



	
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Atualizacao");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
			
	    		updatedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Atualizacao1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */




	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"winspare");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tHashInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */




	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class InsertStruct implements routines.system.IPersistableRow<InsertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return null;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return null;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsertStruct other = (InsertStruct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsertStruct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.DESC_ITEM = this.DESC_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            other.DATA_EXECUCAO = this.DATA_EXECUCAO;
	            
	}

	public void copyKeysDataTo(InsertStruct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public String DESC_ITEM;

				public String getDESC_ITEM () {
					return this.DESC_ITEM;
				}

				public Boolean DESC_ITEMIsNullable(){
				    return true;
				}
				public Boolean DESC_ITEMIsKey(){
				    return false;
				}
				public Integer DESC_ITEMLength(){
				    return 150;
				}
				public Integer DESC_ITEMPrecision(){
				    return null;
				}
				public String DESC_ITEMDefault(){
				
					return null;
				
				}
				public String DESC_ITEMComment(){
				
				    return "";
				
				}
				public String DESC_ITEMPattern(){
				
					return "";
				
				}
				public String DESC_ITEMOriginalDbColumnName(){
				
					return "DESC_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				
			    public java.util.Date DATA_ULT_ATUALIZACAO;

				public java.util.Date getDATA_ULT_ATUALIZACAO () {
					return this.DATA_ULT_ATUALIZACAO;
				}

				public Boolean DATA_ULT_ATUALIZACAOIsNullable(){
				    return true;
				}
				public Boolean DATA_ULT_ATUALIZACAOIsKey(){
				    return false;
				}
				public Integer DATA_ULT_ATUALIZACAOLength(){
				    return null;
				}
				public Integer DATA_ULT_ATUALIZACAOPrecision(){
				    return null;
				}
				public String DATA_ULT_ATUALIZACAODefault(){
				
					return null;
				
				}
				public String DATA_ULT_ATUALIZACAOComment(){
				
				    return "";
				
				}
				public String DATA_ULT_ATUALIZACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_ULT_ATUALIZACAOOriginalDbColumnName(){
				
					return "DATA_ULT_ATUALIZACAO";
				
				}

				
			    public java.util.Date DATA_EXECUCAO;

				public java.util.Date getDATA_EXECUCAO () {
					return this.DATA_EXECUCAO;
				}

				public Boolean DATA_EXECUCAOIsNullable(){
				    return true;
				}
				public Boolean DATA_EXECUCAOIsKey(){
				    return false;
				}
				public Integer DATA_EXECUCAOLength(){
				    return null;
				}
				public Integer DATA_EXECUCAOPrecision(){
				    return null;
				}
				public String DATA_EXECUCAODefault(){
				
					return null;
				
				}
				public String DATA_EXECUCAOComment(){
				
				    return "";
				
				}
				public String DATA_EXECUCAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DATA_EXECUCAOOriginalDbColumnName(){
				
					return "DATA_EXECUCAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
					this.DESC_ITEM = readString(dis);
					
						this.SALDO_ANTERIOR = readInteger(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
					this.DATA_ULT_ATUALIZACAO = readDate(dis);
					
					this.DATA_EXECUCAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// String
				
						writeString(this.DESC_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ANTERIOR,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_ULT_ATUALIZACAO,dos);
					
					// java.util.Date
				
						writeDate(this.DATA_EXECUCAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",DESC_ITEM="+DESC_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
		sb.append(",DATA_ULT_ATUALIZACAO="+String.valueOf(DATA_ULT_ATUALIZACAO));
		sb.append(",DATA_EXECUCAO="+String.valueOf(DATA_EXECUCAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
InsertStruct Insert = new InsertStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("product_stock").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("product_stock").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	


   int batchSize_tDBOutput_1 = 100;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
            try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                stmtClear_tDBOutput_1.executeUpdate("DELETE FROM \"" + tableName_tDBOutput_1 + "\"");
            }
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"cd_emp\",\"cd_item\",\"desc_item\",\"saldo_anterior\",\"saldo_atual\",\"data_execucao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertStruct Insert_tmp = new InsertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<winspareStruct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<winspareStruct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    winspareStruct next_tHashInput_7 = iterator_tHashInput_7.next();

	row2.CD_EMP = next_tHashInput_7.CD_EMP;
	row2.CD_ITEM = next_tHashInput_7.CD_ITEM;
	row2.DESC_ITEM = next_tHashInput_7.DESC_ITEM;
	row2.SALDO_ANTERIOR = next_tHashInput_7.SALDO_ANTERIOR;
	row2.SALDO_ATUAL = next_tHashInput_7.SALDO_ATUAL;
	row2.DATA_ULT_ATUALIZACAO = next_tHashInput_7.DATA_ULT_ATUALIZACAO;
	row2.DATA_EXECUCAO = next_tHashInput_7.DATA_EXECUCAO;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

Insert = null;


// # Output table : 'Insert'
Insert_tmp.CD_EMP = row2.CD_EMP;
Insert_tmp.CD_ITEM = row2.CD_ITEM;
Insert_tmp.DESC_ITEM = row2.DESC_ITEM ;
Insert_tmp.SALDO_ANTERIOR = row2.SALDO_ANTERIOR ;
Insert_tmp.SALDO_ATUAL = row2.SALDO_ATUAL;
Insert_tmp.DATA_EXECUCAO = TalendDate.getCurrentDate();
Insert = Insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "Insert"
if(Insert != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(Insert.CD_EMP == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, Insert.CD_EMP);
}

                    if(Insert.CD_ITEM == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, Insert.CD_ITEM);
}

                    if(Insert.DESC_ITEM == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, Insert.DESC_ITEM);
}

                    if(Insert.SALDO_ANTERIOR == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(4, Insert.SALDO_ANTERIOR);
}

                    if(Insert.SALDO_ATUAL == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(5, Insert.SALDO_ATUAL);
}

                    if(Insert.DATA_EXECUCAO != null) {
pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(Insert.DATA_EXECUCAO.getTime()));
} else {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "Insert"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row16Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row16Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row16Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row17.nm_programa = next_tHashInput_4.nm_programa;
	row17.data_inicio_execucao = next_tHashInput_4.data_inicio_execucao;
	row17.data_termino_execucao = next_tHashInput_4.data_termino_execucao;
	row17.mensagem = next_tHashInput_4.mensagem;
	row17.uuid = next_tHashInput_4.uuid;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row17.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row17.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_3", false);
		start_Hash.put("tDBClose_3", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_3";
	
	
		int tos_count_tDBClose_3 = 0;
		

 



/**
 * [tDBClose_3 begin ] stop
 */
	
	/**
	 * [tDBClose_3 main ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	



	java.sql.Connection conn_tDBClose_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_3 != null && !conn_tDBClose_3.isClosed())
	{
        conn_tDBClose_3.close();
	}

 


	tos_count_tDBClose_3++;

/**
 * [tDBClose_3 main ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_3 end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 

ok_Hash.put("tDBClose_3", true);
end_Hash.put("tDBClose_3", System.currentTimeMillis());




/**
 * [tDBClose_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_3 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_3_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
						result = prime * result + ((this.SALDO_ATUAL == null) ? 0 : this.SALDO_ATUAL.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					
						if (this.SALDO_ATUAL == null) {
							if (other.SALDO_ATUAL != null)
								return false;
						
						} else if (!this.SALDO_ATUAL.equals(other.SALDO_ATUAL))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	other.SALDO_ATUAL = this.SALDO_ATUAL;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
						this.SALDO_ATUAL = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
					// Integer
				
						writeInteger(this.SALDO_ATUAL,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SALDO_ATUAL, other.SALDO_ATUAL);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_3 - inputs:(after_tHashInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(row5,row6) outputs:(Atualizacao)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row4Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row6.CD_EMP = next_tHashInput_3.CD_EMP;
	row6.CD_ITEM = next_tHashInput_3.CD_ITEM;
	row6.SALDO_ANTERIOR = next_tHashInput_3.SALDO_ANTERIOR;
	row6.SALDO_ATUAL = next_tHashInput_3.SALDO_ATUAL;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.CD_EMP = row6.CD_EMP;
				
				row6_HashRow.CD_ITEM = row6.CD_ITEM;
				
				row6_HashRow.SALDO_ANTERIOR = row6.SALDO_ANTERIOR;
				
				row6_HashRow.SALDO_ATUAL = row6.SALDO_ATUAL;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,ois);
					
						this.SALDO_ATUAL = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,objectIn);
					
						this.SALDO_ATUAL = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, oos);
					
					writeInteger(this.SALDO_ATUAL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, objectOut);
					
					writeInteger(this.SALDO_ATUAL, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_1) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_7 - inputs:(Atualizacao,row9) outputs:(Atualizacao1,winspare)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row4Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row9.CD_EMP = next_tHashInput_5.CD_EMP;
	row9.CD_ITEM = next_tHashInput_5.CD_ITEM;
	row9.SALDO_ANTERIOR = next_tHashInput_5.SALDO_ANTERIOR;
	row9.SALDO_ATUAL = next_tHashInput_5.SALDO_ATUAL;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.CD_EMP = row9.CD_EMP;
				
				row9_HashRow.CD_ITEM = row9.CD_ITEM;
				
				row9_HashRow.SALDO_ANTERIOR = row9.SALDO_ANTERIOR;
				
				row9_HashRow.SALDO_ATUAL = row9.SALDO_ATUAL;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_EMP;

				public String getCD_EMP () {
					return this.CD_EMP;
				}

				public Boolean CD_EMPIsNullable(){
				    return true;
				}
				public Boolean CD_EMPIsKey(){
				    return true;
				}
				public Integer CD_EMPLength(){
				    return 12;
				}
				public Integer CD_EMPPrecision(){
				    return null;
				}
				public String CD_EMPDefault(){
				
					return null;
				
				}
				public String CD_EMPComment(){
				
				    return "";
				
				}
				public String CD_EMPPattern(){
				
					return "";
				
				}
				public String CD_EMPOriginalDbColumnName(){
				
					return "CD_EMP";
				
				}

				
			    public String CD_ITEM;

				public String getCD_ITEM () {
					return this.CD_ITEM;
				}

				public Boolean CD_ITEMIsNullable(){
				    return true;
				}
				public Boolean CD_ITEMIsKey(){
				    return true;
				}
				public Integer CD_ITEMLength(){
				    return 6;
				}
				public Integer CD_ITEMPrecision(){
				    return null;
				}
				public String CD_ITEMDefault(){
				
					return null;
				
				}
				public String CD_ITEMComment(){
				
				    return "";
				
				}
				public String CD_ITEMPattern(){
				
					return "";
				
				}
				public String CD_ITEMOriginalDbColumnName(){
				
					return "CD_ITEM";
				
				}

				
			    public Integer SALDO_ANTERIOR;

				public Integer getSALDO_ANTERIOR () {
					return this.SALDO_ANTERIOR;
				}

				public Boolean SALDO_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean SALDO_ANTERIORIsKey(){
				    return false;
				}
				public Integer SALDO_ANTERIORLength(){
				    return 12;
				}
				public Integer SALDO_ANTERIORPrecision(){
				    return null;
				}
				public String SALDO_ANTERIORDefault(){
				
					return null;
				
				}
				public String SALDO_ANTERIORComment(){
				
				    return "";
				
				}
				public String SALDO_ANTERIORPattern(){
				
					return "";
				
				}
				public String SALDO_ANTERIOROriginalDbColumnName(){
				
					return "SALDO_ANTERIOR";
				
				}

				
			    public Integer SALDO_ATUAL;

				public Integer getSALDO_ATUAL () {
					return this.SALDO_ATUAL;
				}

				public Boolean SALDO_ATUALIsNullable(){
				    return true;
				}
				public Boolean SALDO_ATUALIsKey(){
				    return false;
				}
				public Integer SALDO_ATUALLength(){
				    return 12;
				}
				public Integer SALDO_ATUALPrecision(){
				    return null;
				}
				public String SALDO_ATUALDefault(){
				
					return null;
				
				}
				public String SALDO_ATUALComment(){
				
				    return "";
				
				}
				public String SALDO_ATUALPattern(){
				
					return "";
				
				}
				public String SALDO_ATUALOriginalDbColumnName(){
				
					return "SALDO_ATUAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_EMP == null) ? 0 : this.CD_EMP.hashCode());
					
						result = prime * result + ((this.CD_ITEM == null) ? 0 : this.CD_ITEM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CD_EMP == null) {
							if (other.CD_EMP != null)
								return false;
						
						} else if (!this.CD_EMP.equals(other.CD_EMP))
						
							return false;
					
						if (this.CD_ITEM == null) {
							if (other.CD_ITEM != null)
								return false;
						
						} else if (!this.CD_ITEM.equals(other.CD_ITEM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.CD_EMP = this.CD_EMP;
	            other.CD_ITEM = this.CD_ITEM;
	            other.SALDO_ANTERIOR = this.SALDO_ANTERIOR;
	            other.SALDO_ATUAL = this.SALDO_ATUAL;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CD_EMP = this.CD_EMP;
	            	other.CD_ITEM = this.CD_ITEM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_integracao_estoque_winspare, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_integracao_estoque_winspare) {

        	try {

        		int length = 0;
		
					this.CD_EMP = readString(dis);
					
					this.CD_ITEM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CD_EMP,dos);
					
					// String
				
						writeString(this.CD_ITEM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,ois);
					
						this.SALDO_ATUAL = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SALDO_ANTERIOR = readInteger(dis,objectIn);
					
						this.SALDO_ATUAL = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, oos);
					
					writeInteger(this.SALDO_ATUAL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.SALDO_ANTERIOR, dos, objectOut);
					
					writeInteger(this.SALDO_ATUAL, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_EMP="+CD_EMP);
		sb.append(",CD_ITEM="+CD_ITEM);
		sb.append(",SALDO_ANTERIOR="+String.valueOf(SALDO_ANTERIOR));
		sb.append(",SALDO_ATUAL="+String.valueOf(SALDO_ATUAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_EMP, other.CD_EMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_ITEM, other.CD_ITEM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_6) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_8 - inputs:(row7,row8) outputs:(NaoExiste)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row4Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row8.CD_EMP = next_tHashInput_8.CD_EMP;
	row8.CD_ITEM = next_tHashInput_8.CD_ITEM;
	row8.SALDO_ANTERIOR = next_tHashInput_8.SALDO_ANTERIOR;
	row8.SALDO_ATUAL = next_tHashInput_8.SALDO_ATUAL;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.CD_EMP = row8.CD_EMP;
				
				row8_HashRow.CD_ITEM = row8.CD_ITEM;
				
				row8_HashRow.SALDO_ANTERIOR = row8.SALDO_ANTERIOR;
				
				row8_HashRow.SALDO_ATUAL = row8.SALDO_ATUAL;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_integracao_estoque_winspare_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final integracao_estoque_winspare integracao_estoque_winspareClass = new integracao_estoque_winspare();

        int exitCode = integracao_estoque_winspareClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = integracao_estoque_winspare.class.getClassLoader().getResourceAsStream("palacio_ferramentas/integracao_estoque_winspare_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = integracao_estoque_winspare.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("WINSPARE_DB", "id_String");
                        if(context.getStringValue("WINSPARE_DB") == null) {
                            context.WINSPARE_DB = null;
                        } else {
                            context.WINSPARE_DB=(String) context.getProperty("WINSPARE_DB");
                        }
                        context.setContextType("WINSPARE_HOST", "id_String");
                        if(context.getStringValue("WINSPARE_HOST") == null) {
                            context.WINSPARE_HOST = null;
                        } else {
                            context.WINSPARE_HOST=(String) context.getProperty("WINSPARE_HOST");
                        }
                        context.setContextType("WINSPARE_PORT", "id_String");
                        if(context.getStringValue("WINSPARE_PORT") == null) {
                            context.WINSPARE_PORT = null;
                        } else {
                            context.WINSPARE_PORT=(String) context.getProperty("WINSPARE_PORT");
                        }
                        context.setContextType("WINSPARE_PWD", "id_String");
                        if(context.getStringValue("WINSPARE_PWD") == null) {
                            context.WINSPARE_PWD = null;
                        } else {
                            context.WINSPARE_PWD=(String) context.getProperty("WINSPARE_PWD");
                        }
                        context.setContextType("WINSPARE_USER", "id_String");
                        if(context.getStringValue("WINSPARE_USER") == null) {
                            context.WINSPARE_USER = null;
                        } else {
                            context.WINSPARE_USER=(String) context.getProperty("WINSPARE_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("WINSPARE_DB")) {
                context.WINSPARE_DB = (String) parentContextMap.get("WINSPARE_DB");
            }if (parentContextMap.containsKey("WINSPARE_HOST")) {
                context.WINSPARE_HOST = (String) parentContextMap.get("WINSPARE_HOST");
            }if (parentContextMap.containsKey("WINSPARE_PORT")) {
                context.WINSPARE_PORT = (String) parentContextMap.get("WINSPARE_PORT");
            }if (parentContextMap.containsKey("WINSPARE_PWD")) {
                context.WINSPARE_PWD = (String) parentContextMap.get("WINSPARE_PWD");
            }if (parentContextMap.containsKey("WINSPARE_USER")) {
                context.WINSPARE_USER = (String) parentContextMap.get("WINSPARE_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : integracao_estoque_winspare");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     581035 characters generated by Talend Open Studio for Big Data 
 *     on the 22 de maio de 2024 14:44:55 BRT
 ************************************************************************************************/