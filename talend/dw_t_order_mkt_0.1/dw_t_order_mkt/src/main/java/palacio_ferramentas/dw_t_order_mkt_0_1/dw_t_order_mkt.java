// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_order_mkt_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: dw_t_order_mkt Purpose: <br>
 * Description:  <br>
 * @author luisll@uol.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_order_mkt implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(MONGODB_HOST != null){
				
					this.setProperty("MONGODB_HOST", MONGODB_HOST.toString());
				
			}
			
			if(MONGODB_DB != null){
				
					this.setProperty("MONGODB_DB", MONGODB_DB.toString());
				
			}
			
			if(MONGODB_PORT != null){
				
					this.setProperty("MONGODB_PORT", MONGODB_PORT.toString());
				
			}
			
			if(MONGODB_USER != null){
				
					this.setProperty("MONGODB_USER", MONGODB_USER.toString());
				
			}
			
			if(MONGODB_PASSWORD != null){
				
					this.setProperty("MONGODB_PASSWORD", MONGODB_PASSWORD.toString());
				
			}
			
			if(data != null){
				
					this.setProperty("data", data.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String MONGODB_HOST;
public String getMONGODB_HOST(){
	return this.MONGODB_HOST;
}
public String MONGODB_DB;
public String getMONGODB_DB(){
	return this.MONGODB_DB;
}
public String MONGODB_PORT;
public String getMONGODB_PORT(){
	return this.MONGODB_PORT;
}
public String MONGODB_USER;
public String getMONGODB_USER(){
	return this.MONGODB_USER;
}
public String MONGODB_PASSWORD;
public String getMONGODB_PASSWORD(){
	return this.MONGODB_PASSWORD;
}
public String data;
public String getData(){
	return this.data;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_order_mkt";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_order_mkt.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_order_mkt.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractJSONFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBConnection_1", false);
		start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBConnection_1";
	
	
		int tos_count_tMongoDBConnection_1 = 0;
		

        java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
        
    

final String applicationName_tMongoDBConnection_1 = "Talend";
    

    // Declarations
    com.mongodb.client.MongoClient mongo_tMongoDBConnection_1=null;
    com.mongodb.client.MongoDatabase db_tMongoDBConnection_1=null;
    List<com.mongodb.ServerAddress> addrs_tMongoDBConnection_1 = new java.util.ArrayList<>();
    com.mongodb.MongoClientSettings.Builder clientSettingsBuilder_tMongoDBConnection_1 = com.mongodb.MongoClientSettings.builder()
    .applicationName(applicationName_tMongoDBConnection_1);
    


                // SSL

                // Client Credentials
                    // Authentication
                    com.mongodb.MongoCredential mongoCredential_tMongoDBConnection_1; 
	final String decryptedPassword_tMongoDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9rLXbfH3FsnFAnm03cVH+m19yxj2+GmJIFnxMdUwL1JPRhyv3B5dNDo=");
                        
                            mongoCredential_tMongoDBConnection_1 = com.mongodb.MongoCredential.createScramSha256Credential("order_mkt", "order_mkt", new String(decryptedPassword_tMongoDBConnection_1).toCharArray());
                    clientSettingsBuilder_tMongoDBConnection_1.credential(mongoCredential_tMongoDBConnection_1);
                        addrs_tMongoDBConnection_1.add(new com.mongodb.ServerAddress("10.10.0.19", 27017));
                    clientSettingsBuilder_tMongoDBConnection_1.applyToClusterSettings(builder -> builder.hosts(addrs_tMongoDBConnection_1));



    mongo_tMongoDBConnection_1 = com.mongodb.client.MongoClients.create(clientSettingsBuilder_tMongoDBConnection_1.build());
    resourceMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    db_tMongoDBConnection_1 = mongo_tMongoDBConnection_1.getDatabase("order_mkt");


    globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);


 



/**
 * [tMongoDBConnection_1 begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 


	tos_count_tMongoDBConnection_1++;

/**
 * [tMongoDBConnection_1 main ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 

ok_Hash.put("tMongoDBConnection_1", true);
end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());




/**
 * [tMongoDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS Z");
//formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());
context.data = data;
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();
insert_logStruct insert_log = new insert_logStruct();
row80Struct row80 = new row80Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_order_mkt_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row79.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row79.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row80 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row80 = new row80Struct();
                                row80.nm_programa = insert_log.nm_programa;
                                row80.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row80.data_termino_execucao = insert_log.data_termino_execucao;
                                row80.mensagem = insert_log.mensagem;
                                row80.uuid = insert_log.uuid;
                                row80.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row80"
if(row80 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					



    
		row80Struct oneRow_tHashOutput_2 = new row80Struct();
				
					oneRow_tHashOutput_2.nm_programa = row80.nm_programa;
					oneRow_tHashOutput_2.data_inicio_execucao = row80.data_inicio_execucao;
					oneRow_tHashOutput_2.data_termino_execucao = row80.data_termino_execucao;
					oneRow_tHashOutput_2.mensagem = row80.mensagem;
					oneRow_tHashOutput_2.uuid = row80.uuid;
					oneRow_tHashOutput_2.versao = row80.versao;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row80"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String data_processamento;

				public String getData_processamento () {
					return this.data_processamento;
				}

				public Boolean data_processamentoIsNullable(){
				    return true;
				}
				public Boolean data_processamentoIsKey(){
				    return false;
				}
				public Integer data_processamentoLength(){
				    return 2;
				}
				public Integer data_processamentoPrecision(){
				    return null;
				}
				public String data_processamentoDefault(){
				
					return null;
				
				}
				public String data_processamentoComment(){
				
				    return "";
				
				}
				public String data_processamentoPattern(){
				
					return "";
				
				}
				public String data_processamentoOriginalDbColumnName(){
				
					return "data_processamento";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data_processamento="+data_processamento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String data_processamento;

				public String getData_processamento () {
					return this.data_processamento;
				}

				public Boolean data_processamentoIsNullable(){
				    return true;
				}
				public Boolean data_processamentoIsKey(){
				    return false;
				}
				public Integer data_processamentoLength(){
				    return 2;
				}
				public Integer data_processamentoPrecision(){
				    return null;
				}
				public String data_processamentoDefault(){
				
					return null;
				
				}
				public String data_processamentoComment(){
				
				    return "";
				
				}
				public String data_processamentoPattern(){
				
					return "";
				
				}
				public String data_processamentoOriginalDbColumnName(){
				
					return "data_processamento";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data_processamento="+data_processamento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"data_processamento",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select current_date- interval '5 day'";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row7.data_processamento = null;
							} else {
	                         		
        	row7.data_processamento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

    //Code generated according to input schema and output schema
row8.data_processamento = row7.data_processamento;
context.data = row7.data_processamento;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[1];
   				
	    		if(row8.data_processamento != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(row8.data_processamento)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return false;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_order_mkt_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select id\n     from dw_t_order_mkt";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row5.id = null;
							} else {
	                         		
        	row5.id = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.id = row5.id;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tMongoDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public java.util.Date paymentDate;

				public java.util.Date getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.markupError = this.markupError;
	            other.markupAlert = this.markupAlert;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.docNumber = this.docNumber;
	            other.accessKey = this.accessKey;
	            other.orderInvoiced = this.orderInvoiced;
	            other.orderDispatched = this.orderDispatched;
	            other.orderCanceled = this.orderCanceled;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",paymentDate="+String.valueOf(paymentDate));
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class InsertStruct implements routines.system.IPersistableRow<InsertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public java.util.Date paymentDate;

				public java.util.Date getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsertStruct other = (InsertStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsertStruct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.markupError = this.markupError;
	            other.markupAlert = this.markupAlert;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.docNumber = this.docNumber;
	            other.accessKey = this.accessKey;
	            other.orderInvoiced = this.orderInvoiced;
	            other.orderDispatched = this.orderDispatched;
	            other.orderCanceled = this.orderCanceled;
	            
	}

	public void copyKeysDataTo(InsertStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",paymentDate="+String.valueOf(paymentDate));
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class UpdateStruct implements routines.system.IPersistableRow<UpdateStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public java.util.Date paymentDate;

				public java.util.Date getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UpdateStruct other = (UpdateStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UpdateStruct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.markupError = this.markupError;
	            other.markupAlert = this.markupAlert;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.docNumber = this.docNumber;
	            other.accessKey = this.accessKey;
	            other.orderInvoiced = this.orderInvoiced;
	            other.orderDispatched = this.orderDispatched;
	            other.orderCanceled = this.orderCanceled;
	            
	}

	public void copyKeysDataTo(UpdateStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",paymentDate="+String.valueOf(paymentDate));
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UpdateStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public java.util.Date paymentDate;

				public java.util.Date getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.paymentDate = readDate(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// java.util.Date
				
						writeDate(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",paymentDate="+String.valueOf(paymentDate));
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.markupError = this.markupError;
	            other.markupAlert = this.markupAlert;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.docNumber = this.docNumber;
	            other.accessKey = this.accessKey;
	            other.orderInvoiced = this.orderInvoiced;
	            other.orderDispatched = this.orderDispatched;
	            other.orderCanceled = this.orderCanceled;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String markupError;

				public String getMarkupError () {
					return this.markupError;
				}

				public Boolean markupErrorIsNullable(){
				    return true;
				}
				public Boolean markupErrorIsKey(){
				    return false;
				}
				public Integer markupErrorLength(){
				    return null;
				}
				public Integer markupErrorPrecision(){
				    return null;
				}
				public String markupErrorDefault(){
				
					return null;
				
				}
				public String markupErrorComment(){
				
				    return "";
				
				}
				public String markupErrorPattern(){
				
					return "";
				
				}
				public String markupErrorOriginalDbColumnName(){
				
					return "markupError";
				
				}

				
			    public String markupAlert;

				public String getMarkupAlert () {
					return this.markupAlert;
				}

				public Boolean markupAlertIsNullable(){
				    return true;
				}
				public Boolean markupAlertIsKey(){
				    return false;
				}
				public Integer markupAlertLength(){
				    return null;
				}
				public Integer markupAlertPrecision(){
				    return null;
				}
				public String markupAlertDefault(){
				
					return null;
				
				}
				public String markupAlertComment(){
				
				    return "";
				
				}
				public String markupAlertPattern(){
				
					return "";
				
				}
				public String markupAlertOriginalDbColumnName(){
				
					return "markupAlert";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String docNumber;

				public String getDocNumber () {
					return this.docNumber;
				}

				public Boolean docNumberIsNullable(){
				    return true;
				}
				public Boolean docNumberIsKey(){
				    return false;
				}
				public Integer docNumberLength(){
				    return null;
				}
				public Integer docNumberPrecision(){
				    return null;
				}
				public String docNumberDefault(){
				
					return null;
				
				}
				public String docNumberComment(){
				
				    return "";
				
				}
				public String docNumberPattern(){
				
					return "";
				
				}
				public String docNumberOriginalDbColumnName(){
				
					return "docNumber";
				
				}

				
			    public String accessKey;

				public String getAccessKey () {
					return this.accessKey;
				}

				public Boolean accessKeyIsNullable(){
				    return true;
				}
				public Boolean accessKeyIsKey(){
				    return false;
				}
				public Integer accessKeyLength(){
				    return null;
				}
				public Integer accessKeyPrecision(){
				    return null;
				}
				public String accessKeyDefault(){
				
					return null;
				
				}
				public String accessKeyComment(){
				
				    return "";
				
				}
				public String accessKeyPattern(){
				
					return "";
				
				}
				public String accessKeyOriginalDbColumnName(){
				
					return "accessKey";
				
				}

				
			    public String orderInvoiced;

				public String getOrderInvoiced () {
					return this.orderInvoiced;
				}

				public Boolean orderInvoicedIsNullable(){
				    return true;
				}
				public Boolean orderInvoicedIsKey(){
				    return false;
				}
				public Integer orderInvoicedLength(){
				    return null;
				}
				public Integer orderInvoicedPrecision(){
				    return null;
				}
				public String orderInvoicedDefault(){
				
					return null;
				
				}
				public String orderInvoicedComment(){
				
				    return "";
				
				}
				public String orderInvoicedPattern(){
				
					return "";
				
				}
				public String orderInvoicedOriginalDbColumnName(){
				
					return "orderInvoiced";
				
				}

				
			    public String orderDispatched;

				public String getOrderDispatched () {
					return this.orderDispatched;
				}

				public Boolean orderDispatchedIsNullable(){
				    return true;
				}
				public Boolean orderDispatchedIsKey(){
				    return false;
				}
				public Integer orderDispatchedLength(){
				    return null;
				}
				public Integer orderDispatchedPrecision(){
				    return null;
				}
				public String orderDispatchedDefault(){
				
					return null;
				
				}
				public String orderDispatchedComment(){
				
				    return "";
				
				}
				public String orderDispatchedPattern(){
				
					return "";
				
				}
				public String orderDispatchedOriginalDbColumnName(){
				
					return "orderDispatched";
				
				}

				
			    public String orderCanceled;

				public String getOrderCanceled () {
					return this.orderCanceled;
				}

				public Boolean orderCanceledIsNullable(){
				    return true;
				}
				public Boolean orderCanceledIsKey(){
				    return false;
				}
				public Integer orderCanceledLength(){
				    return null;
				}
				public Integer orderCanceledPrecision(){
				    return null;
				}
				public String orderCanceledDefault(){
				
					return null;
				
				}
				public String orderCanceledComment(){
				
				    return "";
				
				}
				public String orderCanceledPattern(){
				
					return "";
				
				}
				public String orderCanceledOriginalDbColumnName(){
				
					return "orderCanceled";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.markupError = this.markupError;
	            other.markupAlert = this.markupAlert;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.docNumber = this.docNumber;
	            other.accessKey = this.accessKey;
	            other.orderInvoiced = this.orderInvoiced;
	            other.orderDispatched = this.orderDispatched;
	            other.orderCanceled = this.orderCanceled;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.markupError = readString(dis);
					
					this.markupAlert = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.docNumber = readString(dis);
					
					this.accessKey = readString(dis);
					
					this.orderInvoiced = readString(dis);
					
					this.orderDispatched = readString(dis);
					
					this.orderCanceled = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.markupError,dos);
					
					// String
				
						writeString(this.markupAlert,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.docNumber,dos);
					
					// String
				
						writeString(this.accessKey,dos);
					
					// String
				
						writeString(this.orderInvoiced,dos);
					
					// String
				
						writeString(this.orderDispatched,dos);
					
					// String
				
						writeString(this.orderCanceled,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",markupError="+markupError);
		sb.append(",markupAlert="+markupAlert);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",docNumber="+docNumber);
		sb.append(",accessKey="+accessKey);
		sb.append(",orderInvoiced="+orderInvoiced);
		sb.append(",orderDispatched="+orderDispatched);
		sb.append(",orderCanceled="+orderCanceled);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saStruct implements routines.system.IPersistableRow<saStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String custom_attributes;

				public String getCustom_attributes () {
					return this.custom_attributes;
				}

				public Boolean custom_attributesIsNullable(){
				    return true;
				}
				public Boolean custom_attributesIsKey(){
				    return false;
				}
				public Integer custom_attributesLength(){
				    return null;
				}
				public Integer custom_attributesPrecision(){
				    return null;
				}
				public String custom_attributesDefault(){
				
					return null;
				
				}
				public String custom_attributesComment(){
				
				    return "";
				
				}
				public String custom_attributesPattern(){
				
					return "";
				
				}
				public String custom_attributesOriginalDbColumnName(){
				
					return "custom_attributes";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saStruct other = (saStruct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saStruct other) {

		other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.custom_attributes = this.custom_attributes;
	            
	}

	public void copyKeysDataTo(saStruct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",custom_attributes="+custom_attributes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class Saida1Struct implements routines.system.IPersistableRow<Saida1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String custom_attributes;

				public String getCustom_attributes () {
					return this.custom_attributes;
				}

				public Boolean custom_attributesIsNullable(){
				    return true;
				}
				public Boolean custom_attributesIsKey(){
				    return false;
				}
				public Integer custom_attributesLength(){
				    return null;
				}
				public Integer custom_attributesPrecision(){
				    return null;
				}
				public String custom_attributesDefault(){
				
					return null;
				
				}
				public String custom_attributesComment(){
				
				    return "";
				
				}
				public String custom_attributesPattern(){
				
					return "";
				
				}
				public String custom_attributesOriginalDbColumnName(){
				
					return "custom_attributes";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",custom_attributes="+custom_attributes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Saida1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String invoice;

				public String getInvoice () {
					return this.invoice;
				}

				public Boolean invoiceIsNullable(){
				    return true;
				}
				public Boolean invoiceIsKey(){
				    return false;
				}
				public Integer invoiceLength(){
				    return null;
				}
				public Integer invoicePrecision(){
				    return null;
				}
				public String invoiceDefault(){
				
					return null;
				
				}
				public String invoiceComment(){
				
				    return "";
				
				}
				public String invoicePattern(){
				
					return "";
				
				}
				public String invoiceOriginalDbColumnName(){
				
					return "invoice";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String shipping;

				public String getShipping () {
					return this.shipping;
				}

				public Boolean shippingIsNullable(){
				    return true;
				}
				public Boolean shippingIsKey(){
				    return false;
				}
				public Integer shippingLength(){
				    return null;
				}
				public Integer shippingPrecision(){
				    return null;
				}
				public String shippingDefault(){
				
					return null;
				
				}
				public String shippingComment(){
				
				    return "";
				
				}
				public String shippingPattern(){
				
					return "";
				
				}
				public String shippingOriginalDbColumnName(){
				
					return "shipping";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String anymarketAddress;

				public String getAnymarketAddress () {
					return this.anymarketAddress;
				}

				public Boolean anymarketAddressIsNullable(){
				    return true;
				}
				public Boolean anymarketAddressIsKey(){
				    return false;
				}
				public Integer anymarketAddressLength(){
				    return null;
				}
				public Integer anymarketAddressPrecision(){
				    return null;
				}
				public String anymarketAddressDefault(){
				
					return null;
				
				}
				public String anymarketAddressComment(){
				
				    return "";
				
				}
				public String anymarketAddressPattern(){
				
					return "";
				
				}
				public String anymarketAddressOriginalDbColumnName(){
				
					return "anymarketAddress";
				
				}

				
			    public String buyer;

				public String getBuyer () {
					return this.buyer;
				}

				public Boolean buyerIsNullable(){
				    return true;
				}
				public Boolean buyerIsKey(){
				    return false;
				}
				public Integer buyerLength(){
				    return null;
				}
				public Integer buyerPrecision(){
				    return null;
				}
				public String buyerDefault(){
				
					return null;
				
				}
				public String buyerComment(){
				
				    return "";
				
				}
				public String buyerPattern(){
				
					return "";
				
				}
				public String buyerOriginalDbColumnName(){
				
					return "buyer";
				
				}

				
			    public String payments;

				public String getPayments () {
					return this.payments;
				}

				public Boolean paymentsIsNullable(){
				    return true;
				}
				public Boolean paymentsIsKey(){
				    return false;
				}
				public Integer paymentsLength(){
				    return null;
				}
				public Integer paymentsPrecision(){
				    return null;
				}
				public String paymentsDefault(){
				
					return null;
				
				}
				public String paymentsComment(){
				
				    return "";
				
				}
				public String paymentsPattern(){
				
					return "";
				
				}
				public String paymentsOriginalDbColumnName(){
				
					return "payments";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String metadata;

				public String getMetadata () {
					return this.metadata;
				}

				public Boolean metadataIsNullable(){
				    return true;
				}
				public Boolean metadataIsKey(){
				    return false;
				}
				public Integer metadataLength(){
				    return null;
				}
				public Integer metadataPrecision(){
				    return null;
				}
				public String metadataDefault(){
				
					return null;
				
				}
				public String metadataComment(){
				
				    return "";
				
				}
				public String metadataPattern(){
				
					return "";
				
				}
				public String metadataOriginalDbColumnName(){
				
					return "metadata";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String custom_attributes;

				public String getCustom_attributes () {
					return this.custom_attributes;
				}

				public Boolean custom_attributesIsNullable(){
				    return true;
				}
				public Boolean custom_attributesIsKey(){
				    return false;
				}
				public Integer custom_attributesLength(){
				    return null;
				}
				public Integer custom_attributesPrecision(){
				    return null;
				}
				public String custom_attributesDefault(){
				
					return null;
				
				}
				public String custom_attributesComment(){
				
				    return "";
				
				}
				public String custom_attributesPattern(){
				
					return "";
				
				}
				public String custom_attributesOriginalDbColumnName(){
				
					return "custom_attributes";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.invoice = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.shipping = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.anymarketAddress = readString(dis);
					
					this.buyer = readString(dis);
					
					this.payments = readString(dis);
					
					this.items = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.metadata = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.invoice = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.shipping = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.anymarketAddress = readString(dis);
					
					this.buyer = readString(dis);
					
					this.payments = readString(dis);
					
					this.items = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.metadata = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.invoice,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.shipping,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.anymarketAddress,dos);
					
					// String
				
						writeString(this.buyer,dos);
					
					// String
				
						writeString(this.payments,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.metadata,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.invoice,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.shipping,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.anymarketAddress,dos);
					
					// String
				
						writeString(this.buyer,dos);
					
					// String
				
						writeString(this.payments,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.metadata,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",invoice="+invoice);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",shipping="+shipping);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",anymarketAddress="+anymarketAddress);
		sb.append(",buyer="+buyer);
		sb.append(",payments="+payments);
		sb.append(",items="+items);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",metadata="+metadata);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",custom_attributes="+custom_attributes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMongoDBInput_1Struct implements routines.system.IPersistableRow<after_tMongoDBInput_1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return true;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				
			    public String accountName;

				public String getAccountName () {
					return this.accountName;
				}

				public Boolean accountNameIsNullable(){
				    return true;
				}
				public Boolean accountNameIsKey(){
				    return false;
				}
				public Integer accountNameLength(){
				    return null;
				}
				public Integer accountNamePrecision(){
				    return null;
				}
				public String accountNameDefault(){
				
					return null;
				
				}
				public String accountNameComment(){
				
				    return "";
				
				}
				public String accountNamePattern(){
				
					return "";
				
				}
				public String accountNameOriginalDbColumnName(){
				
					return "accountName";
				
				}

				
			    public String marketPlaceId;

				public String getMarketPlaceId () {
					return this.marketPlaceId;
				}

				public Boolean marketPlaceIdIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIdIsKey(){
				    return false;
				}
				public Integer marketPlaceIdLength(){
				    return null;
				}
				public Integer marketPlaceIdPrecision(){
				    return null;
				}
				public String marketPlaceIdDefault(){
				
					return null;
				
				}
				public String marketPlaceIdComment(){
				
				    return "";
				
				}
				public String marketPlaceIdPattern(){
				
					return "";
				
				}
				public String marketPlaceIdOriginalDbColumnName(){
				
					return "marketPlaceId";
				
				}

				
			    public String marketPlaceNumber;

				public String getMarketPlaceNumber () {
					return this.marketPlaceNumber;
				}

				public Boolean marketPlaceNumberIsNullable(){
				    return true;
				}
				public Boolean marketPlaceNumberIsKey(){
				    return false;
				}
				public Integer marketPlaceNumberLength(){
				    return null;
				}
				public Integer marketPlaceNumberPrecision(){
				    return null;
				}
				public String marketPlaceNumberDefault(){
				
					return null;
				
				}
				public String marketPlaceNumberComment(){
				
				    return "";
				
				}
				public String marketPlaceNumberPattern(){
				
					return "";
				
				}
				public String marketPlaceNumberOriginalDbColumnName(){
				
					return "marketPlaceNumber";
				
				}

				
			    public String marketPlace;

				public String getMarketPlace () {
					return this.marketPlace;
				}

				public Boolean marketPlaceIsNullable(){
				    return true;
				}
				public Boolean marketPlaceIsKey(){
				    return false;
				}
				public Integer marketPlaceLength(){
				    return null;
				}
				public Integer marketPlacePrecision(){
				    return null;
				}
				public String marketPlaceDefault(){
				
					return null;
				
				}
				public String marketPlaceComment(){
				
				    return "";
				
				}
				public String marketPlacePattern(){
				
					return "";
				
				}
				public String marketPlaceOriginalDbColumnName(){
				
					return "marketPlace";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String paymentDate;

				public String getPaymentDate () {
					return this.paymentDate;
				}

				public Boolean paymentDateIsNullable(){
				    return true;
				}
				public Boolean paymentDateIsKey(){
				    return false;
				}
				public Integer paymentDateLength(){
				    return null;
				}
				public Integer paymentDatePrecision(){
				    return null;
				}
				public String paymentDateDefault(){
				
					return null;
				
				}
				public String paymentDateComment(){
				
				    return "";
				
				}
				public String paymentDatePattern(){
				
					return "";
				
				}
				public String paymentDateOriginalDbColumnName(){
				
					return "paymentDate";
				
				}

				
			    public String transmissionStatus;

				public String getTransmissionStatus () {
					return this.transmissionStatus;
				}

				public Boolean transmissionStatusIsNullable(){
				    return true;
				}
				public Boolean transmissionStatusIsKey(){
				    return false;
				}
				public Integer transmissionStatusLength(){
				    return null;
				}
				public Integer transmissionStatusPrecision(){
				    return null;
				}
				public String transmissionStatusDefault(){
				
					return null;
				
				}
				public String transmissionStatusComment(){
				
				    return "";
				
				}
				public String transmissionStatusPattern(){
				
					return "";
				
				}
				public String transmissionStatusOriginalDbColumnName(){
				
					return "transmissionStatus";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String marketPlaceShipmentStatus;

				public String getMarketPlaceShipmentStatus () {
					return this.marketPlaceShipmentStatus;
				}

				public Boolean marketPlaceShipmentStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceShipmentStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceShipmentStatusLength(){
				    return null;
				}
				public Integer marketPlaceShipmentStatusPrecision(){
				    return null;
				}
				public String marketPlaceShipmentStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceShipmentStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceShipmentStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceShipmentStatusOriginalDbColumnName(){
				
					return "marketPlaceShipmentStatus";
				
				}

				
			    public String invoice;

				public String getInvoice () {
					return this.invoice;
				}

				public Boolean invoiceIsNullable(){
				    return true;
				}
				public Boolean invoiceIsKey(){
				    return false;
				}
				public Integer invoiceLength(){
				    return null;
				}
				public Integer invoicePrecision(){
				    return null;
				}
				public String invoiceDefault(){
				
					return null;
				
				}
				public String invoiceComment(){
				
				    return "";
				
				}
				public String invoicePattern(){
				
					return "";
				
				}
				public String invoiceOriginalDbColumnName(){
				
					return "invoice";
				
				}

				
			    public String marketPlaceStatus;

				public String getMarketPlaceStatus () {
					return this.marketPlaceStatus;
				}

				public Boolean marketPlaceStatusIsNullable(){
				    return true;
				}
				public Boolean marketPlaceStatusIsKey(){
				    return false;
				}
				public Integer marketPlaceStatusLength(){
				    return null;
				}
				public Integer marketPlaceStatusPrecision(){
				    return null;
				}
				public String marketPlaceStatusDefault(){
				
					return null;
				
				}
				public String marketPlaceStatusComment(){
				
				    return "";
				
				}
				public String marketPlaceStatusPattern(){
				
					return "";
				
				}
				public String marketPlaceStatusOriginalDbColumnName(){
				
					return "marketPlaceStatus";
				
				}

				
			    public String discount;

				public String getDiscount () {
					return this.discount;
				}

				public Boolean discountIsNullable(){
				    return true;
				}
				public Boolean discountIsKey(){
				    return false;
				}
				public Integer discountLength(){
				    return null;
				}
				public Integer discountPrecision(){
				    return null;
				}
				public String discountDefault(){
				
					return null;
				
				}
				public String discountComment(){
				
				    return "";
				
				}
				public String discountPattern(){
				
					return "";
				
				}
				public String discountOriginalDbColumnName(){
				
					return "discount";
				
				}

				
			    public String freight;

				public String getFreight () {
					return this.freight;
				}

				public Boolean freightIsNullable(){
				    return true;
				}
				public Boolean freightIsKey(){
				    return false;
				}
				public Integer freightLength(){
				    return null;
				}
				public Integer freightPrecision(){
				    return null;
				}
				public String freightDefault(){
				
					return null;
				
				}
				public String freightComment(){
				
				    return "";
				
				}
				public String freightPattern(){
				
					return "";
				
				}
				public String freightOriginalDbColumnName(){
				
					return "freight";
				
				}

				
			    public String sellerFreight;

				public String getSellerFreight () {
					return this.sellerFreight;
				}

				public Boolean sellerFreightIsNullable(){
				    return true;
				}
				public Boolean sellerFreightIsKey(){
				    return false;
				}
				public Integer sellerFreightLength(){
				    return null;
				}
				public Integer sellerFreightPrecision(){
				    return null;
				}
				public String sellerFreightDefault(){
				
					return null;
				
				}
				public String sellerFreightComment(){
				
				    return "";
				
				}
				public String sellerFreightPattern(){
				
					return "";
				
				}
				public String sellerFreightOriginalDbColumnName(){
				
					return "sellerFreight";
				
				}

				
			    public String interestValue;

				public String getInterestValue () {
					return this.interestValue;
				}

				public Boolean interestValueIsNullable(){
				    return true;
				}
				public Boolean interestValueIsKey(){
				    return false;
				}
				public Integer interestValueLength(){
				    return null;
				}
				public Integer interestValuePrecision(){
				    return null;
				}
				public String interestValueDefault(){
				
					return null;
				
				}
				public String interestValueComment(){
				
				    return "";
				
				}
				public String interestValuePattern(){
				
					return "";
				
				}
				public String interestValueOriginalDbColumnName(){
				
					return "interestValue";
				
				}

				
			    public String gross;

				public String getGross () {
					return this.gross;
				}

				public Boolean grossIsNullable(){
				    return true;
				}
				public Boolean grossIsKey(){
				    return false;
				}
				public Integer grossLength(){
				    return null;
				}
				public Integer grossPrecision(){
				    return null;
				}
				public String grossDefault(){
				
					return null;
				
				}
				public String grossComment(){
				
				    return "";
				
				}
				public String grossPattern(){
				
					return "";
				
				}
				public String grossOriginalDbColumnName(){
				
					return "gross";
				
				}

				
			    public String total;

				public String getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				
			    public String shipping;

				public String getShipping () {
					return this.shipping;
				}

				public Boolean shippingIsNullable(){
				    return true;
				}
				public Boolean shippingIsKey(){
				    return false;
				}
				public Integer shippingLength(){
				    return null;
				}
				public Integer shippingPrecision(){
				    return null;
				}
				public String shippingDefault(){
				
					return null;
				
				}
				public String shippingComment(){
				
				    return "";
				
				}
				public String shippingPattern(){
				
					return "";
				
				}
				public String shippingOriginalDbColumnName(){
				
					return "shipping";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String anymarketAddress;

				public String getAnymarketAddress () {
					return this.anymarketAddress;
				}

				public Boolean anymarketAddressIsNullable(){
				    return true;
				}
				public Boolean anymarketAddressIsKey(){
				    return false;
				}
				public Integer anymarketAddressLength(){
				    return null;
				}
				public Integer anymarketAddressPrecision(){
				    return null;
				}
				public String anymarketAddressDefault(){
				
					return null;
				
				}
				public String anymarketAddressComment(){
				
				    return "";
				
				}
				public String anymarketAddressPattern(){
				
					return "";
				
				}
				public String anymarketAddressOriginalDbColumnName(){
				
					return "anymarketAddress";
				
				}

				
			    public String buyer;

				public String getBuyer () {
					return this.buyer;
				}

				public Boolean buyerIsNullable(){
				    return true;
				}
				public Boolean buyerIsKey(){
				    return false;
				}
				public Integer buyerLength(){
				    return null;
				}
				public Integer buyerPrecision(){
				    return null;
				}
				public String buyerDefault(){
				
					return null;
				
				}
				public String buyerComment(){
				
				    return "";
				
				}
				public String buyerPattern(){
				
					return "";
				
				}
				public String buyerOriginalDbColumnName(){
				
					return "buyer";
				
				}

				
			    public String payments;

				public String getPayments () {
					return this.payments;
				}

				public Boolean paymentsIsNullable(){
				    return true;
				}
				public Boolean paymentsIsKey(){
				    return false;
				}
				public Integer paymentsLength(){
				    return null;
				}
				public Integer paymentsPrecision(){
				    return null;
				}
				public String paymentsDefault(){
				
					return null;
				
				}
				public String paymentsComment(){
				
				    return "";
				
				}
				public String paymentsPattern(){
				
					return "";
				
				}
				public String paymentsOriginalDbColumnName(){
				
					return "payments";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String deliverStatus;

				public String getDeliverStatus () {
					return this.deliverStatus;
				}

				public Boolean deliverStatusIsNullable(){
				    return true;
				}
				public Boolean deliverStatusIsKey(){
				    return false;
				}
				public Integer deliverStatusLength(){
				    return null;
				}
				public Integer deliverStatusPrecision(){
				    return null;
				}
				public String deliverStatusDefault(){
				
					return null;
				
				}
				public String deliverStatusComment(){
				
				    return "";
				
				}
				public String deliverStatusPattern(){
				
					return "";
				
				}
				public String deliverStatusOriginalDbColumnName(){
				
					return "deliverStatus";
				
				}

				
			    public String idAccount;

				public String getIdAccount () {
					return this.idAccount;
				}

				public Boolean idAccountIsNullable(){
				    return true;
				}
				public Boolean idAccountIsKey(){
				    return false;
				}
				public Integer idAccountLength(){
				    return null;
				}
				public Integer idAccountPrecision(){
				    return null;
				}
				public String idAccountDefault(){
				
					return null;
				
				}
				public String idAccountComment(){
				
				    return "";
				
				}
				public String idAccountPattern(){
				
					return "";
				
				}
				public String idAccountOriginalDbColumnName(){
				
					return "idAccount";
				
				}

				
			    public String fulfillment;

				public String getFulfillment () {
					return this.fulfillment;
				}

				public Boolean fulfillmentIsNullable(){
				    return true;
				}
				public Boolean fulfillmentIsKey(){
				    return false;
				}
				public Integer fulfillmentLength(){
				    return null;
				}
				public Integer fulfillmentPrecision(){
				    return null;
				}
				public String fulfillmentDefault(){
				
					return null;
				
				}
				public String fulfillmentComment(){
				
				    return "";
				
				}
				public String fulfillmentPattern(){
				
					return "";
				
				}
				public String fulfillmentOriginalDbColumnName(){
				
					return "fulfillment";
				
				}

				
			    public String subChannel;

				public String getSubChannel () {
					return this.subChannel;
				}

				public Boolean subChannelIsNullable(){
				    return true;
				}
				public Boolean subChannelIsKey(){
				    return false;
				}
				public Integer subChannelLength(){
				    return null;
				}
				public Integer subChannelPrecision(){
				    return null;
				}
				public String subChannelDefault(){
				
					return null;
				
				}
				public String subChannelComment(){
				
				    return "";
				
				}
				public String subChannelPattern(){
				
					return "";
				
				}
				public String subChannelOriginalDbColumnName(){
				
					return "subChannel";
				
				}

				
			    public String subChannelNormalized;

				public String getSubChannelNormalized () {
					return this.subChannelNormalized;
				}

				public Boolean subChannelNormalizedIsNullable(){
				    return true;
				}
				public Boolean subChannelNormalizedIsKey(){
				    return false;
				}
				public Integer subChannelNormalizedLength(){
				    return null;
				}
				public Integer subChannelNormalizedPrecision(){
				    return null;
				}
				public String subChannelNormalizedDefault(){
				
					return null;
				
				}
				public String subChannelNormalizedComment(){
				
				    return "";
				
				}
				public String subChannelNormalizedPattern(){
				
					return "";
				
				}
				public String subChannelNormalizedOriginalDbColumnName(){
				
					return "subChannelNormalized";
				
				}

				
			    public String metadata;

				public String getMetadata () {
					return this.metadata;
				}

				public Boolean metadataIsNullable(){
				    return true;
				}
				public Boolean metadataIsKey(){
				    return false;
				}
				public Integer metadataLength(){
				    return null;
				}
				public Integer metadataPrecision(){
				    return null;
				}
				public String metadataDefault(){
				
					return null;
				
				}
				public String metadataComment(){
				
				    return "";
				
				}
				public String metadataPattern(){
				
					return "";
				
				}
				public String metadataOriginalDbColumnName(){
				
					return "metadata";
				
				}

				
			    public String documentIntermediator;

				public String getDocumentIntermediator () {
					return this.documentIntermediator;
				}

				public Boolean documentIntermediatorIsNullable(){
				    return true;
				}
				public Boolean documentIntermediatorIsKey(){
				    return false;
				}
				public Integer documentIntermediatorLength(){
				    return null;
				}
				public Integer documentIntermediatorPrecision(){
				    return null;
				}
				public String documentIntermediatorDefault(){
				
					return null;
				
				}
				public String documentIntermediatorComment(){
				
				    return "";
				
				}
				public String documentIntermediatorPattern(){
				
					return "";
				
				}
				public String documentIntermediatorOriginalDbColumnName(){
				
					return "documentIntermediator";
				
				}

				
			    public String intermediateRegistrationId;

				public String getIntermediateRegistrationId () {
					return this.intermediateRegistrationId;
				}

				public Boolean intermediateRegistrationIdIsNullable(){
				    return true;
				}
				public Boolean intermediateRegistrationIdIsKey(){
				    return false;
				}
				public Integer intermediateRegistrationIdLength(){
				    return null;
				}
				public Integer intermediateRegistrationIdPrecision(){
				    return null;
				}
				public String intermediateRegistrationIdDefault(){
				
					return null;
				
				}
				public String intermediateRegistrationIdComment(){
				
				    return "";
				
				}
				public String intermediateRegistrationIdPattern(){
				
					return "";
				
				}
				public String intermediateRegistrationIdOriginalDbColumnName(){
				
					return "intermediateRegistrationId";
				
				}

				
			    public String custom_attributes;

				public String getCustom_attributes () {
					return this.custom_attributes;
				}

				public Boolean custom_attributesIsNullable(){
				    return true;
				}
				public Boolean custom_attributesIsKey(){
				    return false;
				}
				public Integer custom_attributesLength(){
				    return null;
				}
				public Integer custom_attributesPrecision(){
				    return null;
				}
				public String custom_attributesDefault(){
				
					return null;
				
				}
				public String custom_attributesComment(){
				
				    return "";
				
				}
				public String custom_attributesPattern(){
				
					return "";
				
				}
				public String custom_attributesOriginalDbColumnName(){
				
					return "custom_attributes";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tMongoDBInput_1Struct other = (after_tMongoDBInput_1Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tMongoDBInput_1Struct other) {

		other._id = this._id;
	            other.id = this.id;
	            other.accountName = this.accountName;
	            other.marketPlaceId = this.marketPlaceId;
	            other.marketPlaceNumber = this.marketPlaceNumber;
	            other.marketPlace = this.marketPlace;
	            other.createdAt = this.createdAt;
	            other.paymentDate = this.paymentDate;
	            other.transmissionStatus = this.transmissionStatus;
	            other.status = this.status;
	            other.marketPlaceShipmentStatus = this.marketPlaceShipmentStatus;
	            other.invoice = this.invoice;
	            other.marketPlaceStatus = this.marketPlaceStatus;
	            other.discount = this.discount;
	            other.freight = this.freight;
	            other.sellerFreight = this.sellerFreight;
	            other.interestValue = this.interestValue;
	            other.gross = this.gross;
	            other.total = this.total;
	            other.shipping = this.shipping;
	            other.billingAddress = this.billingAddress;
	            other.anymarketAddress = this.anymarketAddress;
	            other.buyer = this.buyer;
	            other.payments = this.payments;
	            other.items = this.items;
	            other.deliverStatus = this.deliverStatus;
	            other.idAccount = this.idAccount;
	            other.fulfillment = this.fulfillment;
	            other.subChannel = this.subChannel;
	            other.subChannelNormalized = this.subChannelNormalized;
	            other.metadata = this.metadata;
	            other.documentIntermediator = this.documentIntermediator;
	            other.intermediateRegistrationId = this.intermediateRegistrationId;
	            other.custom_attributes = this.custom_attributes;
	            
	}

	public void copyKeysDataTo(after_tMongoDBInput_1Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.invoice = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.shipping = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.anymarketAddress = readString(dis);
					
					this.buyer = readString(dis);
					
					this.payments = readString(dis);
					
					this.items = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.metadata = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.id = readString(dis);
					
					this.accountName = readString(dis);
					
					this.marketPlaceId = readString(dis);
					
					this.marketPlaceNumber = readString(dis);
					
					this.marketPlace = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.paymentDate = readString(dis);
					
					this.transmissionStatus = readString(dis);
					
					this.status = readString(dis);
					
					this.marketPlaceShipmentStatus = readString(dis);
					
					this.invoice = readString(dis);
					
					this.marketPlaceStatus = readString(dis);
					
					this.discount = readString(dis);
					
					this.freight = readString(dis);
					
					this.sellerFreight = readString(dis);
					
					this.interestValue = readString(dis);
					
					this.gross = readString(dis);
					
					this.total = readString(dis);
					
					this.shipping = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.anymarketAddress = readString(dis);
					
					this.buyer = readString(dis);
					
					this.payments = readString(dis);
					
					this.items = readString(dis);
					
					this.deliverStatus = readString(dis);
					
					this.idAccount = readString(dis);
					
					this.fulfillment = readString(dis);
					
					this.subChannel = readString(dis);
					
					this.subChannelNormalized = readString(dis);
					
					this.metadata = readString(dis);
					
					this.documentIntermediator = readString(dis);
					
					this.intermediateRegistrationId = readString(dis);
					
					this.custom_attributes = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.invoice,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.shipping,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.anymarketAddress,dos);
					
					// String
				
						writeString(this.buyer,dos);
					
					// String
				
						writeString(this.payments,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.metadata,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.id,dos);
					
					// String
				
						writeString(this.accountName,dos);
					
					// String
				
						writeString(this.marketPlaceId,dos);
					
					// String
				
						writeString(this.marketPlaceNumber,dos);
					
					// String
				
						writeString(this.marketPlace,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.paymentDate,dos);
					
					// String
				
						writeString(this.transmissionStatus,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.marketPlaceShipmentStatus,dos);
					
					// String
				
						writeString(this.invoice,dos);
					
					// String
				
						writeString(this.marketPlaceStatus,dos);
					
					// String
				
						writeString(this.discount,dos);
					
					// String
				
						writeString(this.freight,dos);
					
					// String
				
						writeString(this.sellerFreight,dos);
					
					// String
				
						writeString(this.interestValue,dos);
					
					// String
				
						writeString(this.gross,dos);
					
					// String
				
						writeString(this.total,dos);
					
					// String
				
						writeString(this.shipping,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.anymarketAddress,dos);
					
					// String
				
						writeString(this.buyer,dos);
					
					// String
				
						writeString(this.payments,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.deliverStatus,dos);
					
					// String
				
						writeString(this.idAccount,dos);
					
					// String
				
						writeString(this.fulfillment,dos);
					
					// String
				
						writeString(this.subChannel,dos);
					
					// String
				
						writeString(this.subChannelNormalized,dos);
					
					// String
				
						writeString(this.metadata,dos);
					
					// String
				
						writeString(this.documentIntermediator,dos);
					
					// String
				
						writeString(this.intermediateRegistrationId,dos);
					
					// String
				
						writeString(this.custom_attributes,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",id="+id);
		sb.append(",accountName="+accountName);
		sb.append(",marketPlaceId="+marketPlaceId);
		sb.append(",marketPlaceNumber="+marketPlaceNumber);
		sb.append(",marketPlace="+marketPlace);
		sb.append(",createdAt="+createdAt);
		sb.append(",paymentDate="+paymentDate);
		sb.append(",transmissionStatus="+transmissionStatus);
		sb.append(",status="+status);
		sb.append(",marketPlaceShipmentStatus="+marketPlaceShipmentStatus);
		sb.append(",invoice="+invoice);
		sb.append(",marketPlaceStatus="+marketPlaceStatus);
		sb.append(",discount="+discount);
		sb.append(",freight="+freight);
		sb.append(",sellerFreight="+sellerFreight);
		sb.append(",interestValue="+interestValue);
		sb.append(",gross="+gross);
		sb.append(",total="+total);
		sb.append(",shipping="+shipping);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",anymarketAddress="+anymarketAddress);
		sb.append(",buyer="+buyer);
		sb.append(",payments="+payments);
		sb.append(",items="+items);
		sb.append(",deliverStatus="+deliverStatus);
		sb.append(",idAccount="+idAccount);
		sb.append(",fulfillment="+fulfillment);
		sb.append(",subChannel="+subChannel);
		sb.append(",subChannelNormalized="+subChannelNormalized);
		sb.append(",metadata="+metadata);
		sb.append(",documentIntermediator="+documentIntermediator);
		sb.append(",intermediateRegistrationId="+intermediateRegistrationId);
		sb.append(",custom_attributes="+custom_attributes);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMongoDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tMongoDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
Saida1Struct Saida1 = new Saida1Struct();
saStruct sa = new saStruct();
row9Struct row9 = new row9Struct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
InsertStruct Insert = new InsertStruct();
InsertStruct row4 = Insert;
UpdateStruct Update = new UpdateStruct();











	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_t_order_mkt").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_t_order_mkt").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"id\",\"accountname\",\"marketplaceid\",\"marketplacenumber\",\"marketplace\",\"createdat\",\"paymentdate\",\"transmissionstatus\",\"status\",\"marketplaceshipmentstatus\",\"marketplacestatus\",\"discount\",\"freight\",\"sellerfreight\",\"interestvalue\",\"gross\",\"total\",\"deliverstatus\",\"idaccount\",\"fulfillment\",\"subchannel\",\"subchannelnormalized\",\"documentintermediator\",\"intermediateregistrationid\",\"markuperror\",\"markupalert\",\"erpsynced\",\"erperror\",\"docnumber\",\"accesskey\",\"orderinvoiced\",\"orderdispatched\",\"ordercanceled\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[33];

        public void addRow(String[] row) {

            for (int i = 0; i < 33; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 32 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 32 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[32] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"id","accountName","marketPlaceId","marketPlaceNumber","marketPlace","createdAt","paymentDate","transmissionStatus","status","marketPlaceShipmentStatus","marketPlaceStatus","discount","freight","sellerFreight","interestValue","gross","total","deliverStatus","idAccount","fulfillment","subChannel","subChannelNormalized","documentIntermediator","intermediateRegistrationId","markupError","markupAlert","erpSynced","erpError","docNumber","accessKey","orderInvoiced","orderDispatched","orderCanceled",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */




	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Update");
					}
				
		int tos_count_tDBOutput_4 = 0;
		





String dbschema_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_4 = null;
if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
	tableName_tDBOutput_4 = ("dw_t_order_mkt").toLowerCase();
} else {
	tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("dw_t_order_mkt").toLowerCase();
}

        int updateKeyCount_tDBOutput_4 = 1;
        if(updateKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_4 == 33 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rowsToCommitCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;

boolean whetherReject_tDBOutput_4 = false;

java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;

	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_4 = 10000;
   int batchSizeCounter_tDBOutput_4=0;

int count_tDBOutput_4=0;
	    String update_tDBOutput_4 = "UPDATE \"" + tableName_tDBOutput_4 + "\" SET \"accountname\" = ?,\"marketplaceid\" = ?,\"marketplacenumber\" = ?,\"marketplace\" = ?,\"createdat\" = ?,\"paymentdate\" = ?,\"transmissionstatus\" = ?,\"status\" = ?,\"marketplaceshipmentstatus\" = ?,\"marketplacestatus\" = ?,\"discount\" = ?,\"freight\" = ?,\"sellerfreight\" = ?,\"interestvalue\" = ?,\"gross\" = ?,\"total\" = ?,\"deliverstatus\" = ?,\"idaccount\" = ?,\"fulfillment\" = ?,\"subchannel\" = ?,\"subchannelnormalized\" = ?,\"documentintermediator\" = ?,\"intermediateregistrationid\" = ?,\"markuperror\" = ?,\"markupalert\" = ?,\"erpsynced\" = ?,\"erperror\" = ?,\"docnumber\" = ?,\"accesskey\" = ?,\"orderinvoiced\" = ?,\"orderdispatched\" = ?,\"ordercanceled\" = ? WHERE \"id\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(update_tDBOutput_4);
	    resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
	    

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertStruct Insert_tmp = new InsertStruct();
UpdateStruct Update_tmp = new UpdateStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tConvertType_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_1", false);
		start_Hash.put("tConvertType_1", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tConvertType_1 = 0;
		
	int nb_line_tConvertType_1 = 0;  
 



/**
 * [tConvertType_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tExtractJSONFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractJSONFields_1", false);
		start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractJSONFields_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sa");
					}
				
		int tos_count_tExtractJSONFields_1 = 0;
		

int nb_line_tExtractJSONFields_1 = 0;
String jsonStr_tExtractJSONFields_1 = "";

	

class JsonPathCache_tExtractJSONFields_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

 



/**
 * [tExtractJSONFields_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Saida1");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
saStruct sa_tmp = new saStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
Saida1Struct Saida1_tmp = new Saida1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_1", false);
		start_Hash.put("tMongoDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_1";
	
	
		int tos_count_tMongoDBInput_1 = 0;
		


	

final String applicationName_tMongoDBInput_1 = "Talend";

	int nb_line_tMongoDBInput_1 = 0;
	


    // Declarations
    com.mongodb.client.MongoClient mongo_tMongoDBInput_1=null;
    com.mongodb.client.MongoDatabase db_tMongoDBInput_1=null;

        mongo_tMongoDBInput_1=(com.mongodb.client.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
        db_tMongoDBInput_1 = (com.mongodb.client.MongoDatabase)globalMap.get("db_tMongoDBConnection_1");


				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_1 = db_tMongoDBInput_1.getCollection("orders");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					java.lang.StringBuilder sb_tMongoDBInput_1 = new java.lang.StringBuilder();
	                
	                    for (com.mongodb.DBObject index: coll_tMongoDBInput_1.listIndexes(com.mongodb.DBObject.class)) {
	                 
	                        for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                            // The regexp is:
	                            // - contain the db DBcolumnName between two backslashed quotes
	                            // - is followed at some point by a colon
	                            // - there is no comma between the the DBcolumnName and the colon
	                            if  (("{  'createdAt': {    '$gte': '"+context.data+"'}}").matches(".*" + key.replace("*","\\*") + "[^,]*:.*")) {
	                                // We have an index, do not print error message
	                                needIndexWarning = false;
	                            } else {
	                                // This index is not in the query, add it into the indexList
	                                sb_tMongoDBInput_1.append(", ").append(key);
	                            }
	                        }
	                        indexList = sb_tMongoDBInput_1.toString();
	                    }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_1 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

						org.bson.Document myQuery_tMongoDBInput_1 = org.bson.Document.parse("{  'createdAt': {    '$gte': '"+context.data+"'}}");
						
							com.mongodb.client.FindIterable<org.bson.Document> findIterable_tMongoDBInput_1 = coll_tMongoDBInput_1.find(myQuery_tMongoDBInput_1).noCursorTimeout(false);
							


				
				class DBObjectInputUtil_tMongoDBInput_1{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						
						    if(value instanceof org.bson.Document){
						        value = ((org.bson.Document)value).toJson();
						    }else if (value instanceof java.util.List){

						    java.util.List list = new java.util.ArrayList();
						    ((java.util.List)value).stream().forEach(e -> {
						    if(e instanceof org.bson.Document){
						        list.add(((org.bson.Document)e).toJson());
						    }else{
						        list.add(e);
						    }
						    });
						    value = list;
						    }

						
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_1 dbObjectInputUtil_tMongoDBInput_1=new DBObjectInputUtil_tMongoDBInput_1();
				java.util.Map<String, String> pathMap_tMongoDBInput_1=new java.util.HashMap<>();
				pathMap_tMongoDBInput_1.put("_id","");
				pathMap_tMongoDBInput_1.put("id","");
				pathMap_tMongoDBInput_1.put("accountName","");
				pathMap_tMongoDBInput_1.put("marketPlaceId","");
				pathMap_tMongoDBInput_1.put("marketPlaceNumber","");
				pathMap_tMongoDBInput_1.put("marketPlace","");
				pathMap_tMongoDBInput_1.put("createdAt","");
				pathMap_tMongoDBInput_1.put("paymentDate","");
				pathMap_tMongoDBInput_1.put("transmissionStatus","");
				pathMap_tMongoDBInput_1.put("status","");
				pathMap_tMongoDBInput_1.put("marketPlaceShipmentStatus","");
				pathMap_tMongoDBInput_1.put("invoice","");
				pathMap_tMongoDBInput_1.put("marketPlaceStatus","");
				pathMap_tMongoDBInput_1.put("discount","");
				pathMap_tMongoDBInput_1.put("freight","");
				pathMap_tMongoDBInput_1.put("sellerFreight","");
				pathMap_tMongoDBInput_1.put("interestValue","");
				pathMap_tMongoDBInput_1.put("gross","");
				pathMap_tMongoDBInput_1.put("total","");
				pathMap_tMongoDBInput_1.put("shipping","");
				pathMap_tMongoDBInput_1.put("billingAddress","");
				pathMap_tMongoDBInput_1.put("anymarketAddress","");
				pathMap_tMongoDBInput_1.put("buyer","");
				pathMap_tMongoDBInput_1.put("payments","");
				pathMap_tMongoDBInput_1.put("items","");
				pathMap_tMongoDBInput_1.put("deliverStatus","");
				pathMap_tMongoDBInput_1.put("idAccount","");
				pathMap_tMongoDBInput_1.put("fulfillment","");
				pathMap_tMongoDBInput_1.put("subChannel","");
				pathMap_tMongoDBInput_1.put("subChannelNormalized","");
				pathMap_tMongoDBInput_1.put("metadata","");
				pathMap_tMongoDBInput_1.put("documentIntermediator","");
				pathMap_tMongoDBInput_1.put("intermediateRegistrationId","");
				pathMap_tMongoDBInput_1.put("custom_attributes","");

						
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_1 = findIterable_tMongoDBInput_1.iterator();
						
				while (cursor_tMongoDBInput_1.hasNext()){
				org.bson.Document o_tMongoDBInput_1 = cursor_tMongoDBInput_1.next();
				nb_line_tMongoDBInput_1++;
				Object valueObj_tMongoDBInput_1=null;
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("_id"),"_id",o_tMongoDBInput_1);
					
				row1._id = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("id"),"id",o_tMongoDBInput_1);
					
				row1.id = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("accountName"),"accountName",o_tMongoDBInput_1);
					
				row1.accountName = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("marketPlaceId"),"marketPlaceId",o_tMongoDBInput_1);
					
				row1.marketPlaceId = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("marketPlaceNumber"),"marketPlaceNumber",o_tMongoDBInput_1);
					
				row1.marketPlaceNumber = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("marketPlace"),"marketPlace",o_tMongoDBInput_1);
					
				row1.marketPlace = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("createdAt"),"createdAt",o_tMongoDBInput_1);
					
				row1.createdAt = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("paymentDate"),"paymentDate",o_tMongoDBInput_1);
					
				row1.paymentDate = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("transmissionStatus"),"transmissionStatus",o_tMongoDBInput_1);
					
				row1.transmissionStatus = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("status"),"status",o_tMongoDBInput_1);
					
				row1.status = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("marketPlaceShipmentStatus"),"marketPlaceShipmentStatus",o_tMongoDBInput_1);
					
				row1.marketPlaceShipmentStatus = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("invoice"),"invoice",o_tMongoDBInput_1);
					
				row1.invoice = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("marketPlaceStatus"),"marketPlaceStatus",o_tMongoDBInput_1);
					
				row1.marketPlaceStatus = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("discount"),"discount",o_tMongoDBInput_1);
					
				row1.discount = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("freight"),"freight",o_tMongoDBInput_1);
					
				row1.freight = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("sellerFreight"),"sellerFreight",o_tMongoDBInput_1);
					
				row1.sellerFreight = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("interestValue"),"interestValue",o_tMongoDBInput_1);
					
				row1.interestValue = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("gross"),"gross",o_tMongoDBInput_1);
					
				row1.gross = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("total"),"total",o_tMongoDBInput_1);
					
				row1.total = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("shipping"),"shipping",o_tMongoDBInput_1);
					
				row1.shipping = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("billingAddress"),"billingAddress",o_tMongoDBInput_1);
					
				row1.billingAddress = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("anymarketAddress"),"anymarketAddress",o_tMongoDBInput_1);
					
				row1.anymarketAddress = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("buyer"),"buyer",o_tMongoDBInput_1);
					
				row1.buyer = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("payments"),"payments",o_tMongoDBInput_1);
					
				row1.payments = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("items"),"items",o_tMongoDBInput_1);
					
				row1.items = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("deliverStatus"),"deliverStatus",o_tMongoDBInput_1);
					
				row1.deliverStatus = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("idAccount"),"idAccount",o_tMongoDBInput_1);
					
				row1.idAccount = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("fulfillment"),"fulfillment",o_tMongoDBInput_1);
					
				row1.fulfillment = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("subChannel"),"subChannel",o_tMongoDBInput_1);
					
				row1.subChannel = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("subChannelNormalized"),"subChannelNormalized",o_tMongoDBInput_1);
					
				row1.subChannelNormalized = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("metadata"),"metadata",o_tMongoDBInput_1);
					
				row1.metadata = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("documentIntermediator"),"documentIntermediator",o_tMongoDBInput_1);
					
				row1.documentIntermediator = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("intermediateRegistrationId"),"intermediateRegistrationId",o_tMongoDBInput_1);
					
				row1.intermediateRegistrationId = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				
                    valueObj_tMongoDBInput_1=dbObjectInputUtil_tMongoDBInput_1.getValue(pathMap_tMongoDBInput_1.get("custom_attributes"),"custom_attributes",o_tMongoDBInput_1);
					
				row1.custom_attributes = valueObj_tMongoDBInput_1==null ? null : valueObj_tMongoDBInput_1.toString();
				


 



/**
 * [tMongoDBInput_1 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";
	
	

 


	tos_count_tMongoDBInput_1++;

/**
 * [tMongoDBInput_1 main ] stop
 */
	
	/**
	 * [tMongoDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";
	
	

 



/**
 * [tMongoDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Saida1 = null;


// # Output table : 'Saida1'
Saida1_tmp.id = row1.id;
Saida1_tmp.accountName = row1.accountName;
Saida1_tmp.marketPlaceId = row1.marketPlaceId;
Saida1_tmp.marketPlaceNumber = row1.marketPlaceNumber;
Saida1_tmp.marketPlace = row1.marketPlace;
Saida1_tmp.createdAt = row1.createdAt;
Saida1_tmp.paymentDate = row1.paymentDate;
Saida1_tmp.transmissionStatus = row1.transmissionStatus;
Saida1_tmp.status = row1.status;
Saida1_tmp.marketPlaceShipmentStatus = row1.marketPlaceShipmentStatus;
Saida1_tmp.marketPlaceStatus = row1.marketPlaceStatus;
Saida1_tmp.discount = row1.discount;
Saida1_tmp.freight = row1.freight;
Saida1_tmp.sellerFreight = row1.sellerFreight;
Saida1_tmp.interestValue = row1.interestValue;
Saida1_tmp.gross = row1.gross;
Saida1_tmp.total = row1.total;
Saida1_tmp.deliverStatus = row1.deliverStatus;
Saida1_tmp.idAccount = row1.idAccount;
Saida1_tmp.fulfillment = row1.fulfillment;
Saida1_tmp.subChannel = row1.subChannel;
Saida1_tmp.subChannelNormalized = row1.subChannelNormalized;
Saida1_tmp.documentIntermediator = row1.documentIntermediator;
Saida1_tmp.intermediateRegistrationId = row1.intermediateRegistrationId;
Saida1_tmp.custom_attributes = row1.custom_attributes ;
Saida1 = Saida1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Saida1"
if(Saida1 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Saida1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

sa = null;


// # Output table : 'sa'
sa_tmp.id = Saida1.id ;
sa_tmp.accountName = Saida1.accountName ;
sa_tmp.marketPlaceId = Saida1.marketPlaceId ;
sa_tmp.marketPlaceNumber = Saida1.marketPlaceNumber ;
sa_tmp.marketPlace = Saida1.marketPlace ;
sa_tmp.createdAt = Saida1.createdAt ;
sa_tmp.paymentDate = Saida1.paymentDate ;
sa_tmp.transmissionStatus = Saida1.transmissionStatus ;
sa_tmp.status = Saida1.status ;
sa_tmp.marketPlaceShipmentStatus = Saida1.marketPlaceShipmentStatus ;
sa_tmp.marketPlaceStatus = Saida1.marketPlaceStatus ;
sa_tmp.discount = Saida1.discount ;
sa_tmp.freight = Saida1.freight ;
sa_tmp.sellerFreight = Saida1.sellerFreight ;
sa_tmp.interestValue = Saida1.interestValue ;
sa_tmp.gross = Saida1.gross ;
sa_tmp.total = Saida1.total ;
sa_tmp.deliverStatus = Saida1.deliverStatus ;
sa_tmp.idAccount = Saida1.idAccount ;
sa_tmp.fulfillment = Saida1.fulfillment ;
sa_tmp.subChannel = Saida1.subChannel ;
sa_tmp.subChannelNormalized = Saida1.subChannelNormalized ;
sa_tmp.documentIntermediator = Saida1.documentIntermediator ;
sa_tmp.intermediateRegistrationId = Saida1.intermediateRegistrationId ;
sa_tmp.custom_attributes = Saida1.custom_attributes;
sa = sa_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sa"
if(sa != null) { 



	
	/**
	 * [tExtractJSONFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"sa"
						
						);
					}
					

            if(sa.custom_attributes!=null){// C_01
                jsonStr_tExtractJSONFields_1 = sa.custom_attributes.toString();
   
row9 = null;

	

String loopPath_tExtractJSONFields_1 = "$";
java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

boolean isStructError_tExtractJSONFields_1 = true;
com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
try {
	document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath.parse(jsonStr_tExtractJSONFields_1);
	com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
	Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(compiledLoopPath_tExtractJSONFields_1,net.minidev.json.JSONObject.class);
	if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
		resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
	} else {
		resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
	}
	
	isStructError_tExtractJSONFields_1 = false;
} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
		System.err.println(ex_tExtractJSONFields_1.getMessage());
}

String jsonPath_tExtractJSONFields_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

Object value_tExtractJSONFields_1 = null;

Object root_tExtractJSONFields_1 = null;
for(int i_tExtractJSONFields_1=0; isStructError_tExtractJSONFields_1 || (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1.size());i_tExtractJSONFields_1++){
	if(!isStructError_tExtractJSONFields_1){
		Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1.get(i_tExtractJSONFields_1);
            row9 = null;
	row9 = new row9Struct();
	nb_line_tExtractJSONFields_1++;
	try {
        		row9.id = sa.id;
        		row9.accountName = sa.accountName;
        		row9.marketPlaceId = sa.marketPlaceId;
        		row9.marketPlaceNumber = sa.marketPlaceNumber;
        		row9.marketPlace = sa.marketPlace;
        		row9.createdAt = sa.createdAt;
        		row9.paymentDate = sa.paymentDate;
        		row9.transmissionStatus = sa.transmissionStatus;
        		row9.status = sa.status;
        		row9.marketPlaceShipmentStatus = sa.marketPlaceShipmentStatus;
        		row9.marketPlaceStatus = sa.marketPlaceStatus;
        		row9.discount = sa.discount;
        		row9.freight = sa.freight;
        		row9.sellerFreight = sa.sellerFreight;
        		row9.interestValue = sa.interestValue;
        		row9.gross = sa.gross;
        		row9.total = sa.total;
        		row9.deliverStatus = sa.deliverStatus;
        		row9.idAccount = sa.idAccount;
        		row9.fulfillment = sa.fulfillment;
        		row9.subChannel = sa.subChannel;
        		row9.subChannelNormalized = sa.subChannelNormalized;
        		row9.documentIntermediator = sa.documentIntermediator;
        		row9.intermediateRegistrationId = sa.intermediateRegistrationId;
		jsonPath_tExtractJSONFields_1 = "markupError";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.markupError = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.markupError = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "markupAlert";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.markupAlert = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.markupAlert = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "erpSynced";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.erpSynced = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.erpSynced = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "erpError";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.erpError = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.erpError = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "docNumber";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.docNumber = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.docNumber = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "accessKey";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.accessKey = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.accessKey = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "orderInvoiced";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.orderInvoiced = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.orderInvoiced = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "orderDispatched";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.orderDispatched = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.orderDispatched = 

		null

;
		}
		jsonPath_tExtractJSONFields_1 = "orderCanceled";
		compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);
		
		try {
		    
		        value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1.read(row_tExtractJSONFields_1);
		    
				row9.orderCanceled = value_tExtractJSONFields_1 == null ? 

		null

 : value_tExtractJSONFields_1.toString();
		} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",e_tExtractJSONFields_1.getMessage());
			row9.orderCanceled = 

		null

;
		}	
	} catch (java.lang.Exception ex_tExtractJSONFields_1) {
globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",ex_tExtractJSONFields_1.getMessage());
		    System.err.println(ex_tExtractJSONFields_1.getMessage());
		    row9 = null;	
	}
	
	}
    
	isStructError_tExtractJSONFields_1 = false;
	
//}


 


	tos_count_tExtractJSONFields_1++;

/**
 * [tExtractJSONFields_1 main ] stop
 */
	
	/**
	 * [tExtractJSONFields_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";
	
	

 



/**
 * [tExtractJSONFields_1 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    //Code generated according to input schema and output schema
row2.id = row9.id;
row2.accountName = row9.accountName;
row2.marketPlaceId = row9.marketPlaceId;
row2.marketPlaceNumber = row9.marketPlaceNumber;
row2.marketPlace = row9.marketPlace;
row2.createdAt = row9.createdAt.replaceAll("T"," ").replaceAll("Z","");
if (row9.paymentDate == null) {
     row2.paymentDate = "";
} else {
row2.paymentDate = row9.paymentDate.replaceAll("T"," ").replaceAll("Z","");
}
row2.transmissionStatus = row9.transmissionStatus;
row2.status = row9.status;
row2.marketPlaceShipmentStatus = row9.marketPlaceShipmentStatus;
row2.marketPlaceStatus = row9.marketPlaceStatus;
row2.discount = row9.discount;
row2.freight = row9.freight;
row2.sellerFreight = row9.sellerFreight;
row2.interestValue = row9.interestValue;
row2.gross = row9.gross;
row2.total = row9.total;
row2.deliverStatus = row9.deliverStatus;
row2.idAccount = row9.idAccount;
row2.fulfillment = row9.fulfillment;
row2.subChannel = row9.subChannel;
row2.subChannelNormalized = row9.subChannelNormalized;
row2.documentIntermediator = row9.documentIntermediator;
row2.intermediateRegistrationId = row9.intermediateRegistrationId;
row2.markupError = row9.markupError;
row2.markupAlert = row9.markupAlert;
row2.erpSynced = row9.erpSynced;
row2.erpError = row9.erpError;
row2.docNumber = row9.docNumber;
row2.accessKey = row9.accessKey;
row2.orderInvoiced = row9.orderInvoiced;
row2.orderDispatched = row9.orderDispatched;
row2.orderCanceled = row9.orderCanceled;

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tConvertType_1 main ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


  row3 = new row3Struct();
  boolean bHasError_tConvertType_1 = false;             
          try {
              row3.id=TypeConvert.String2String(row2.id);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.accountName=TypeConvert.String2String(row2.accountName);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.marketPlaceId=TypeConvert.String2String(row2.marketPlaceId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.marketPlaceNumber=TypeConvert.String2String(row2.marketPlaceNumber);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.marketPlace=TypeConvert.String2String(row2.marketPlace);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.createdAt=TypeConvert.String2Date(row2.createdAt, "yyyy-MM-dd HH:mm:ss");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.paymentDate=TypeConvert.String2Date(row2.paymentDate, "yyyy-MM-dd HH:mm:ss");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.transmissionStatus=TypeConvert.String2String(row2.transmissionStatus);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.status=TypeConvert.String2String(row2.status);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.marketPlaceShipmentStatus=TypeConvert.String2String(row2.marketPlaceShipmentStatus);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.marketPlaceStatus=TypeConvert.String2String(row2.marketPlaceStatus);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.discount=TypeConvert.String2String(row2.discount);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.freight=TypeConvert.String2String(row2.freight);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.sellerFreight=TypeConvert.String2String(row2.sellerFreight);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.interestValue=TypeConvert.String2String(row2.interestValue);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.gross=TypeConvert.String2String(row2.gross);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.total=TypeConvert.String2String(row2.total);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.deliverStatus=TypeConvert.String2String(row2.deliverStatus);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.idAccount=TypeConvert.String2String(row2.idAccount);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.fulfillment=TypeConvert.String2String(row2.fulfillment);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.subChannel=TypeConvert.String2String(row2.subChannel);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.subChannelNormalized=TypeConvert.String2String(row2.subChannelNormalized);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.documentIntermediator=TypeConvert.String2String(row2.documentIntermediator);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.intermediateRegistrationId=TypeConvert.String2String(row2.intermediateRegistrationId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.markupError=TypeConvert.String2String(row2.markupError);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.markupAlert=TypeConvert.String2String(row2.markupAlert);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.erpSynced=TypeConvert.String2String(row2.erpSynced);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.erpError=TypeConvert.String2String(row2.erpError);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.docNumber=TypeConvert.String2String(row2.docNumber);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.accessKey=TypeConvert.String2String(row2.accessKey);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.orderInvoiced=TypeConvert.String2String(row2.orderInvoiced);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.orderDispatched=TypeConvert.String2String(row2.orderDispatched);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row3.orderCanceled=TypeConvert.String2String(row2.orderCanceled);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_1_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_1 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_1) {row3 = null;}

  nb_line_tConvertType_1 ++ ;

 


	tos_count_tConvertType_1++;

/**
 * [tConvertType_1 main ] stop
 */
	
	/**
	 * [tConvertType_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row6Struct row6 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row6HashKey.id = row3.id ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_5 = true;
	  								
						
									
	
		  								forceLooprow6 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow6 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) || forceLooprow6) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row6'
									
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								
								if(!forceLooprow6) { // G 46
								
							
								 
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow6 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Update = null;
Insert = null;

if(!rejectedInnerJoin_tMap_5 ) {

// # Output table : 'Update'
Update_tmp.id = row3.id;
Update_tmp.accountName = row3.accountName;
Update_tmp.marketPlaceId = row3.marketPlaceId;
Update_tmp.marketPlaceNumber = row3.marketPlaceNumber;
Update_tmp.marketPlace = row3.marketPlace;
Update_tmp.createdAt = row3.createdAt;
Update_tmp.paymentDate = row3.paymentDate;
Update_tmp.transmissionStatus = row3.transmissionStatus;
Update_tmp.status = row3.status;
Update_tmp.marketPlaceShipmentStatus = row3.marketPlaceShipmentStatus;
Update_tmp.marketPlaceStatus = row3.marketPlaceStatus;
Update_tmp.discount = row3.discount;
Update_tmp.freight = row3.freight;
Update_tmp.sellerFreight = row3.sellerFreight;
Update_tmp.interestValue = row3.interestValue;
Update_tmp.gross = row3.gross;
Update_tmp.total = row3.total;
Update_tmp.deliverStatus = row3.deliverStatus;
Update_tmp.idAccount = row3.idAccount;
Update_tmp.fulfillment = row3.fulfillment;
Update_tmp.subChannel = row3.subChannel;
Update_tmp.subChannelNormalized = row3.subChannelNormalized;
Update_tmp.documentIntermediator = row3.documentIntermediator;
Update_tmp.intermediateRegistrationId = row3.intermediateRegistrationId;
Update_tmp.markupError = row3.markupError;
Update_tmp.markupAlert = row3.markupAlert;
Update_tmp.erpSynced = row3.erpSynced;
Update_tmp.erpError = row3.erpError;
Update_tmp.docNumber = row3.docNumber;
Update_tmp.accessKey = row3.accessKey;
Update_tmp.orderInvoiced = row3.orderInvoiced;
Update_tmp.orderDispatched = row3.orderDispatched;
Update_tmp.orderCanceled = row3.orderCanceled;
Update = Update_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'Insert'
// # Filter conditions 
if( rejectedInnerJoin_tMap_5 ) {
Insert_tmp.id = row3.id;
Insert_tmp.accountName = row3.accountName;
Insert_tmp.marketPlaceId = row3.marketPlaceId;
Insert_tmp.marketPlaceNumber = row3.marketPlaceNumber;
Insert_tmp.marketPlace = row3.marketPlace;
Insert_tmp.createdAt = row3.createdAt;
Insert_tmp.paymentDate = row3.paymentDate;
Insert_tmp.transmissionStatus = row3.transmissionStatus;
Insert_tmp.status = row3.status;
Insert_tmp.marketPlaceShipmentStatus = row3.marketPlaceShipmentStatus;
Insert_tmp.marketPlaceStatus = row3.marketPlaceStatus;
Insert_tmp.discount = row3.discount;
Insert_tmp.freight = row3.freight;
Insert_tmp.sellerFreight = row3.sellerFreight;
Insert_tmp.interestValue = row3.interestValue;
Insert_tmp.gross = row3.gross;
Insert_tmp.total = row3.total;
Insert_tmp.deliverStatus = row3.deliverStatus;
Insert_tmp.idAccount = row3.idAccount;
Insert_tmp.fulfillment = row3.fulfillment;
Insert_tmp.subChannel = row3.subChannel;
Insert_tmp.subChannelNormalized = row3.subChannelNormalized;
Insert_tmp.documentIntermediator = row3.documentIntermediator;
Insert_tmp.intermediateRegistrationId = row3.intermediateRegistrationId;
Insert_tmp.markupError = row3.markupError;
Insert_tmp.markupAlert = row3.markupAlert;
Insert_tmp.erpSynced = row3.erpSynced;
Insert_tmp.erpError = row3.erpError;
Insert_tmp.docNumber = row3.docNumber;
Insert_tmp.accessKey = row3.accessKey;
Insert_tmp.orderInvoiced = row3.orderInvoiced;
Insert_tmp.orderDispatched = row3.orderDispatched;
Insert_tmp.orderCanceled = row3.orderCanceled;
Insert = Insert_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Insert"
if(Insert != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[33];
   				
	    		if(Insert.id != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(Insert.id)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.accountName != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(Insert.accountName)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.marketPlaceId != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(Insert.marketPlaceId)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.marketPlaceNumber != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(Insert.marketPlaceNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.marketPlace != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(Insert.marketPlace)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.createdAt != null) { //              
                 row_tLogRow_1[5]=    						
								FormatterUtils.format_Date(Insert.createdAt, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.paymentDate != null) { //              
                 row_tLogRow_1[6]=    						
								FormatterUtils.format_Date(Insert.paymentDate, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.transmissionStatus != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(Insert.transmissionStatus)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.status != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(Insert.status)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.marketPlaceShipmentStatus != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(Insert.marketPlaceShipmentStatus)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.marketPlaceStatus != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(Insert.marketPlaceStatus)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.discount != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(Insert.discount)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.freight != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(Insert.freight)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.sellerFreight != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(Insert.sellerFreight)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.interestValue != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(Insert.interestValue)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.gross != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(Insert.gross)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.total != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(Insert.total)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.deliverStatus != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(Insert.deliverStatus)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.idAccount != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(Insert.idAccount)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.fulfillment != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(Insert.fulfillment)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.subChannel != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(Insert.subChannel)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.subChannelNormalized != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(Insert.subChannelNormalized)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.documentIntermediator != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(Insert.documentIntermediator)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.intermediateRegistrationId != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(Insert.intermediateRegistrationId)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.markupError != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(Insert.markupError)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.markupAlert != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(Insert.markupAlert)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.erpSynced != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(Insert.erpSynced)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.erpError != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(Insert.erpError)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.docNumber != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(Insert.docNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.accessKey != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(Insert.accessKey)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.orderInvoiced != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(Insert.orderInvoiced)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.orderDispatched != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(Insert.orderDispatched)			
					          ;	
							
	    		} //			
    			   				
	    		if(Insert.orderCanceled != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(Insert.orderCanceled)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = Insert;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                    if(row4.id == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, row4.id);
}

                    if(row4.accountName == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, row4.accountName);
}

                    if(row4.marketPlaceId == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row4.marketPlaceId);
}

                    if(row4.marketPlaceNumber == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row4.marketPlaceNumber);
}

                    if(row4.marketPlace == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, row4.marketPlace);
}

                    if(row4.createdAt != null) {
pstmt_tDBOutput_1.setTimestamp(6, new java.sql.Timestamp(row4.createdAt.getTime()));
} else {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(row4.paymentDate != null) {
pstmt_tDBOutput_1.setTimestamp(7, new java.sql.Timestamp(row4.paymentDate.getTime()));
} else {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.TIMESTAMP);
}

                    if(row4.transmissionStatus == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row4.transmissionStatus);
}

                    if(row4.status == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, row4.status);
}

                    if(row4.marketPlaceShipmentStatus == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row4.marketPlaceShipmentStatus);
}

                    if(row4.marketPlaceStatus == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, row4.marketPlaceStatus);
}

                    if(row4.discount == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row4.discount);
}

                    if(row4.freight == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row4.freight);
}

                    if(row4.sellerFreight == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row4.sellerFreight);
}

                    if(row4.interestValue == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, row4.interestValue);
}

                    if(row4.gross == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, row4.gross);
}

                    if(row4.total == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, row4.total);
}

                    if(row4.deliverStatus == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, row4.deliverStatus);
}

                    if(row4.idAccount == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, row4.idAccount);
}

                    if(row4.fulfillment == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, row4.fulfillment);
}

                    if(row4.subChannel == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(21, row4.subChannel);
}

                    if(row4.subChannelNormalized == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, row4.subChannelNormalized);
}

                    if(row4.documentIntermediator == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, row4.documentIntermediator);
}

                    if(row4.intermediateRegistrationId == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(24, row4.intermediateRegistrationId);
}

                    if(row4.markupError == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(25, row4.markupError);
}

                    if(row4.markupAlert == null) {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(26, row4.markupAlert);
}

                    if(row4.erpSynced == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(27, row4.erpSynced);
}

                    if(row4.erpError == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, row4.erpError);
}

                    if(row4.docNumber == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, row4.docNumber);
}

                    if(row4.accessKey == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, row4.accessKey);
}

                    if(row4.orderInvoiced == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, row4.orderInvoiced);
}

                    if(row4.orderDispatched == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, row4.orderDispatched);
}

                    if(row4.orderCanceled == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, row4.orderCanceled);
}

			
    		pstmt_tDBOutput_1.addBatch();
    		nb_line_tDBOutput_1++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_1++;
    		  
    			if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
                try {
						int countSum_tDBOutput_1 = 0;
						    
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
				    	rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
            	    	batchSizeCounter_tDBOutput_1 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
				    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
				    	String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						}else{
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}
				    	
				    	int countSum_tDBOutput_1 = 0;
						for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}
						rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
				    	
				    	System.err.println(errormessage_tDBOutput_1);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "Insert"




// Start of branch "Update"
if(Update != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Update"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                    if(Update.accountName == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(1, Update.accountName);
}

                    if(Update.marketPlaceId == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(2, Update.marketPlaceId);
}

                    if(Update.marketPlaceNumber == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(3, Update.marketPlaceNumber);
}

                    if(Update.marketPlace == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(4, Update.marketPlace);
}

                    if(Update.createdAt != null) {
pstmt_tDBOutput_4.setTimestamp(5, new java.sql.Timestamp(Update.createdAt.getTime()));
} else {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.TIMESTAMP);
}

                    if(Update.paymentDate != null) {
pstmt_tDBOutput_4.setTimestamp(6, new java.sql.Timestamp(Update.paymentDate.getTime()));
} else {
pstmt_tDBOutput_4.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(Update.transmissionStatus == null) {
pstmt_tDBOutput_4.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(7, Update.transmissionStatus);
}

                    if(Update.status == null) {
pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(8, Update.status);
}

                    if(Update.marketPlaceShipmentStatus == null) {
pstmt_tDBOutput_4.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(9, Update.marketPlaceShipmentStatus);
}

                    if(Update.marketPlaceStatus == null) {
pstmt_tDBOutput_4.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(10, Update.marketPlaceStatus);
}

                    if(Update.discount == null) {
pstmt_tDBOutput_4.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(11, Update.discount);
}

                    if(Update.freight == null) {
pstmt_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(12, Update.freight);
}

                    if(Update.sellerFreight == null) {
pstmt_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(13, Update.sellerFreight);
}

                    if(Update.interestValue == null) {
pstmt_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(14, Update.interestValue);
}

                    if(Update.gross == null) {
pstmt_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(15, Update.gross);
}

                    if(Update.total == null) {
pstmt_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(16, Update.total);
}

                    if(Update.deliverStatus == null) {
pstmt_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(17, Update.deliverStatus);
}

                    if(Update.idAccount == null) {
pstmt_tDBOutput_4.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(18, Update.idAccount);
}

                    if(Update.fulfillment == null) {
pstmt_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(19, Update.fulfillment);
}

                    if(Update.subChannel == null) {
pstmt_tDBOutput_4.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(20, Update.subChannel);
}

                    if(Update.subChannelNormalized == null) {
pstmt_tDBOutput_4.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(21, Update.subChannelNormalized);
}

                    if(Update.documentIntermediator == null) {
pstmt_tDBOutput_4.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(22, Update.documentIntermediator);
}

                    if(Update.intermediateRegistrationId == null) {
pstmt_tDBOutput_4.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(23, Update.intermediateRegistrationId);
}

                    if(Update.markupError == null) {
pstmt_tDBOutput_4.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(24, Update.markupError);
}

                    if(Update.markupAlert == null) {
pstmt_tDBOutput_4.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(25, Update.markupAlert);
}

                    if(Update.erpSynced == null) {
pstmt_tDBOutput_4.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(26, Update.erpSynced);
}

                    if(Update.erpError == null) {
pstmt_tDBOutput_4.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(27, Update.erpError);
}

                    if(Update.docNumber == null) {
pstmt_tDBOutput_4.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(28, Update.docNumber);
}

                    if(Update.accessKey == null) {
pstmt_tDBOutput_4.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(29, Update.accessKey);
}

                    if(Update.orderInvoiced == null) {
pstmt_tDBOutput_4.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(30, Update.orderInvoiced);
}

                    if(Update.orderDispatched == null) {
pstmt_tDBOutput_4.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(31, Update.orderDispatched);
}

                    if(Update.orderCanceled == null) {
pstmt_tDBOutput_4.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(32, Update.orderCanceled);
}

                    if(Update.id == null) {
pstmt_tDBOutput_4.setNull(33 + count_tDBOutput_4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_4.setString(33 + count_tDBOutput_4, Update.id);
}


    		pstmt_tDBOutput_4.addBatch();
    		nb_line_tDBOutput_4++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_4++;
    		  
    			if ((batchSize_tDBOutput_4 > 0) && (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
                try {
						int countSum_tDBOutput_4 = 0;
						    
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
				    	rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
            	    	batchSizeCounter_tDBOutput_4 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
				    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
				    	String errormessage_tDBOutput_4;
						if (ne_tDBOutput_4 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
							errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
						}else{
							errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
						}
				    	
				    	int countSum_tDBOutput_4 = 0;
						for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}
						rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
				    	
				    	System.err.println(errormessage_tDBOutput_4);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "Update"



	
		} // close loop of lookup 'row6' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tConvertType_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row9"

		// end for
	}


	
		} // C_01
	
	
	/**
	 * [tExtractJSONFields_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";
	
	

 



/**
 * [tExtractJSONFields_1 process_data_end ] stop
 */

} // End of branch "sa"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "Saida1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";
	
	

 



/**
 * [tMongoDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";
	
	

            }
    globalMap.put("tMongoDBInput_1_NB_LINE", nb_line_tMongoDBInput_1);
 

ok_Hash.put("tMongoDBInput_1", true);
end_Hash.put("tMongoDBInput_1", System.currentTimeMillis());




/**
 * [tMongoDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Saida1");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";
	
	
   globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sa");
			  	}
			  	
 

ok_Hash.put("tExtractJSONFields_1", true);
end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());




/**
 * [tExtractJSONFields_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tConvertType_1 end ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	
      globalMap.put("tConvertType_1_NB_LINE", nb_line_tConvertType_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tConvertType_1", true);
end_Hash.put("tConvertType_1", System.currentTimeMillis());




/**
 * [tConvertType_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



	    try {
				int countSum_tDBOutput_1 = 0;
				if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
						
					for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
						
				}
		    	
		    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_1){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e_tDBOutput_1.getMessage());
	    	java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),sqle_tDBOutput_1=null;
	    	String errormessage_tDBOutput_1;
			if (ne_tDBOutput_1 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_1 = new java.sql.SQLException(e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(), ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
				errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
			}else{
				errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
			}
	    	
	    	int countSum_tDBOutput_1 = 0;
			for(int countEach_tDBOutput_1: e_tDBOutput_1.getUpdateCounts()) {
				countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
			}
			rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
			
	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
	    	
	    	System.err.println(errormessage_tDBOutput_1);
	    	
		}
	    
        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */







	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



	    try {
				int countSum_tDBOutput_4 = 0;
				if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {
						
					for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
						
				}
		    	
		    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
	    	java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
	    	String errormessage_tDBOutput_4;
			if (ne_tDBOutput_4 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
				errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
			}else{
				errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
			}
	    	
	    	int countSum_tDBOutput_4 = 0;
			for(int countEach_tDBOutput_4: e_tDBOutput_4.getUpdateCounts()) {
				countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
			}
			rowsToCommitCount_tDBOutput_4 += countSum_tDBOutput_4;
			
	    		updatedCount_tDBOutput_4 += countSum_tDBOutput_4;
	    	
	    	System.err.println(errormessage_tDBOutput_4);
	    	
		}
	    
        if(pstmt_tDBOutput_4 != null) {
        		
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Update");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */





















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tMongoDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_1";
	
	

 



/**
 * [tMongoDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tExtractJSONFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractJSONFields_1";
	
	

 



/**
 * [tExtractJSONFields_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tConvertType_1 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_1";
	
	

 



/**
 * [tConvertType_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";
	
	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */







	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row81Struct row81 = new row81Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_order_mkt_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row80Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row80Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row81.nm_programa = next_tHashInput_2.nm_programa;
	row81.data_inicio_execucao = next_tHashInput_2.data_inicio_execucao;
	row81.data_termino_execucao = next_tHashInput_2.data_termino_execucao;
	row81.mensagem = next_tHashInput_2.mensagem;
	row81.uuid = next_tHashInput_2.uuid;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row81.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row81.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_order_mkt_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id;

				public String getId () {
					return this.id;
				}

				public Boolean idIsNullable(){
				    return true;
				}
				public Boolean idIsKey(){
				    return false;
				}
				public Integer idLength(){
				    return null;
				}
				public Integer idPrecision(){
				    return null;
				}
				public String idDefault(){
				
					return null;
				
				}
				public String idComment(){
				
				    return "";
				
				}
				public String idPattern(){
				
					return "";
				
				}
				public String idOriginalDbColumnName(){
				
					return "id";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.id == null) {
							if (other.id != null)
								return false;
						
						} else if (!this.id.equals(other.id))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.id = this.id;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_order_mkt, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_order_mkt) {

        	try {

        		int length = 0;
		
					this.id = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.id,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+id);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tHashInput_1 - inputs:(after_tMongoDBInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_5 - inputs:(row3,row6) outputs:(Insert,Update)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_order_mkt_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.id = next_tHashInput_1.id;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.id = row6.id;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_order_mkt_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_order_mkt dw_t_order_mktClass = new dw_t_order_mkt();

        int exitCode = dw_t_order_mktClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_order_mkt.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_order_mkt_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_order_mkt.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("MONGODB_HOST", "id_String");
                        if(context.getStringValue("MONGODB_HOST") == null) {
                            context.MONGODB_HOST = null;
                        } else {
                            context.MONGODB_HOST=(String) context.getProperty("MONGODB_HOST");
                        }
                        context.setContextType("MONGODB_DB", "id_String");
                        if(context.getStringValue("MONGODB_DB") == null) {
                            context.MONGODB_DB = null;
                        } else {
                            context.MONGODB_DB=(String) context.getProperty("MONGODB_DB");
                        }
                        context.setContextType("MONGODB_PORT", "id_String");
                        if(context.getStringValue("MONGODB_PORT") == null) {
                            context.MONGODB_PORT = null;
                        } else {
                            context.MONGODB_PORT=(String) context.getProperty("MONGODB_PORT");
                        }
                        context.setContextType("MONGODB_USER", "id_String");
                        if(context.getStringValue("MONGODB_USER") == null) {
                            context.MONGODB_USER = null;
                        } else {
                            context.MONGODB_USER=(String) context.getProperty("MONGODB_USER");
                        }
                        context.setContextType("MONGODB_PASSWORD", "id_String");
                        if(context.getStringValue("MONGODB_PASSWORD") == null) {
                            context.MONGODB_PASSWORD = null;
                        } else {
                            context.MONGODB_PASSWORD=(String) context.getProperty("MONGODB_PASSWORD");
                        }
                        context.setContextType("data", "id_String");
                        if(context.getStringValue("data") == null) {
                            context.data = null;
                        } else {
                            context.data=(String) context.getProperty("data");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("MONGODB_HOST")) {
                context.MONGODB_HOST = (String) parentContextMap.get("MONGODB_HOST");
            }if (parentContextMap.containsKey("MONGODB_DB")) {
                context.MONGODB_DB = (String) parentContextMap.get("MONGODB_DB");
            }if (parentContextMap.containsKey("MONGODB_PORT")) {
                context.MONGODB_PORT = (String) parentContextMap.get("MONGODB_PORT");
            }if (parentContextMap.containsKey("MONGODB_USER")) {
                context.MONGODB_USER = (String) parentContextMap.get("MONGODB_USER");
            }if (parentContextMap.containsKey("MONGODB_PASSWORD")) {
                context.MONGODB_PASSWORD = (String) parentContextMap.get("MONGODB_PASSWORD");
            }if (parentContextMap.containsKey("data")) {
                context.data = (String) parentContextMap.get("data");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_order_mkt");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     729507 characters generated by Talend Open Studio for Big Data 
 *     on the 6 de fevereiro de 2025 14:11:14 BRT
 ************************************************************************************************/