// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_pedido_transp_proprio_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: dw_t_pedido_transp_proprio Purpose: <br>
 * Description:  <br>
 * @author talend@talend.com
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_pedido_transp_proprio implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_pedido_transp_proprio";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_pedido_transp_proprio.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_pedido_transp_proprio.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD)
; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
insert_logStruct insert_log = new insert_logStruct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_pedido_transp_proprio_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row4.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row4.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row5 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row5 = new row5Struct();
                                row5.nm_programa = insert_log.nm_programa;
                                row5.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row5.data_termino_execucao = insert_log.data_termino_execucao;
                                row5.mensagem = insert_log.mensagem;
                                row5.uuid = insert_log.uuid;
                                row5.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.nm_programa = row5.nm_programa;
					oneRow_tHashOutput_1.data_inicio_execucao = row5.data_inicio_execucao;
					oneRow_tHashOutput_1.data_termino_execucao = row5.data_termino_execucao;
					oneRow_tHashOutput_1.mensagem = row5.mensagem;
					oneRow_tHashOutput_1.uuid = row5.uuid;
					oneRow_tHashOutput_1.versao = row5.versao;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return false;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return false;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return false;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return false;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public String natureza_operacao;

				public String getNatureza_operacao () {
					return this.natureza_operacao;
				}

				public Boolean natureza_operacaoIsNullable(){
				    return true;
				}
				public Boolean natureza_operacaoIsKey(){
				    return false;
				}
				public Integer natureza_operacaoLength(){
				    return 120;
				}
				public Integer natureza_operacaoPrecision(){
				    return null;
				}
				public String natureza_operacaoDefault(){
				
					return null;
				
				}
				public String natureza_operacaoComment(){
				
				    return "";
				
				}
				public String natureza_operacaoPattern(){
				
					return "";
				
				}
				public String natureza_operacaoOriginalDbColumnName(){
				
					return "natureza_operacao";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return false;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",natureza_operacao="+natureza_operacao);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_pedido_transp_proprio_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "	\nSELECT VENDA.NUMERO_NOTA , \n	   VENDA.SERIE_NF,\n	   VENDA.TIPO_NOTA,\n	   VENDA.CD_EMPRESA,\n	   UPPER(VENDA.NATUR"
+"EZA_OPERACAO) AS NATUREZA_OPERACAO,\n	   FAT.DATA_ANO ,\n	   FAT.DATA_MES ,\n	   VENDA.DT_VENDA ,\n	   FAT.COD_ITEM ,\n	"
+"   FAT.ITEM ,\n	   FAT.QTD_ITEM ,\n	   FAT.TOTAL_VENDA AS VL_ITEM,\n	   VENDA.VL_NOTA ,\n       VENDA.FRETE_CLIENTE ,\n	"
+"   VENDA.FRETE_TRANSPORTADORA ,\n	   UPPER(VENDA.UF) AS UF,\n	   UPPER(FAT.CIDADE) AS CIDADE ,\n	   VENDA.CD_TRANSPORTAD"
+"ORA,\n	   UPPER (TRA.NM_TRANSPORTADORA ) AS NM_TRANSPORTADORA \n FROM DW_T_FATO_VENDA VENDA\nINNER JOIN VW_FATURAMENTO F"
+"AT ON FAT.NUMERO_NOTA_FISCAL = VENDA.NUMERO_NOTA	AND FAT.EMPRESA = VENDA.CD_EMPRESA	AND FAT.SERIE = VENDA.SERIE_NF	AND F"
+"AT.COD_VENDEDOR = VENDA.CD_VENDEDOR\nLEFT JOIN DW_T_TRANSPORTADORA TRA ON TRA.CD_TRANSPORTADORA =  VENDA.CD_TRANSPORTADO"
+"RA::INT\nWHERE VENDA.CD_TRANSPORTADORA =  '10001'\n  AND FAT.TOTAL_VENDA >= 0\n AND  VENDA.DT_VENDA >= current_date -1\n"
+"";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.numero_nota = null;
							} else {
	                         		
        	row1.numero_nota = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.serie_nf = null;
							} else {
	                         		
        	row1.serie_nf = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.tipo_nota = null;
							} else {
	                         		
        	row1.tipo_nota = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.cd_empresa = null;
							} else {
	                         		
        	row1.cd_empresa = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.natureza_operacao = null;
							} else {
	                         		
        	row1.natureza_operacao = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.data_ano = null;
							} else {
		                          
            row1.data_ano = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    row1.data_ano = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.data_mes = null;
							} else {
		                          
            row1.data_mes = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.data_mes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.dt_venda = null;
							} else {
										
			row1.dt_venda = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 8);
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.cod_item = null;
							} else {
	                         		
        	row1.cod_item = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.item = null;
							} else {
	                         		
        	row1.item = routines.system.JDBCUtil.getString(rs_tDBInput_1, 10, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.qtd_item = null;
							} else {
		                          
            row1.qtd_item = rs_tDBInput_1.getBigDecimal(11);
            if(rs_tDBInput_1.wasNull()){
                    row1.qtd_item = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.vl_item = null;
							} else {
		                          
            row1.vl_item = rs_tDBInput_1.getBigDecimal(12);
            if(rs_tDBInput_1.wasNull()){
                    row1.vl_item = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.vl_nota = null;
							} else {
		                          
            row1.vl_nota = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.vl_nota = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.frete_cliente = null;
							} else {
		                          
            row1.frete_cliente = rs_tDBInput_1.getBigDecimal(14);
            if(rs_tDBInput_1.wasNull()){
                    row1.frete_cliente = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.frete_transportadora = null;
							} else {
		                          
            row1.frete_transportadora = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.frete_transportadora = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.uf = null;
							} else {
	                         		
        	row1.uf = routines.system.JDBCUtil.getString(rs_tDBInput_1, 16, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.cidade = null;
							} else {
	                         		
        	row1.cidade = routines.system.JDBCUtil.getString(rs_tDBInput_1, 17, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.cd_transportadora = null;
							} else {
	                         		
        	row1.cd_transportadora = routines.system.JDBCUtil.getString(rs_tDBInput_1, 18, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.nm_transportadora = null;
							} else {
	                         		
        	row1.nm_transportadora = routines.system.JDBCUtil.getString(rs_tDBInput_1, 19, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



    
		row1Struct oneRow_tHashOutput_2 = new row1Struct();
				
					oneRow_tHashOutput_2.numero_nota = row1.numero_nota;
					oneRow_tHashOutput_2.serie_nf = row1.serie_nf;
					oneRow_tHashOutput_2.tipo_nota = row1.tipo_nota;
					oneRow_tHashOutput_2.cd_empresa = row1.cd_empresa;
					oneRow_tHashOutput_2.natureza_operacao = row1.natureza_operacao;
					oneRow_tHashOutput_2.data_ano = row1.data_ano;
					oneRow_tHashOutput_2.data_mes = row1.data_mes;
					oneRow_tHashOutput_2.dt_venda = row1.dt_venda;
					oneRow_tHashOutput_2.cod_item = row1.cod_item;
					oneRow_tHashOutput_2.item = row1.item;
					oneRow_tHashOutput_2.qtd_item = row1.qtd_item;
					oneRow_tHashOutput_2.vl_item = row1.vl_item;
					oneRow_tHashOutput_2.vl_nota = row1.vl_nota;
					oneRow_tHashOutput_2.frete_cliente = row1.frete_cliente;
					oneRow_tHashOutput_2.frete_transportadora = row1.frete_transportadora;
					oneRow_tHashOutput_2.uf = row1.uf;
					oneRow_tHashOutput_2.cidade = row1.cidade;
					oneRow_tHashOutput_2.cd_transportadora = row1.cd_transportadora;
					oneRow_tHashOutput_2.nm_transportadora = row1.nm_transportadora;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return false;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return false;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return false;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return false;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public String natureza_operacao;

				public String getNatureza_operacao () {
					return this.natureza_operacao;
				}

				public Boolean natureza_operacaoIsNullable(){
				    return true;
				}
				public Boolean natureza_operacaoIsKey(){
				    return false;
				}
				public Integer natureza_operacaoLength(){
				    return 120;
				}
				public Integer natureza_operacaoPrecision(){
				    return null;
				}
				public String natureza_operacaoDefault(){
				
					return null;
				
				}
				public String natureza_operacaoComment(){
				
				    return "";
				
				}
				public String natureza_operacaoPattern(){
				
					return "";
				
				}
				public String natureza_operacaoOriginalDbColumnName(){
				
					return "natureza_operacao";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return false;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",natureza_operacao="+natureza_operacao);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return false;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return false;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return false;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return false;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public String natureza_operacao;

				public String getNatureza_operacao () {
					return this.natureza_operacao;
				}

				public Boolean natureza_operacaoIsNullable(){
				    return true;
				}
				public Boolean natureza_operacaoIsKey(){
				    return false;
				}
				public Integer natureza_operacaoLength(){
				    return 120;
				}
				public Integer natureza_operacaoPrecision(){
				    return null;
				}
				public String natureza_operacaoDefault(){
				
					return null;
				
				}
				public String natureza_operacaoComment(){
				
				    return "";
				
				}
				public String natureza_operacaoPattern(){
				
					return "";
				
				}
				public String natureza_operacaoOriginalDbColumnName(){
				
					return "natureza_operacao";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return false;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",natureza_operacao="+natureza_operacao);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return false;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return false;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return false;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return false;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public String natureza_operacao;

				public String getNatureza_operacao () {
					return this.natureza_operacao;
				}

				public Boolean natureza_operacaoIsNullable(){
				    return true;
				}
				public Boolean natureza_operacaoIsKey(){
				    return false;
				}
				public Integer natureza_operacaoLength(){
				    return 120;
				}
				public Integer natureza_operacaoPrecision(){
				    return null;
				}
				public String natureza_operacaoDefault(){
				
					return null;
				
				}
				public String natureza_operacaoComment(){
				
				    return "";
				
				}
				public String natureza_operacaoPattern(){
				
					return "";
				
				}
				public String natureza_operacaoOriginalDbColumnName(){
				
					return "natureza_operacao";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return false;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",natureza_operacao="+natureza_operacao);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row8Struct row8 = new row8Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String numero_nota;
    				String serie_nf;
    				String tipo_nota;
    				String cd_empresa;
    				String natureza_operacao;
    				Integer data_ano;
    				Integer data_mes;
    				java.util.Date dt_venda;
    				String cod_item;
    				String item;
    				BigDecimal vl_nota;
    				BigDecimal frete_cliente;
    				BigDecimal frete_transportadora;
    				String uf;
    				String cidade;
    				String cd_transportadora;
    				String nm_transportadora;BigDecimal qtd_item_sum;
           			BigDecimal vl_item_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.numero_nota == null) ? 0 : this.numero_nota.hashCode());
							
							result = prime * result + ((this.serie_nf == null) ? 0 : this.serie_nf.hashCode());
							
							result = prime * result + ((this.tipo_nota == null) ? 0 : this.tipo_nota.hashCode());
							
							result = prime * result + ((this.cd_empresa == null) ? 0 : this.cd_empresa.hashCode());
							
							result = prime * result + ((this.natureza_operacao == null) ? 0 : this.natureza_operacao.hashCode());
							
							result = prime * result + ((this.data_ano == null) ? 0 : this.data_ano.hashCode());
							
							result = prime * result + ((this.data_mes == null) ? 0 : this.data_mes.hashCode());
							
							result = prime * result + ((this.dt_venda == null) ? 0 : this.dt_venda.hashCode());
							
							result = prime * result + ((this.cod_item == null) ? 0 : this.cod_item.hashCode());
							
							result = prime * result + ((this.item == null) ? 0 : this.item.hashCode());
							
							result = prime * result + ((this.vl_nota == null) ? 0 : this.vl_nota.hashCode());
							
							result = prime * result + ((this.frete_cliente == null) ? 0 : this.frete_cliente.hashCode());
							
							result = prime * result + ((this.frete_transportadora == null) ? 0 : this.frete_transportadora.hashCode());
							
							result = prime * result + ((this.uf == null) ? 0 : this.uf.hashCode());
							
							result = prime * result + ((this.cidade == null) ? 0 : this.cidade.hashCode());
							
							result = prime * result + ((this.cd_transportadora == null) ? 0 : this.cd_transportadora.hashCode());
							
							result = prime * result + ((this.nm_transportadora == null) ? 0 : this.nm_transportadora.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.numero_nota == null) {
								if (other.numero_nota != null) 
									return false;
							} else if (!this.numero_nota.equals(other.numero_nota)) 
								return false;
						
							if (this.serie_nf == null) {
								if (other.serie_nf != null) 
									return false;
							} else if (!this.serie_nf.equals(other.serie_nf)) 
								return false;
						
							if (this.tipo_nota == null) {
								if (other.tipo_nota != null) 
									return false;
							} else if (!this.tipo_nota.equals(other.tipo_nota)) 
								return false;
						
							if (this.cd_empresa == null) {
								if (other.cd_empresa != null) 
									return false;
							} else if (!this.cd_empresa.equals(other.cd_empresa)) 
								return false;
						
							if (this.natureza_operacao == null) {
								if (other.natureza_operacao != null) 
									return false;
							} else if (!this.natureza_operacao.equals(other.natureza_operacao)) 
								return false;
						
							if (this.data_ano == null) {
								if (other.data_ano != null) 
									return false;
							} else if (!this.data_ano.equals(other.data_ano)) 
								return false;
						
							if (this.data_mes == null) {
								if (other.data_mes != null) 
									return false;
							} else if (!this.data_mes.equals(other.data_mes)) 
								return false;
						
							if (this.dt_venda == null) {
								if (other.dt_venda != null) 
									return false;
							} else if (!this.dt_venda.equals(other.dt_venda)) 
								return false;
						
							if (this.cod_item == null) {
								if (other.cod_item != null) 
									return false;
							} else if (!this.cod_item.equals(other.cod_item)) 
								return false;
						
							if (this.item == null) {
								if (other.item != null) 
									return false;
							} else if (!this.item.equals(other.item)) 
								return false;
						
							if (this.vl_nota == null) {
								if (other.vl_nota != null) 
									return false;
							} else if (!this.vl_nota.equals(other.vl_nota)) 
								return false;
						
							if (this.frete_cliente == null) {
								if (other.frete_cliente != null) 
									return false;
							} else if (!this.frete_cliente.equals(other.frete_cliente)) 
								return false;
						
							if (this.frete_transportadora == null) {
								if (other.frete_transportadora != null) 
									return false;
							} else if (!this.frete_transportadora.equals(other.frete_transportadora)) 
								return false;
						
							if (this.uf == null) {
								if (other.uf != null) 
									return false;
							} else if (!this.uf.equals(other.uf)) 
								return false;
						
							if (this.cidade == null) {
								if (other.cidade != null) 
									return false;
							} else if (!this.cidade.equals(other.cidade)) 
								return false;
						
							if (this.cd_transportadora == null) {
								if (other.cd_transportadora != null) 
									return false;
							} else if (!this.cd_transportadora.equals(other.cd_transportadora)) 
								return false;
						
							if (this.nm_transportadora == null) {
								if (other.nm_transportadora != null) 
									return false;
							} else if (!this.nm_transportadora.equals(other.nm_transportadora)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row1Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row1Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row1Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row3.numero_nota = next_tHashInput_2.numero_nota;
	row3.serie_nf = next_tHashInput_2.serie_nf;
	row3.tipo_nota = next_tHashInput_2.tipo_nota;
	row3.cd_empresa = next_tHashInput_2.cd_empresa;
	row3.natureza_operacao = next_tHashInput_2.natureza_operacao;
	row3.data_ano = next_tHashInput_2.data_ano;
	row3.data_mes = next_tHashInput_2.data_mes;
	row3.dt_venda = next_tHashInput_2.dt_venda;
	row3.cod_item = next_tHashInput_2.cod_item;
	row3.item = next_tHashInput_2.item;
	row3.qtd_item = next_tHashInput_2.qtd_item;
	row3.vl_item = next_tHashInput_2.vl_item;
	row3.vl_nota = next_tHashInput_2.vl_nota;
	row3.frete_cliente = next_tHashInput_2.frete_cliente;
	row3.frete_transportadora = next_tHashInput_2.frete_transportadora;
	row3.uf = next_tHashInput_2.uf;
	row3.cidade = next_tHashInput_2.cidade;
	row3.cd_transportadora = next_tHashInput_2.cd_transportadora;
	row3.nm_transportadora = next_tHashInput_2.nm_transportadora;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.numero_nota = row3.numero_nota;
			operation_finder_tAggregateRow_1.serie_nf = row3.serie_nf;
			operation_finder_tAggregateRow_1.tipo_nota = row3.tipo_nota;
			operation_finder_tAggregateRow_1.cd_empresa = row3.cd_empresa;
			operation_finder_tAggregateRow_1.natureza_operacao = row3.natureza_operacao;
			operation_finder_tAggregateRow_1.data_ano = row3.data_ano;
			operation_finder_tAggregateRow_1.data_mes = row3.data_mes;
			operation_finder_tAggregateRow_1.dt_venda = row3.dt_venda;
			operation_finder_tAggregateRow_1.cod_item = row3.cod_item;
			operation_finder_tAggregateRow_1.item = row3.item;
			operation_finder_tAggregateRow_1.vl_nota = row3.vl_nota;
			operation_finder_tAggregateRow_1.frete_cliente = row3.frete_cliente;
			operation_finder_tAggregateRow_1.frete_transportadora = row3.frete_transportadora;
			operation_finder_tAggregateRow_1.uf = row3.uf;
			operation_finder_tAggregateRow_1.cidade = row3.cidade;
			operation_finder_tAggregateRow_1.cd_transportadora = row3.cd_transportadora;
			operation_finder_tAggregateRow_1.nm_transportadora = row3.nm_transportadora;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.numero_nota = operation_finder_tAggregateRow_1.numero_nota;
				operation_result_tAggregateRow_1.serie_nf = operation_finder_tAggregateRow_1.serie_nf;
				operation_result_tAggregateRow_1.tipo_nota = operation_finder_tAggregateRow_1.tipo_nota;
				operation_result_tAggregateRow_1.cd_empresa = operation_finder_tAggregateRow_1.cd_empresa;
				operation_result_tAggregateRow_1.natureza_operacao = operation_finder_tAggregateRow_1.natureza_operacao;
				operation_result_tAggregateRow_1.data_ano = operation_finder_tAggregateRow_1.data_ano;
				operation_result_tAggregateRow_1.data_mes = operation_finder_tAggregateRow_1.data_mes;
				operation_result_tAggregateRow_1.dt_venda = operation_finder_tAggregateRow_1.dt_venda;
				operation_result_tAggregateRow_1.cod_item = operation_finder_tAggregateRow_1.cod_item;
				operation_result_tAggregateRow_1.item = operation_finder_tAggregateRow_1.item;
				operation_result_tAggregateRow_1.vl_nota = operation_finder_tAggregateRow_1.vl_nota;
				operation_result_tAggregateRow_1.frete_cliente = operation_finder_tAggregateRow_1.frete_cliente;
				operation_result_tAggregateRow_1.frete_transportadora = operation_finder_tAggregateRow_1.frete_transportadora;
				operation_result_tAggregateRow_1.uf = operation_finder_tAggregateRow_1.uf;
				operation_result_tAggregateRow_1.cidade = operation_finder_tAggregateRow_1.cidade;
				operation_result_tAggregateRow_1.cd_transportadora = operation_finder_tAggregateRow_1.cd_transportadora;
				operation_result_tAggregateRow_1.nm_transportadora = operation_finder_tAggregateRow_1.nm_transportadora;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.qtd_item_sum == null) {
						operation_result_tAggregateRow_1.qtd_item_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_1.qtd_item_sum = operation_result_tAggregateRow_1.qtd_item_sum.add(
						new BigDecimal(
							String.valueOf(
								row3.qtd_item
							)
						)
					);
					
					if(operation_result_tAggregateRow_1.vl_item_sum == null) {
						operation_result_tAggregateRow_1.vl_item_sum = new BigDecimal(0).setScale(2);
					}
					operation_result_tAggregateRow_1.vl_item_sum = operation_result_tAggregateRow_1.vl_item_sum.add(
						new BigDecimal(
							String.valueOf(
								row3.vl_item
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_dw_t_pedido_transp_proprio_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row8.numero_nota = aggregated_row_tAggregateRow_1.numero_nota;
            				    
            				    row8.serie_nf = aggregated_row_tAggregateRow_1.serie_nf;
            				    
            				    row8.tipo_nota = aggregated_row_tAggregateRow_1.tipo_nota;
            				    
            				    row8.cd_empresa = aggregated_row_tAggregateRow_1.cd_empresa;
            				    
            				    row8.natureza_operacao = aggregated_row_tAggregateRow_1.natureza_operacao;
            				    
            				    row8.data_ano = aggregated_row_tAggregateRow_1.data_ano;
            				    
            				    row8.data_mes = aggregated_row_tAggregateRow_1.data_mes;
            				    
            				    row8.dt_venda = aggregated_row_tAggregateRow_1.dt_venda;
            				    
            				    row8.cod_item = aggregated_row_tAggregateRow_1.cod_item;
            				    
            				    row8.item = aggregated_row_tAggregateRow_1.item;
            				    row8.qtd_item = aggregated_row_tAggregateRow_1.qtd_item_sum;
                                	row8.vl_item = aggregated_row_tAggregateRow_1.vl_item_sum;
                                	
            				    row8.vl_nota = aggregated_row_tAggregateRow_1.vl_nota;
            				    
            				    row8.frete_cliente = aggregated_row_tAggregateRow_1.frete_cliente;
            				    
            				    row8.frete_transportadora = aggregated_row_tAggregateRow_1.frete_transportadora;
            				    
            				    row8.uf = aggregated_row_tAggregateRow_1.uf;
            				    
            				    row8.cidade = aggregated_row_tAggregateRow_1.cidade;
            				    
            				    row8.cd_transportadora = aggregated_row_tAggregateRow_1.cd_transportadora;
            				    
            				    row8.nm_transportadora = aggregated_row_tAggregateRow_1.nm_transportadora;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					



    
		row8Struct oneRow_tHashOutput_3 = new row8Struct();
				
					oneRow_tHashOutput_3.numero_nota = row8.numero_nota;
					oneRow_tHashOutput_3.serie_nf = row8.serie_nf;
					oneRow_tHashOutput_3.tipo_nota = row8.tipo_nota;
					oneRow_tHashOutput_3.cd_empresa = row8.cd_empresa;
					oneRow_tHashOutput_3.natureza_operacao = row8.natureza_operacao;
					oneRow_tHashOutput_3.data_ano = row8.data_ano;
					oneRow_tHashOutput_3.data_mes = row8.data_mes;
					oneRow_tHashOutput_3.dt_venda = row8.dt_venda;
					oneRow_tHashOutput_3.cod_item = row8.cod_item;
					oneRow_tHashOutput_3.item = row8.item;
					oneRow_tHashOutput_3.qtd_item = row8.qtd_item;
					oneRow_tHashOutput_3.vl_item = row8.vl_item;
					oneRow_tHashOutput_3.vl_nota = row8.vl_nota;
					oneRow_tHashOutput_3.frete_cliente = row8.frete_cliente;
					oneRow_tHashOutput_3.frete_transportadora = row8.frete_transportadora;
					oneRow_tHashOutput_3.uf = row8.uf;
					oneRow_tHashOutput_3.cidade = row8.cidade;
					oneRow_tHashOutput_3.cd_transportadora = row8.cd_transportadora;
					oneRow_tHashOutput_3.nm_transportadora = row8.nm_transportadora;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class insertStruct implements routines.system.IPersistableRow<insertStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return true;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return true;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return true;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return true;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return true;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return true;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.numero_nota == null) ? 0 : this.numero_nota.hashCode());
					
						result = prime * result + ((this.serie_nf == null) ? 0 : this.serie_nf.hashCode());
					
						result = prime * result + ((this.tipo_nota == null) ? 0 : this.tipo_nota.hashCode());
					
						result = prime * result + ((this.cd_empresa == null) ? 0 : this.cd_empresa.hashCode());
					
						result = prime * result + ((this.data_mes == null) ? 0 : this.data_mes.hashCode());
					
						result = prime * result + ((this.cod_item == null) ? 0 : this.cod_item.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final insertStruct other = (insertStruct) obj;
		
						if (this.numero_nota == null) {
							if (other.numero_nota != null)
								return false;
						
						} else if (!this.numero_nota.equals(other.numero_nota))
						
							return false;
					
						if (this.serie_nf == null) {
							if (other.serie_nf != null)
								return false;
						
						} else if (!this.serie_nf.equals(other.serie_nf))
						
							return false;
					
						if (this.tipo_nota == null) {
							if (other.tipo_nota != null)
								return false;
						
						} else if (!this.tipo_nota.equals(other.tipo_nota))
						
							return false;
					
						if (this.cd_empresa == null) {
							if (other.cd_empresa != null)
								return false;
						
						} else if (!this.cd_empresa.equals(other.cd_empresa))
						
							return false;
					
						if (this.data_mes == null) {
							if (other.data_mes != null)
								return false;
						
						} else if (!this.data_mes.equals(other.data_mes))
						
							return false;
					
						if (this.cod_item == null) {
							if (other.cod_item != null)
								return false;
						
						} else if (!this.cod_item.equals(other.cod_item))
						
							return false;
					

		return true;
    }

	public void copyDataTo(insertStruct other) {

		other.numero_nota = this.numero_nota;
	            other.serie_nf = this.serie_nf;
	            other.tipo_nota = this.tipo_nota;
	            other.cd_empresa = this.cd_empresa;
	            other.data_ano = this.data_ano;
	            other.data_mes = this.data_mes;
	            other.dt_venda = this.dt_venda;
	            other.cod_item = this.cod_item;
	            other.item = this.item;
	            other.qtd_item = this.qtd_item;
	            other.vl_item = this.vl_item;
	            other.vl_nota = this.vl_nota;
	            other.frete_cliente = this.frete_cliente;
	            other.frete_transportadora = this.frete_transportadora;
	            other.uf = this.uf;
	            other.cidade = this.cidade;
	            other.cd_transportadora = this.cd_transportadora;
	            other.nm_transportadora = this.nm_transportadora;
	            
	}

	public void copyKeysDataTo(insertStruct other) {

		other.numero_nota = this.numero_nota;
	            	other.serie_nf = this.serie_nf;
	            	other.tipo_nota = this.tipo_nota;
	            	other.cd_empresa = this.cd_empresa;
	            	other.data_mes = this.data_mes;
	            	other.cod_item = this.cod_item;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.numero_nota, other.numero_nota);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.serie_nf, other.serie_nf);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.tipo_nota, other.tipo_nota);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_empresa, other.cd_empresa);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.data_mes, other.data_mes);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cod_item, other.cod_item);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String numero_nota;

				public String getNumero_nota () {
					return this.numero_nota;
				}

				public Boolean numero_notaIsNullable(){
				    return true;
				}
				public Boolean numero_notaIsKey(){
				    return false;
				}
				public Integer numero_notaLength(){
				    return 12;
				}
				public Integer numero_notaPrecision(){
				    return null;
				}
				public String numero_notaDefault(){
				
					return null;
				
				}
				public String numero_notaComment(){
				
				    return "";
				
				}
				public String numero_notaPattern(){
				
					return "";
				
				}
				public String numero_notaOriginalDbColumnName(){
				
					return "numero_nota";
				
				}

				
			    public String serie_nf;

				public String getSerie_nf () {
					return this.serie_nf;
				}

				public Boolean serie_nfIsNullable(){
				    return true;
				}
				public Boolean serie_nfIsKey(){
				    return false;
				}
				public Integer serie_nfLength(){
				    return 3;
				}
				public Integer serie_nfPrecision(){
				    return null;
				}
				public String serie_nfDefault(){
				
					return null;
				
				}
				public String serie_nfComment(){
				
				    return "";
				
				}
				public String serie_nfPattern(){
				
					return "";
				
				}
				public String serie_nfOriginalDbColumnName(){
				
					return "serie_nf";
				
				}

				
			    public String tipo_nota;

				public String getTipo_nota () {
					return this.tipo_nota;
				}

				public Boolean tipo_notaIsNullable(){
				    return true;
				}
				public Boolean tipo_notaIsKey(){
				    return false;
				}
				public Integer tipo_notaLength(){
				    return 3;
				}
				public Integer tipo_notaPrecision(){
				    return null;
				}
				public String tipo_notaDefault(){
				
					return null;
				
				}
				public String tipo_notaComment(){
				
				    return "";
				
				}
				public String tipo_notaPattern(){
				
					return "";
				
				}
				public String tipo_notaOriginalDbColumnName(){
				
					return "tipo_nota";
				
				}

				
			    public String cd_empresa;

				public String getCd_empresa () {
					return this.cd_empresa;
				}

				public Boolean cd_empresaIsNullable(){
				    return true;
				}
				public Boolean cd_empresaIsKey(){
				    return false;
				}
				public Integer cd_empresaLength(){
				    return 3;
				}
				public Integer cd_empresaPrecision(){
				    return null;
				}
				public String cd_empresaDefault(){
				
					return null;
				
				}
				public String cd_empresaComment(){
				
				    return "";
				
				}
				public String cd_empresaPattern(){
				
					return "";
				
				}
				public String cd_empresaOriginalDbColumnName(){
				
					return "cd_empresa";
				
				}

				
			    public String natureza_operacao;

				public String getNatureza_operacao () {
					return this.natureza_operacao;
				}

				public Boolean natureza_operacaoIsNullable(){
				    return true;
				}
				public Boolean natureza_operacaoIsKey(){
				    return false;
				}
				public Integer natureza_operacaoLength(){
				    return 120;
				}
				public Integer natureza_operacaoPrecision(){
				    return null;
				}
				public String natureza_operacaoDefault(){
				
					return null;
				
				}
				public String natureza_operacaoComment(){
				
				    return "";
				
				}
				public String natureza_operacaoPattern(){
				
					return "";
				
				}
				public String natureza_operacaoOriginalDbColumnName(){
				
					return "natureza_operacao";
				
				}

				
			    public Integer data_ano;

				public Integer getData_ano () {
					return this.data_ano;
				}

				public Boolean data_anoIsNullable(){
				    return true;
				}
				public Boolean data_anoIsKey(){
				    return false;
				}
				public Integer data_anoLength(){
				    return null;
				}
				public Integer data_anoPrecision(){
				    return null;
				}
				public String data_anoDefault(){
				
					return null;
				
				}
				public String data_anoComment(){
				
				    return "";
				
				}
				public String data_anoPattern(){
				
					return "";
				
				}
				public String data_anoOriginalDbColumnName(){
				
					return "data_ano";
				
				}

				
			    public Integer data_mes;

				public Integer getData_mes () {
					return this.data_mes;
				}

				public Boolean data_mesIsNullable(){
				    return true;
				}
				public Boolean data_mesIsKey(){
				    return false;
				}
				public Integer data_mesLength(){
				    return null;
				}
				public Integer data_mesPrecision(){
				    return null;
				}
				public String data_mesDefault(){
				
					return null;
				
				}
				public String data_mesComment(){
				
				    return "";
				
				}
				public String data_mesPattern(){
				
					return "";
				
				}
				public String data_mesOriginalDbColumnName(){
				
					return "data_mes";
				
				}

				
			    public java.util.Date dt_venda;

				public java.util.Date getDt_venda () {
					return this.dt_venda;
				}

				public Boolean dt_vendaIsNullable(){
				    return true;
				}
				public Boolean dt_vendaIsKey(){
				    return false;
				}
				public Integer dt_vendaLength(){
				    return null;
				}
				public Integer dt_vendaPrecision(){
				    return null;
				}
				public String dt_vendaDefault(){
				
					return null;
				
				}
				public String dt_vendaComment(){
				
				    return "";
				
				}
				public String dt_vendaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String dt_vendaOriginalDbColumnName(){
				
					return "dt_venda";
				
				}

				
			    public String cod_item;

				public String getCod_item () {
					return this.cod_item;
				}

				public Boolean cod_itemIsNullable(){
				    return true;
				}
				public Boolean cod_itemIsKey(){
				    return false;
				}
				public Integer cod_itemLength(){
				    return 8;
				}
				public Integer cod_itemPrecision(){
				    return null;
				}
				public String cod_itemDefault(){
				
					return null;
				
				}
				public String cod_itemComment(){
				
				    return "";
				
				}
				public String cod_itemPattern(){
				
					return "";
				
				}
				public String cod_itemOriginalDbColumnName(){
				
					return "cod_item";
				
				}

				
			    public String item;

				public String getItem () {
					return this.item;
				}

				public Boolean itemIsNullable(){
				    return true;
				}
				public Boolean itemIsKey(){
				    return false;
				}
				public Integer itemLength(){
				    return 200;
				}
				public Integer itemPrecision(){
				    return null;
				}
				public String itemDefault(){
				
					return null;
				
				}
				public String itemComment(){
				
				    return "";
				
				}
				public String itemPattern(){
				
					return "";
				
				}
				public String itemOriginalDbColumnName(){
				
					return "item";
				
				}

				
			    public BigDecimal qtd_item;

				public BigDecimal getQtd_item () {
					return this.qtd_item;
				}

				public Boolean qtd_itemIsNullable(){
				    return true;
				}
				public Boolean qtd_itemIsKey(){
				    return false;
				}
				public Integer qtd_itemLength(){
				    return 13;
				}
				public Integer qtd_itemPrecision(){
				    return 4;
				}
				public String qtd_itemDefault(){
				
					return null;
				
				}
				public String qtd_itemComment(){
				
				    return "";
				
				}
				public String qtd_itemPattern(){
				
					return "";
				
				}
				public String qtd_itemOriginalDbColumnName(){
				
					return "qtd_item";
				
				}

				
			    public BigDecimal vl_item;

				public BigDecimal getVl_item () {
					return this.vl_item;
				}

				public Boolean vl_itemIsNullable(){
				    return true;
				}
				public Boolean vl_itemIsKey(){
				    return false;
				}
				public Integer vl_itemLength(){
				    return 14;
				}
				public Integer vl_itemPrecision(){
				    return 2;
				}
				public String vl_itemDefault(){
				
					return null;
				
				}
				public String vl_itemComment(){
				
				    return "";
				
				}
				public String vl_itemPattern(){
				
					return "";
				
				}
				public String vl_itemOriginalDbColumnName(){
				
					return "vl_item";
				
				}

				
			    public BigDecimal vl_nota;

				public BigDecimal getVl_nota () {
					return this.vl_nota;
				}

				public Boolean vl_notaIsNullable(){
				    return true;
				}
				public Boolean vl_notaIsKey(){
				    return false;
				}
				public Integer vl_notaLength(){
				    return 12;
				}
				public Integer vl_notaPrecision(){
				    return 2;
				}
				public String vl_notaDefault(){
				
					return null;
				
				}
				public String vl_notaComment(){
				
				    return "";
				
				}
				public String vl_notaPattern(){
				
					return "";
				
				}
				public String vl_notaOriginalDbColumnName(){
				
					return "vl_nota";
				
				}

				
			    public BigDecimal frete_cliente;

				public BigDecimal getFrete_cliente () {
					return this.frete_cliente;
				}

				public Boolean frete_clienteIsNullable(){
				    return true;
				}
				public Boolean frete_clienteIsKey(){
				    return false;
				}
				public Integer frete_clienteLength(){
				    return 12;
				}
				public Integer frete_clientePrecision(){
				    return 2;
				}
				public String frete_clienteDefault(){
				
					return null;
				
				}
				public String frete_clienteComment(){
				
				    return "";
				
				}
				public String frete_clientePattern(){
				
					return "";
				
				}
				public String frete_clienteOriginalDbColumnName(){
				
					return "frete_cliente";
				
				}

				
			    public BigDecimal frete_transportadora;

				public BigDecimal getFrete_transportadora () {
					return this.frete_transportadora;
				}

				public Boolean frete_transportadoraIsNullable(){
				    return true;
				}
				public Boolean frete_transportadoraIsKey(){
				    return false;
				}
				public Integer frete_transportadoraLength(){
				    return 12;
				}
				public Integer frete_transportadoraPrecision(){
				    return 2;
				}
				public String frete_transportadoraDefault(){
				
					return null;
				
				}
				public String frete_transportadoraComment(){
				
				    return "";
				
				}
				public String frete_transportadoraPattern(){
				
					return "";
				
				}
				public String frete_transportadoraOriginalDbColumnName(){
				
					return "frete_transportadora";
				
				}

				
			    public String uf;

				public String getUf () {
					return this.uf;
				}

				public Boolean ufIsNullable(){
				    return true;
				}
				public Boolean ufIsKey(){
				    return false;
				}
				public Integer ufLength(){
				    return 2;
				}
				public Integer ufPrecision(){
				    return null;
				}
				public String ufDefault(){
				
					return null;
				
				}
				public String ufComment(){
				
				    return "";
				
				}
				public String ufPattern(){
				
					return "";
				
				}
				public String ufOriginalDbColumnName(){
				
					return "uf";
				
				}

				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}

				public Boolean cidadeIsNullable(){
				    return true;
				}
				public Boolean cidadeIsKey(){
				    return false;
				}
				public Integer cidadeLength(){
				    return 80;
				}
				public Integer cidadePrecision(){
				    return null;
				}
				public String cidadeDefault(){
				
					return null;
				
				}
				public String cidadeComment(){
				
				    return "";
				
				}
				public String cidadePattern(){
				
					return "";
				
				}
				public String cidadeOriginalDbColumnName(){
				
					return "cidade";
				
				}

				
			    public String cd_transportadora;

				public String getCd_transportadora () {
					return this.cd_transportadora;
				}

				public Boolean cd_transportadoraIsNullable(){
				    return true;
				}
				public Boolean cd_transportadoraIsKey(){
				    return false;
				}
				public Integer cd_transportadoraLength(){
				    return 8;
				}
				public Integer cd_transportadoraPrecision(){
				    return null;
				}
				public String cd_transportadoraDefault(){
				
					return null;
				
				}
				public String cd_transportadoraComment(){
				
				    return "";
				
				}
				public String cd_transportadoraPattern(){
				
					return "";
				
				}
				public String cd_transportadoraOriginalDbColumnName(){
				
					return "cd_transportadora";
				
				}

				
			    public String nm_transportadora;

				public String getNm_transportadora () {
					return this.nm_transportadora;
				}

				public Boolean nm_transportadoraIsNullable(){
				    return true;
				}
				public Boolean nm_transportadoraIsKey(){
				    return false;
				}
				public Integer nm_transportadoraLength(){
				    return 120;
				}
				public Integer nm_transportadoraPrecision(){
				    return null;
				}
				public String nm_transportadoraDefault(){
				
					return null;
				
				}
				public String nm_transportadoraComment(){
				
				    return "";
				
				}
				public String nm_transportadoraPattern(){
				
					return "";
				
				}
				public String nm_transportadoraOriginalDbColumnName(){
				
					return "nm_transportadora";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.numero_nota = readString(dis);
					
					this.serie_nf = readString(dis);
					
					this.tipo_nota = readString(dis);
					
					this.cd_empresa = readString(dis);
					
					this.natureza_operacao = readString(dis);
					
						this.data_ano = readInteger(dis);
					
						this.data_mes = readInteger(dis);
					
					this.dt_venda = readDate(dis);
					
					this.cod_item = readString(dis);
					
					this.item = readString(dis);
					
						this.qtd_item = (BigDecimal) dis.readObject();
					
						this.vl_item = (BigDecimal) dis.readObject();
					
						this.vl_nota = (BigDecimal) dis.readObject();
					
						this.frete_cliente = (BigDecimal) dis.readObject();
					
						this.frete_transportadora = (BigDecimal) dis.readObject();
					
					this.uf = readString(dis);
					
					this.cidade = readString(dis);
					
					this.cd_transportadora = readString(dis);
					
					this.nm_transportadora = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_item);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
       			    	dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.numero_nota,dos);
					
					// String
				
						writeString(this.serie_nf,dos);
					
					// String
				
						writeString(this.tipo_nota,dos);
					
					// String
				
						writeString(this.cd_empresa,dos);
					
					// String
				
						writeString(this.natureza_operacao,dos);
					
					// Integer
				
						writeInteger(this.data_ano,dos);
					
					// Integer
				
						writeInteger(this.data_mes,dos);
					
					// java.util.Date
				
						writeDate(this.dt_venda,dos);
					
					// String
				
						writeString(this.cod_item,dos);
					
					// String
				
						writeString(this.item,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.qtd_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_item);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_nota);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_cliente);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.frete_transportadora);
					
					// String
				
						writeString(this.uf,dos);
					
					// String
				
						writeString(this.cidade,dos);
					
					// String
				
						writeString(this.cd_transportadora,dos);
					
					// String
				
						writeString(this.nm_transportadora,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("numero_nota="+numero_nota);
		sb.append(",serie_nf="+serie_nf);
		sb.append(",tipo_nota="+tipo_nota);
		sb.append(",cd_empresa="+cd_empresa);
		sb.append(",natureza_operacao="+natureza_operacao);
		sb.append(",data_ano="+String.valueOf(data_ano));
		sb.append(",data_mes="+String.valueOf(data_mes));
		sb.append(",dt_venda="+String.valueOf(dt_venda));
		sb.append(",cod_item="+cod_item);
		sb.append(",item="+item);
		sb.append(",qtd_item="+String.valueOf(qtd_item));
		sb.append(",vl_item="+String.valueOf(vl_item));
		sb.append(",vl_nota="+String.valueOf(vl_nota));
		sb.append(",frete_cliente="+String.valueOf(frete_cliente));
		sb.append(",frete_transportadora="+String.valueOf(frete_transportadora));
		sb.append(",uf="+uf);
		sb.append(",cidade="+cidade);
		sb.append(",cd_transportadora="+cd_transportadora);
		sb.append(",nm_transportadora="+nm_transportadora);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
insertStruct insert = new insertStruct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_t_pedido_transp_proprio");
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_t_pedido_transp_proprio");
}

        int updateKeyCount_tDBOutput_2 = 6;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 18 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_2 + "\" WHERE \"numero_nota\" = ? AND \"serie_nf\" = ? AND \"tipo_nota\" = ? AND \"cd_empresa\" = ? AND \"data_mes\" = ? AND \"cod_item\" = ?");
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    String insert_tDBOutput_2 = "INSERT INTO \"" + tableName_tDBOutput_2 + "\" (\"numero_nota\",\"serie_nf\",\"tipo_nota\",\"cd_empresa\",\"data_ano\",\"data_mes\",\"dt_venda\",\"cod_item\",\"item\",\"qtd_item\",\"vl_item\",\"vl_nota\",\"frete_cliente\",\"frete_transportadora\",\"uf\",\"cidade\",\"cd_transportadora\",\"nm_transportadora\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"data_ano\" = ?,\"dt_venda\" = ?,\"item\" = ?,\"qtd_item\" = ?,\"vl_item\" = ?,\"vl_nota\" = ?,\"frete_cliente\" = ?,\"frete_transportadora\" = ?,\"uf\" = ?,\"cidade\" = ?,\"cd_transportadora\" = ?,\"nm_transportadora\" = ? WHERE \"numero_nota\" = ? AND \"serie_nf\" = ? AND \"tipo_nota\" = ? AND \"cd_empresa\" = ? AND \"data_mes\" = ? AND \"cod_item\" = ?";
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmtUpdate_tDBOutput_2", pstmtUpdate_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
insertStruct insert_tmp = new insertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row8Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row8Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row8Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row9.numero_nota = next_tHashInput_3.numero_nota;
	row9.serie_nf = next_tHashInput_3.serie_nf;
	row9.tipo_nota = next_tHashInput_3.tipo_nota;
	row9.cd_empresa = next_tHashInput_3.cd_empresa;
	row9.natureza_operacao = next_tHashInput_3.natureza_operacao;
	row9.data_ano = next_tHashInput_3.data_ano;
	row9.data_mes = next_tHashInput_3.data_mes;
	row9.dt_venda = next_tHashInput_3.dt_venda;
	row9.cod_item = next_tHashInput_3.cod_item;
	row9.item = next_tHashInput_3.item;
	row9.qtd_item = next_tHashInput_3.qtd_item;
	row9.vl_item = next_tHashInput_3.vl_item;
	row9.vl_nota = next_tHashInput_3.vl_nota;
	row9.frete_cliente = next_tHashInput_3.frete_cliente;
	row9.frete_transportadora = next_tHashInput_3.frete_transportadora;
	row9.uf = next_tHashInput_3.uf;
	row9.cidade = next_tHashInput_3.cidade;
	row9.cd_transportadora = next_tHashInput_3.cd_transportadora;
	row9.nm_transportadora = next_tHashInput_3.nm_transportadora;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

insert = null;


// # Output table : 'insert'
insert_tmp.numero_nota = row9.numero_nota ;
insert_tmp.serie_nf = row9.serie_nf ;
insert_tmp.tipo_nota = row9.tipo_nota ;
insert_tmp.cd_empresa = row9.cd_empresa ;
insert_tmp.data_ano = row9.data_ano ;
insert_tmp.data_mes = row9.data_mes ;
insert_tmp.dt_venda = row9.dt_venda ;
insert_tmp.cod_item = row9.cod_item ;
insert_tmp.item = row9.item ;
insert_tmp.qtd_item = row9.qtd_item ;
insert_tmp.vl_item = row9.vl_item ;
insert_tmp.vl_nota = row9.vl_nota ;
insert_tmp.frete_cliente = row9.frete_cliente ;
insert_tmp.frete_transportadora = row9.frete_transportadora ;
insert_tmp.uf = row9.uf ;
insert_tmp.cidade = row9.cidade ;
insert_tmp.cd_transportadora = row9.cd_transportadora ;
insert_tmp.nm_transportadora = row9.nm_transportadora ;
insert = insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "insert"
if(insert != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    if(insert.numero_nota == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert.numero_nota);
}

                    if(insert.serie_nf == null) {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(2, insert.serie_nf);
}

                    if(insert.tipo_nota == null) {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(3, insert.tipo_nota);
}

                    if(insert.cd_empresa == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert.cd_empresa);
}

                    if(insert.data_mes == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(5, insert.data_mes);
}

                    if(insert.cod_item == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(6, insert.cod_item);
}

            int checkCount_tDBOutput_2 = -1;
            try (java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery()) {
                while(rs_tDBOutput_2.next()) {
                    checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
                }
            }
            if(checkCount_tDBOutput_2 > 0) {
                        if(insert.data_ano == null) {
pstmtUpdate_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(1, insert.data_ano);
}

                        if(insert.dt_venda != null) {
pstmtUpdate_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert.dt_venda.getTime()));
} else {
pstmtUpdate_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(insert.item == null) {
pstmtUpdate_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(3, insert.item);
}

                        pstmtUpdate_tDBOutput_2.setBigDecimal(4, insert.qtd_item);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(5, insert.vl_item);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(6, insert.vl_nota);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(7, insert.frete_cliente);

                        pstmtUpdate_tDBOutput_2.setBigDecimal(8, insert.frete_transportadora);

                        if(insert.uf == null) {
pstmtUpdate_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(9, insert.uf);
}

                        if(insert.cidade == null) {
pstmtUpdate_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(10, insert.cidade);
}

                        if(insert.cd_transportadora == null) {
pstmtUpdate_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(11, insert.cd_transportadora);
}

                        if(insert.nm_transportadora == null) {
pstmtUpdate_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(12, insert.nm_transportadora);
}

                        if(insert.numero_nota == null) {
pstmtUpdate_tDBOutput_2.setNull(13 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(13 + count_tDBOutput_2, insert.numero_nota);
}

                        if(insert.serie_nf == null) {
pstmtUpdate_tDBOutput_2.setNull(14 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(14 + count_tDBOutput_2, insert.serie_nf);
}

                        if(insert.tipo_nota == null) {
pstmtUpdate_tDBOutput_2.setNull(15 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(15 + count_tDBOutput_2, insert.tipo_nota);
}

                        if(insert.cd_empresa == null) {
pstmtUpdate_tDBOutput_2.setNull(16 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(16 + count_tDBOutput_2, insert.cd_empresa);
}

                        if(insert.data_mes == null) {
pstmtUpdate_tDBOutput_2.setNull(17 + count_tDBOutput_2, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_2.setInt(17 + count_tDBOutput_2, insert.data_mes);
}

                        if(insert.cod_item == null) {
pstmtUpdate_tDBOutput_2.setNull(18 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_2.setString(18 + count_tDBOutput_2, insert.cod_item);
}

                try {
					
                    int processedCount_tDBOutput_2 = pstmtUpdate_tDBOutput_2.executeUpdate();
                    updatedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(insert.numero_nota == null) {
pstmtInsert_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(1, insert.numero_nota);
}

                        if(insert.serie_nf == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, insert.serie_nf);
}

                        if(insert.tipo_nota == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, insert.tipo_nota);
}

                        if(insert.cd_empresa == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, insert.cd_empresa);
}

                        if(insert.data_ano == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(5, insert.data_ano);
}

                        if(insert.data_mes == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(6, insert.data_mes);
}

                        if(insert.dt_venda != null) {
pstmtInsert_tDBOutput_2.setTimestamp(7, new java.sql.Timestamp(insert.dt_venda.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.TIMESTAMP);
}

                        if(insert.cod_item == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(8, insert.cod_item);
}

                        if(insert.item == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(9, insert.item);
}

                        pstmtInsert_tDBOutput_2.setBigDecimal(10, insert.qtd_item);

                        pstmtInsert_tDBOutput_2.setBigDecimal(11, insert.vl_item);

                        pstmtInsert_tDBOutput_2.setBigDecimal(12, insert.vl_nota);

                        pstmtInsert_tDBOutput_2.setBigDecimal(13, insert.frete_cliente);

                        pstmtInsert_tDBOutput_2.setBigDecimal(14, insert.frete_transportadora);

                        if(insert.uf == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, insert.uf);
}

                        if(insert.cidade == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(16, insert.cidade);
}

                        if(insert.cd_transportadora == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(17, insert.cd_transportadora);
}

                        if(insert.nm_transportadora == null) {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(18, insert.nm_transportadora);
}

                try {
					
                    int processedCount_tDBOutput_2 = pstmtInsert_tDBOutput_2.executeUpdate();
                    insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
                    nb_line_tDBOutput_2++;
					
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
					
                    whetherReject_tDBOutput_2 = true;
                        nb_line_tDBOutput_2++;
                            System.err.print(e.getMessage());
                }
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmtUpdate_tDBOutput_2 != null){
            pstmtUpdate_tDBOutput_2.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_2");
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tHashInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_2 = null;
                if ((pstmtUpdateToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_2")) != null) {
                    pstmtUpdateToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_2 = null;
                if ((pstmtInsertToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_2")) != null) {
                    pstmtInsertToClose_tDBOutput_2.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_pedido_transp_proprio) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row6.nm_programa = next_tHashInput_1.nm_programa;
	row6.data_inicio_execucao = next_tHashInput_1.data_inicio_execucao;
	row6.data_termino_execucao = next_tHashInput_1.data_termino_execucao;
	row6.mensagem = next_tHashInput_1.mensagem;
	row6.uuid = next_tHashInput_1.uuid;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row6.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row6.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_pedido_transp_proprio_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_pedido_transp_proprio dw_t_pedido_transp_proprioClass = new dw_t_pedido_transp_proprio();

        int exitCode = dw_t_pedido_transp_proprioClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_pedido_transp_proprio.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_pedido_transp_proprio_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_pedido_transp_proprio.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_pedido_transp_proprio");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     383913 characters generated by Talend Open Studio for Big Data 
 *     on the 20 de maio de 2024 22:36:54 BRT
 ************************************************************************************************/