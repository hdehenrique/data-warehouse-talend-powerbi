// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package palacio_ferramentas.dw_t_mkt_order_service_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	import java.util.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

	//the import part of tJavaRow_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: dw_t_mkt_order_service Purpose: <br>
 * Description:  <br>
 * @author luisll@uol.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class dw_t_mkt_order_service implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(MONGODB_HOST != null){
				
					this.setProperty("MONGODB_HOST", MONGODB_HOST.toString());
				
			}
			
			if(MONGODB_DB != null){
				
					this.setProperty("MONGODB_DB", MONGODB_DB.toString());
				
			}
			
			if(MONGODB_PORT != null){
				
					this.setProperty("MONGODB_PORT", MONGODB_PORT.toString());
				
			}
			
			if(MONGODB_USER != null){
				
					this.setProperty("MONGODB_USER", MONGODB_USER.toString());
				
			}
			
			if(MONGODB_PASSWORD != null){
				
					this.setProperty("MONGODB_PASSWORD", MONGODB_PASSWORD.toString());
				
			}
			
			if(data != null){
				
					this.setProperty("data", data.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String programa;
public String getPrograma(){
	return this.programa;
}
public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String MONGODB_HOST;
public String getMONGODB_HOST(){
	return this.MONGODB_HOST;
}
public String MONGODB_DB;
public String getMONGODB_DB(){
	return this.MONGODB_DB;
}
public String MONGODB_PORT;
public String getMONGODB_PORT(){
	return this.MONGODB_PORT;
}
public String MONGODB_USER;
public String getMONGODB_USER(){
	return this.MONGODB_USER;
}
public String MONGODB_PASSWORD;
public String getMONGODB_PASSWORD(){
	return this.MONGODB_PASSWORD;
}
public String data;
public String getData(){
	return this.data;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "dw_t_mkt_order_service";
	private final String projectName = "PALACIO_FERRAMENTAS";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				dw_t_mkt_order_service.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(dw_t_mkt_order_service.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMongoDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tConvertType_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMongoDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMongoDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMongoDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tMongoDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMongoDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBConnection_1", false);
		start_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBConnection_1";
	
	
		int tos_count_tMongoDBConnection_1 = 0;
		

        java.util.logging.Logger.getLogger("org.mongodb.driver").setLevel(java.util.logging.Level.SEVERE);
        
    

final String applicationName_tMongoDBConnection_1 = "Talend";
    

    // Declarations
    com.mongodb.client.MongoClient mongo_tMongoDBConnection_1=null;
    com.mongodb.client.MongoDatabase db_tMongoDBConnection_1=null;
    List<com.mongodb.ServerAddress> addrs_tMongoDBConnection_1 = new java.util.ArrayList<>();
    com.mongodb.MongoClientSettings.Builder clientSettingsBuilder_tMongoDBConnection_1 = com.mongodb.MongoClientSettings.builder()
    .applicationName(applicationName_tMongoDBConnection_1);
    


                // SSL

                // Client Credentials
                    // Authentication
                    com.mongodb.MongoCredential mongoCredential_tMongoDBConnection_1; 
	final String decryptedPassword_tMongoDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:mlURun+KDN/CIXyqBHb7rlyUOJpmoXXc6NBZmrSrzKpe9VepNf83c/U57Q==");
                        
                            mongoCredential_tMongoDBConnection_1 = com.mongodb.MongoCredential.createScramSha256Credential("order_service", "order_service", new String(decryptedPassword_tMongoDBConnection_1).toCharArray());
                    clientSettingsBuilder_tMongoDBConnection_1.credential(mongoCredential_tMongoDBConnection_1);
                        addrs_tMongoDBConnection_1.add(new com.mongodb.ServerAddress("10.10.0.19", 27017));
                    clientSettingsBuilder_tMongoDBConnection_1.applyToClusterSettings(builder -> builder.hosts(addrs_tMongoDBConnection_1));



    mongo_tMongoDBConnection_1 = com.mongodb.client.MongoClients.create(clientSettingsBuilder_tMongoDBConnection_1.build());
    resourceMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    db_tMongoDBConnection_1 = mongo_tMongoDBConnection_1.getDatabase("order_service");


    globalMap.put("mongo_tMongoDBConnection_1", mongo_tMongoDBConnection_1);
    globalMap.put("db_tMongoDBConnection_1", db_tMongoDBConnection_1);


 



/**
 * [tMongoDBConnection_1 begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 


	tos_count_tMongoDBConnection_1++;

/**
 * [tMongoDBConnection_1 main ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 

ok_Hash.put("tMongoDBConnection_1", true);
end_Hash.put("tMongoDBConnection_1", System.currentTimeMillis());




/**
 * [tMongoDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMongoDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBConnection_1";
	
	

 



/**
 * [tMongoDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


Date dataNova = new Date();
DateFormat formato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS Z");
//formato.setTimeZone(TimeZone.getTimeZone("America/Sao_Paulo"));
String data = formato.format(dataNova.getTime());
context.data = data;
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row79Struct implements routines.system.IPersistableRow<row79Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row79Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row79Struct row79 = new row79Struct();
insert_logStruct insert_log = new insert_logStruct();
row80Struct row80 = new row80Struct();






	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_dw_t_mkt_order_service_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_2=0;
        java.lang.StringBuilder sb_tDBOutput_2 = new java.lang.StringBuilder();
        sb_tDBOutput_2.append("INSERT INTO \"").append(tableName_tDBOutput_2).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_2 = sb_tDBOutput_2.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row79");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row79.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row79"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row79.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row80 = null;
        whetherReject_tDBOutput_2 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_2.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_2.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_2.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_2++;
				
                int processedCount_tDBOutput_2 = pstmt_tDBOutput_2.executeUpdate();
                insertedCount_tDBOutput_2 += processedCount_tDBOutput_2;
                rowsToCommitCount_tDBOutput_2 += processedCount_tDBOutput_2;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_2 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_2) {
                            row80 = new row80Struct();
                                row80.nm_programa = insert_log.nm_programa;
                                row80.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row80.data_termino_execucao = insert_log.data_termino_execucao;
                                row80.mensagem = insert_log.mensagem;
                                row80.uuid = insert_log.uuid;
                                row80.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row80"
if(row80 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					



    
		row80Struct oneRow_tHashOutput_2 = new row80Struct();
				
					oneRow_tHashOutput_2.nm_programa = row80.nm_programa;
					oneRow_tHashOutput_2.data_inicio_execucao = row80.data_inicio_execucao;
					oneRow_tHashOutput_2.data_termino_execucao = row80.data_termino_execucao;
					oneRow_tHashOutput_2.mensagem = row80.mensagem;
					oneRow_tHashOutput_2.uuid = row80.uuid;
					oneRow_tHashOutput_2.versao = row80.versao;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row80"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row79");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String data_processamento;

				public String getData_processamento () {
					return this.data_processamento;
				}

				public Boolean data_processamentoIsNullable(){
				    return true;
				}
				public Boolean data_processamentoIsKey(){
				    return false;
				}
				public Integer data_processamentoLength(){
				    return 2;
				}
				public Integer data_processamentoPrecision(){
				    return null;
				}
				public String data_processamentoDefault(){
				
					return null;
				
				}
				public String data_processamentoComment(){
				
				    return "";
				
				}
				public String data_processamentoPattern(){
				
					return "";
				
				}
				public String data_processamentoOriginalDbColumnName(){
				
					return "data_processamento";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data_processamento="+data_processamento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String data_processamento;

				public String getData_processamento () {
					return this.data_processamento;
				}

				public Boolean data_processamentoIsNullable(){
				    return true;
				}
				public Boolean data_processamentoIsKey(){
				    return false;
				}
				public Integer data_processamentoLength(){
				    return 2;
				}
				public Integer data_processamentoPrecision(){
				    return null;
				}
				public String data_processamentoDefault(){
				
					return null;
				
				}
				public String data_processamentoComment(){
				
				    return "";
				
				}
				public String data_processamentoPattern(){
				
					return "";
				
				}
				public String data_processamentoOriginalDbColumnName(){
				
					return "data_processamento";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.data_processamento = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.data_processamento,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("data_processamento="+data_processamento);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[1];

        public void addRow(String[] row) {

            for (int i = 0; i < 1; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 0 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 0 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);	                

                  
                    //last column
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() - fillChars[1].length()+2; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("tLogRow_2");
        util_tLogRow_2.addRow(new String[]{"data_processamento",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select current_date- interval '5 day'";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row7.data_processamento = null;
							} else {
	                         		
        	row7.data_processamento = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
					


 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

    //Code generated according to input schema and output schema
row8.data_processamento = row7.data_processamento;
context.data = row7.data_processamento;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[1];
   				
	    		if(row8.data_processamento != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(row8.data_processamento)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());




/**
 * [tJavaRow_2 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";
	
	

 



/**
 * [tLogRow_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String entityid;

				public String getEntityid () {
					return this.entityid;
				}

				public Boolean entityidIsNullable(){
				    return true;
				}
				public Boolean entityidIsKey(){
				    return false;
				}
				public Integer entityidLength(){
				    return null;
				}
				public Integer entityidPrecision(){
				    return null;
				}
				public String entityidDefault(){
				
					return null;
				
				}
				public String entityidComment(){
				
				    return "";
				
				}
				public String entityidPattern(){
				
					return "";
				
				}
				public String entityidOriginalDbColumnName(){
				
					return "entityid";
				
				}

				
			    public String incrementid;

				public String getIncrementid () {
					return this.incrementid;
				}

				public Boolean incrementidIsNullable(){
				    return true;
				}
				public Boolean incrementidIsKey(){
				    return false;
				}
				public Integer incrementidLength(){
				    return null;
				}
				public Integer incrementidPrecision(){
				    return null;
				}
				public String incrementidDefault(){
				
					return null;
				
				}
				public String incrementidComment(){
				
				    return "";
				
				}
				public String incrementidPattern(){
				
					return "";
				
				}
				public String incrementidOriginalDbColumnName(){
				
					return "incrementid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityid = readString(dis);
					
					this.incrementid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityid = readString(dis);
					
					this.incrementid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.entityid,dos);
					
					// String
				
						writeString(this.incrementid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.entityid,dos);
					
					// String
				
						writeString(this.incrementid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("entityid="+entityid);
		sb.append(",incrementid="+incrementid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_dw_t_mkt_order_service_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select entityid, incrementid\n     from dw_t_mkt_order_service";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row5.entityid = null;
							} else {
	                         		
        	row5.entityid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row5.incrementid = null;
							} else {
	                         		
        	row5.incrementid = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
					


 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.entityid = row5.entityid;
					oneRow_tHashOutput_1.incrementid = row5.incrementid;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tMongoDBInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class Insert1Struct implements routines.system.IPersistableRow<Insert1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return true;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
					
						result = prime * result + ((this.incrementId == null) ? 0 : this.incrementId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final Insert1Struct other = (Insert1Struct) obj;
		
						if (this.entityId == null) {
							if (other.entityId != null)
								return false;
						
						} else if (!this.entityId.equals(other.entityId))
						
							return false;
					
						if (this.incrementId == null) {
							if (other.incrementId != null)
								return false;
						
						} else if (!this.incrementId.equals(other.incrementId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(Insert1Struct other) {

		other.entityId = this.entityId;
	            other.customerGroupId = this.customerGroupId;
	            other.incrementId = this.incrementId;
	            other.state = this.state;
	            other.status = this.status;
	            other.createdAt = this.createdAt;
	            other.totalValue = this.totalValue;
	            other.shippingAmount = this.shippingAmount;
	            other.discountAmount = this.discountAmount;
	            other.paid = this.paid;
	            other.subtotal = this.subtotal;
	            other.totalInvoiced = this.totalInvoiced;
	            other.weight = this.weight;
	            other.taxAmount = this.taxAmount;
	            other.shippingDescription = this.shippingDescription;
	            other.synced = this.synced;
	            other.anymarket = this.anymarket;
	            other.marketplace = this.marketplace;
	            other.erpId = this.erpId;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.erpErrorLog = this.erpErrorLog;
	            
	}

	public void copyKeysDataTo(Insert1Struct other) {

		other.entityId = this.entityId;
	            	other.incrementId = this.incrementId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.synced = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.synced = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",synced="+synced);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(Insert1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.entityId, other.entityId);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.incrementId, other.incrementId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class update1Struct implements routines.system.IPersistableRow<update1Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return true;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
					
						result = prime * result + ((this.incrementId == null) ? 0 : this.incrementId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final update1Struct other = (update1Struct) obj;
		
						if (this.entityId == null) {
							if (other.entityId != null)
								return false;
						
						} else if (!this.entityId.equals(other.entityId))
						
							return false;
					
						if (this.incrementId == null) {
							if (other.incrementId != null)
								return false;
						
						} else if (!this.incrementId.equals(other.incrementId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(update1Struct other) {

		other.entityId = this.entityId;
	            other.customerGroupId = this.customerGroupId;
	            other.incrementId = this.incrementId;
	            other.state = this.state;
	            other.status = this.status;
	            other.createdAt = this.createdAt;
	            other.totalValue = this.totalValue;
	            other.shippingAmount = this.shippingAmount;
	            other.discountAmount = this.discountAmount;
	            other.paid = this.paid;
	            other.subtotal = this.subtotal;
	            other.totalInvoiced = this.totalInvoiced;
	            other.weight = this.weight;
	            other.taxAmount = this.taxAmount;
	            other.shippingDescription = this.shippingDescription;
	            other.synced = this.synced;
	            other.anymarket = this.anymarket;
	            other.marketplace = this.marketplace;
	            other.erpId = this.erpId;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.erpErrorLog = this.erpErrorLog;
	            
	}

	public void copyKeysDataTo(update1Struct other) {

		other.entityId = this.entityId;
	            	other.incrementId = this.incrementId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.synced = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.synced = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",synced="+synced);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.entityId, other.entityId);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.incrementId, other.incrementId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return false;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public java.util.Date createdAt;

				public java.util.Date getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String quote;

				public String getQuote () {
					return this.quote;
				}

				public Boolean quoteIsNullable(){
				    return true;
				}
				public Boolean quoteIsKey(){
				    return false;
				}
				public Integer quoteLength(){
				    return null;
				}
				public Integer quotePrecision(){
				    return null;
				}
				public String quoteDefault(){
				
					return null;
				
				}
				public String quoteComment(){
				
				    return "";
				
				}
				public String quotePattern(){
				
					return "";
				
				}
				public String quoteOriginalDbColumnName(){
				
					return "quote";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String shippingAddress;

				public String getShippingAddress () {
					return this.shippingAddress;
				}

				public Boolean shippingAddressIsNullable(){
				    return true;
				}
				public Boolean shippingAddressIsKey(){
				    return false;
				}
				public Integer shippingAddressLength(){
				    return null;
				}
				public Integer shippingAddressPrecision(){
				    return null;
				}
				public String shippingAddressDefault(){
				
					return null;
				
				}
				public String shippingAddressComment(){
				
				    return "";
				
				}
				public String shippingAddressPattern(){
				
					return "";
				
				}
				public String shippingAddressOriginalDbColumnName(){
				
					return "shippingAddress";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String payment;

				public String getPayment () {
					return this.payment;
				}

				public Boolean paymentIsNullable(){
				    return true;
				}
				public Boolean paymentIsKey(){
				    return false;
				}
				public Integer paymentLength(){
				    return null;
				}
				public Integer paymentPrecision(){
				    return null;
				}
				public String paymentDefault(){
				
					return null;
				
				}
				public String paymentComment(){
				
				    return "";
				
				}
				public String paymentPattern(){
				
					return "";
				
				}
				public String paymentOriginalDbColumnName(){
				
					return "payment";
				
				}

				
			    public String statusHistories;

				public String getStatusHistories () {
					return this.statusHistories;
				}

				public Boolean statusHistoriesIsNullable(){
				    return true;
				}
				public Boolean statusHistoriesIsKey(){
				    return false;
				}
				public Integer statusHistoriesLength(){
				    return null;
				}
				public Integer statusHistoriesPrecision(){
				    return null;
				}
				public String statusHistoriesDefault(){
				
					return null;
				
				}
				public String statusHistoriesComment(){
				
				    return "";
				
				}
				public String statusHistoriesPattern(){
				
					return "";
				
				}
				public String statusHistoriesOriginalDbColumnName(){
				
					return "statusHistories";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readDate(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// java.util.Date
				
						writeDate(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+String.valueOf(createdAt));
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",quote="+quote);
		sb.append(",synced="+synced);
		sb.append(",items="+items);
		sb.append(",shippingAddress="+shippingAddress);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",payment="+payment);
		sb.append(",statusHistories="+statusHistories);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class saida2Struct implements routines.system.IPersistableRow<saida2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return false;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String quote;

				public String getQuote () {
					return this.quote;
				}

				public Boolean quoteIsNullable(){
				    return true;
				}
				public Boolean quoteIsKey(){
				    return false;
				}
				public Integer quoteLength(){
				    return null;
				}
				public Integer quotePrecision(){
				    return null;
				}
				public String quoteDefault(){
				
					return null;
				
				}
				public String quoteComment(){
				
				    return "";
				
				}
				public String quotePattern(){
				
					return "";
				
				}
				public String quoteOriginalDbColumnName(){
				
					return "quote";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String shippingAddress;

				public String getShippingAddress () {
					return this.shippingAddress;
				}

				public Boolean shippingAddressIsNullable(){
				    return true;
				}
				public Boolean shippingAddressIsKey(){
				    return false;
				}
				public Integer shippingAddressLength(){
				    return null;
				}
				public Integer shippingAddressPrecision(){
				    return null;
				}
				public String shippingAddressDefault(){
				
					return null;
				
				}
				public String shippingAddressComment(){
				
				    return "";
				
				}
				public String shippingAddressPattern(){
				
					return "";
				
				}
				public String shippingAddressOriginalDbColumnName(){
				
					return "shippingAddress";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String payment;

				public String getPayment () {
					return this.payment;
				}

				public Boolean paymentIsNullable(){
				    return true;
				}
				public Boolean paymentIsKey(){
				    return false;
				}
				public Integer paymentLength(){
				    return null;
				}
				public Integer paymentPrecision(){
				    return null;
				}
				public String paymentDefault(){
				
					return null;
				
				}
				public String paymentComment(){
				
				    return "";
				
				}
				public String paymentPattern(){
				
					return "";
				
				}
				public String paymentOriginalDbColumnName(){
				
					return "payment";
				
				}

				
			    public String statusHistories;

				public String getStatusHistories () {
					return this.statusHistories;
				}

				public Boolean statusHistoriesIsNullable(){
				    return true;
				}
				public Boolean statusHistoriesIsKey(){
				    return false;
				}
				public Integer statusHistoriesLength(){
				    return null;
				}
				public Integer statusHistoriesPrecision(){
				    return null;
				}
				public String statusHistoriesDefault(){
				
					return null;
				
				}
				public String statusHistoriesComment(){
				
				    return "";
				
				}
				public String statusHistoriesPattern(){
				
					return "";
				
				}
				public String statusHistoriesOriginalDbColumnName(){
				
					return "statusHistories";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final saida2Struct other = (saida2Struct) obj;
		
						if (this.entityId == null) {
							if (other.entityId != null)
								return false;
						
						} else if (!this.entityId.equals(other.entityId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(saida2Struct other) {

		other._id = this._id;
	            other.entityId = this.entityId;
	            other.customerGroupId = this.customerGroupId;
	            other.incrementId = this.incrementId;
	            other.state = this.state;
	            other.status = this.status;
	            other.createdAt = this.createdAt;
	            other.totalValue = this.totalValue;
	            other.shippingAmount = this.shippingAmount;
	            other.discountAmount = this.discountAmount;
	            other.paid = this.paid;
	            other.subtotal = this.subtotal;
	            other.totalInvoiced = this.totalInvoiced;
	            other.weight = this.weight;
	            other.taxAmount = this.taxAmount;
	            other.shippingDescription = this.shippingDescription;
	            other.quote = this.quote;
	            other.synced = this.synced;
	            other.items = this.items;
	            other.shippingAddress = this.shippingAddress;
	            other.billingAddress = this.billingAddress;
	            other.payment = this.payment;
	            other.statusHistories = this.statusHistories;
	            other.anymarket = this.anymarket;
	            other.marketplace = this.marketplace;
	            other.erpId = this.erpId;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.erpErrorLog = this.erpErrorLog;
	            
	}

	public void copyKeysDataTo(saida2Struct other) {

		other.entityId = this.entityId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+createdAt);
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",quote="+quote);
		sb.append(",synced="+synced);
		sb.append(",items="+items);
		sb.append(",shippingAddress="+shippingAddress);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",payment="+payment);
		sb.append(",statusHistories="+statusHistories);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(saida2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.entityId, other.entityId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return false;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String quote;

				public String getQuote () {
					return this.quote;
				}

				public Boolean quoteIsNullable(){
				    return true;
				}
				public Boolean quoteIsKey(){
				    return false;
				}
				public Integer quoteLength(){
				    return null;
				}
				public Integer quotePrecision(){
				    return null;
				}
				public String quoteDefault(){
				
					return null;
				
				}
				public String quoteComment(){
				
				    return "";
				
				}
				public String quotePattern(){
				
					return "";
				
				}
				public String quoteOriginalDbColumnName(){
				
					return "quote";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String shippingAddress;

				public String getShippingAddress () {
					return this.shippingAddress;
				}

				public Boolean shippingAddressIsNullable(){
				    return true;
				}
				public Boolean shippingAddressIsKey(){
				    return false;
				}
				public Integer shippingAddressLength(){
				    return null;
				}
				public Integer shippingAddressPrecision(){
				    return null;
				}
				public String shippingAddressDefault(){
				
					return null;
				
				}
				public String shippingAddressComment(){
				
				    return "";
				
				}
				public String shippingAddressPattern(){
				
					return "";
				
				}
				public String shippingAddressOriginalDbColumnName(){
				
					return "shippingAddress";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String payment;

				public String getPayment () {
					return this.payment;
				}

				public Boolean paymentIsNullable(){
				    return true;
				}
				public Boolean paymentIsKey(){
				    return false;
				}
				public Integer paymentLength(){
				    return null;
				}
				public Integer paymentPrecision(){
				    return null;
				}
				public String paymentDefault(){
				
					return null;
				
				}
				public String paymentComment(){
				
				    return "";
				
				}
				public String paymentPattern(){
				
					return "";
				
				}
				public String paymentOriginalDbColumnName(){
				
					return "payment";
				
				}

				
			    public String statusHistories;

				public String getStatusHistories () {
					return this.statusHistories;
				}

				public Boolean statusHistoriesIsNullable(){
				    return true;
				}
				public Boolean statusHistoriesIsKey(){
				    return false;
				}
				public Integer statusHistoriesLength(){
				    return null;
				}
				public Integer statusHistoriesPrecision(){
				    return null;
				}
				public String statusHistoriesDefault(){
				
					return null;
				
				}
				public String statusHistoriesComment(){
				
				    return "";
				
				}
				public String statusHistoriesPattern(){
				
					return "";
				
				}
				public String statusHistoriesOriginalDbColumnName(){
				
					return "statusHistories";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+createdAt);
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",quote="+quote);
		sb.append(",synced="+synced);
		sb.append(",items="+items);
		sb.append(",shippingAddress="+shippingAddress);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",payment="+payment);
		sb.append(",statusHistories="+statusHistories);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMongoDBInput_2Struct implements routines.system.IPersistableRow<after_tMongoDBInput_2Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String _id;

				public String get_id () {
					return this._id;
				}

				public Boolean _idIsNullable(){
				    return true;
				}
				public Boolean _idIsKey(){
				    return false;
				}
				public Integer _idLength(){
				    return null;
				}
				public Integer _idPrecision(){
				    return null;
				}
				public String _idDefault(){
				
					return null;
				
				}
				public String _idComment(){
				
				    return "";
				
				}
				public String _idPattern(){
				
					return "";
				
				}
				public String _idOriginalDbColumnName(){
				
					return "_id";
				
				}

				
			    public String entityId;

				public String getEntityId () {
					return this.entityId;
				}

				public Boolean entityIdIsNullable(){
				    return true;
				}
				public Boolean entityIdIsKey(){
				    return true;
				}
				public Integer entityIdLength(){
				    return null;
				}
				public Integer entityIdPrecision(){
				    return null;
				}
				public String entityIdDefault(){
				
					return null;
				
				}
				public String entityIdComment(){
				
				    return "";
				
				}
				public String entityIdPattern(){
				
					return "";
				
				}
				public String entityIdOriginalDbColumnName(){
				
					return "entityId";
				
				}

				
			    public String customerGroupId;

				public String getCustomerGroupId () {
					return this.customerGroupId;
				}

				public Boolean customerGroupIdIsNullable(){
				    return true;
				}
				public Boolean customerGroupIdIsKey(){
				    return false;
				}
				public Integer customerGroupIdLength(){
				    return null;
				}
				public Integer customerGroupIdPrecision(){
				    return null;
				}
				public String customerGroupIdDefault(){
				
					return null;
				
				}
				public String customerGroupIdComment(){
				
				    return "";
				
				}
				public String customerGroupIdPattern(){
				
					return "";
				
				}
				public String customerGroupIdOriginalDbColumnName(){
				
					return "customerGroupId";
				
				}

				
			    public String incrementId;

				public String getIncrementId () {
					return this.incrementId;
				}

				public Boolean incrementIdIsNullable(){
				    return true;
				}
				public Boolean incrementIdIsKey(){
				    return false;
				}
				public Integer incrementIdLength(){
				    return null;
				}
				public Integer incrementIdPrecision(){
				    return null;
				}
				public String incrementIdDefault(){
				
					return null;
				
				}
				public String incrementIdComment(){
				
				    return "";
				
				}
				public String incrementIdPattern(){
				
					return "";
				
				}
				public String incrementIdOriginalDbColumnName(){
				
					return "incrementId";
				
				}

				
			    public String state;

				public String getState () {
					return this.state;
				}

				public Boolean stateIsNullable(){
				    return true;
				}
				public Boolean stateIsKey(){
				    return false;
				}
				public Integer stateLength(){
				    return null;
				}
				public Integer statePrecision(){
				    return null;
				}
				public String stateDefault(){
				
					return null;
				
				}
				public String stateComment(){
				
				    return "";
				
				}
				public String statePattern(){
				
					return "";
				
				}
				public String stateOriginalDbColumnName(){
				
					return "state";
				
				}

				
			    public String status;

				public String getStatus () {
					return this.status;
				}

				public Boolean statusIsNullable(){
				    return true;
				}
				public Boolean statusIsKey(){
				    return false;
				}
				public Integer statusLength(){
				    return null;
				}
				public Integer statusPrecision(){
				    return null;
				}
				public String statusDefault(){
				
					return null;
				
				}
				public String statusComment(){
				
				    return "";
				
				}
				public String statusPattern(){
				
					return "";
				
				}
				public String statusOriginalDbColumnName(){
				
					return "status";
				
				}

				
			    public String createdAt;

				public String getCreatedAt () {
					return this.createdAt;
				}

				public Boolean createdAtIsNullable(){
				    return true;
				}
				public Boolean createdAtIsKey(){
				    return false;
				}
				public Integer createdAtLength(){
				    return null;
				}
				public Integer createdAtPrecision(){
				    return null;
				}
				public String createdAtDefault(){
				
					return null;
				
				}
				public String createdAtComment(){
				
				    return "";
				
				}
				public String createdAtPattern(){
				
					return "";
				
				}
				public String createdAtOriginalDbColumnName(){
				
					return "createdAt";
				
				}

				
			    public String totalValue;

				public String getTotalValue () {
					return this.totalValue;
				}

				public Boolean totalValueIsNullable(){
				    return true;
				}
				public Boolean totalValueIsKey(){
				    return false;
				}
				public Integer totalValueLength(){
				    return null;
				}
				public Integer totalValuePrecision(){
				    return null;
				}
				public String totalValueDefault(){
				
					return null;
				
				}
				public String totalValueComment(){
				
				    return "";
				
				}
				public String totalValuePattern(){
				
					return "";
				
				}
				public String totalValueOriginalDbColumnName(){
				
					return "totalValue";
				
				}

				
			    public String shippingAmount;

				public String getShippingAmount () {
					return this.shippingAmount;
				}

				public Boolean shippingAmountIsNullable(){
				    return true;
				}
				public Boolean shippingAmountIsKey(){
				    return false;
				}
				public Integer shippingAmountLength(){
				    return null;
				}
				public Integer shippingAmountPrecision(){
				    return null;
				}
				public String shippingAmountDefault(){
				
					return null;
				
				}
				public String shippingAmountComment(){
				
				    return "";
				
				}
				public String shippingAmountPattern(){
				
					return "";
				
				}
				public String shippingAmountOriginalDbColumnName(){
				
					return "shippingAmount";
				
				}

				
			    public String discountAmount;

				public String getDiscountAmount () {
					return this.discountAmount;
				}

				public Boolean discountAmountIsNullable(){
				    return true;
				}
				public Boolean discountAmountIsKey(){
				    return false;
				}
				public Integer discountAmountLength(){
				    return null;
				}
				public Integer discountAmountPrecision(){
				    return null;
				}
				public String discountAmountDefault(){
				
					return null;
				
				}
				public String discountAmountComment(){
				
				    return "";
				
				}
				public String discountAmountPattern(){
				
					return "";
				
				}
				public String discountAmountOriginalDbColumnName(){
				
					return "discountAmount";
				
				}

				
			    public String paid;

				public String getPaid () {
					return this.paid;
				}

				public Boolean paidIsNullable(){
				    return true;
				}
				public Boolean paidIsKey(){
				    return false;
				}
				public Integer paidLength(){
				    return null;
				}
				public Integer paidPrecision(){
				    return null;
				}
				public String paidDefault(){
				
					return null;
				
				}
				public String paidComment(){
				
				    return "";
				
				}
				public String paidPattern(){
				
					return "";
				
				}
				public String paidOriginalDbColumnName(){
				
					return "paid";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return true;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String totalInvoiced;

				public String getTotalInvoiced () {
					return this.totalInvoiced;
				}

				public Boolean totalInvoicedIsNullable(){
				    return true;
				}
				public Boolean totalInvoicedIsKey(){
				    return false;
				}
				public Integer totalInvoicedLength(){
				    return null;
				}
				public Integer totalInvoicedPrecision(){
				    return null;
				}
				public String totalInvoicedDefault(){
				
					return null;
				
				}
				public String totalInvoicedComment(){
				
				    return "";
				
				}
				public String totalInvoicedPattern(){
				
					return "";
				
				}
				public String totalInvoicedOriginalDbColumnName(){
				
					return "totalInvoiced";
				
				}

				
			    public String weight;

				public String getWeight () {
					return this.weight;
				}

				public Boolean weightIsNullable(){
				    return true;
				}
				public Boolean weightIsKey(){
				    return false;
				}
				public Integer weightLength(){
				    return null;
				}
				public Integer weightPrecision(){
				    return null;
				}
				public String weightDefault(){
				
					return null;
				
				}
				public String weightComment(){
				
				    return "";
				
				}
				public String weightPattern(){
				
					return "";
				
				}
				public String weightOriginalDbColumnName(){
				
					return "weight";
				
				}

				
			    public String taxAmount;

				public String getTaxAmount () {
					return this.taxAmount;
				}

				public Boolean taxAmountIsNullable(){
				    return true;
				}
				public Boolean taxAmountIsKey(){
				    return false;
				}
				public Integer taxAmountLength(){
				    return null;
				}
				public Integer taxAmountPrecision(){
				    return null;
				}
				public String taxAmountDefault(){
				
					return null;
				
				}
				public String taxAmountComment(){
				
				    return "";
				
				}
				public String taxAmountPattern(){
				
					return "";
				
				}
				public String taxAmountOriginalDbColumnName(){
				
					return "taxAmount";
				
				}

				
			    public String shippingDescription;

				public String getShippingDescription () {
					return this.shippingDescription;
				}

				public Boolean shippingDescriptionIsNullable(){
				    return true;
				}
				public Boolean shippingDescriptionIsKey(){
				    return false;
				}
				public Integer shippingDescriptionLength(){
				    return null;
				}
				public Integer shippingDescriptionPrecision(){
				    return null;
				}
				public String shippingDescriptionDefault(){
				
					return null;
				
				}
				public String shippingDescriptionComment(){
				
				    return "";
				
				}
				public String shippingDescriptionPattern(){
				
					return "";
				
				}
				public String shippingDescriptionOriginalDbColumnName(){
				
					return "shippingDescription";
				
				}

				
			    public String quote;

				public String getQuote () {
					return this.quote;
				}

				public Boolean quoteIsNullable(){
				    return true;
				}
				public Boolean quoteIsKey(){
				    return false;
				}
				public Integer quoteLength(){
				    return null;
				}
				public Integer quotePrecision(){
				    return null;
				}
				public String quoteDefault(){
				
					return null;
				
				}
				public String quoteComment(){
				
				    return "";
				
				}
				public String quotePattern(){
				
					return "";
				
				}
				public String quoteOriginalDbColumnName(){
				
					return "quote";
				
				}

				
			    public String synced;

				public String getSynced () {
					return this.synced;
				}

				public Boolean syncedIsNullable(){
				    return true;
				}
				public Boolean syncedIsKey(){
				    return false;
				}
				public Integer syncedLength(){
				    return null;
				}
				public Integer syncedPrecision(){
				    return null;
				}
				public String syncedDefault(){
				
					return null;
				
				}
				public String syncedComment(){
				
				    return "";
				
				}
				public String syncedPattern(){
				
					return "";
				
				}
				public String syncedOriginalDbColumnName(){
				
					return "synced";
				
				}

				
			    public String items;

				public String getItems () {
					return this.items;
				}

				public Boolean itemsIsNullable(){
				    return true;
				}
				public Boolean itemsIsKey(){
				    return false;
				}
				public Integer itemsLength(){
				    return null;
				}
				public Integer itemsPrecision(){
				    return null;
				}
				public String itemsDefault(){
				
					return null;
				
				}
				public String itemsComment(){
				
				    return "";
				
				}
				public String itemsPattern(){
				
					return "";
				
				}
				public String itemsOriginalDbColumnName(){
				
					return "items";
				
				}

				
			    public String shippingAddress;

				public String getShippingAddress () {
					return this.shippingAddress;
				}

				public Boolean shippingAddressIsNullable(){
				    return true;
				}
				public Boolean shippingAddressIsKey(){
				    return false;
				}
				public Integer shippingAddressLength(){
				    return null;
				}
				public Integer shippingAddressPrecision(){
				    return null;
				}
				public String shippingAddressDefault(){
				
					return null;
				
				}
				public String shippingAddressComment(){
				
				    return "";
				
				}
				public String shippingAddressPattern(){
				
					return "";
				
				}
				public String shippingAddressOriginalDbColumnName(){
				
					return "shippingAddress";
				
				}

				
			    public String billingAddress;

				public String getBillingAddress () {
					return this.billingAddress;
				}

				public Boolean billingAddressIsNullable(){
				    return true;
				}
				public Boolean billingAddressIsKey(){
				    return false;
				}
				public Integer billingAddressLength(){
				    return null;
				}
				public Integer billingAddressPrecision(){
				    return null;
				}
				public String billingAddressDefault(){
				
					return null;
				
				}
				public String billingAddressComment(){
				
				    return "";
				
				}
				public String billingAddressPattern(){
				
					return "";
				
				}
				public String billingAddressOriginalDbColumnName(){
				
					return "billingAddress";
				
				}

				
			    public String payment;

				public String getPayment () {
					return this.payment;
				}

				public Boolean paymentIsNullable(){
				    return true;
				}
				public Boolean paymentIsKey(){
				    return false;
				}
				public Integer paymentLength(){
				    return null;
				}
				public Integer paymentPrecision(){
				    return null;
				}
				public String paymentDefault(){
				
					return null;
				
				}
				public String paymentComment(){
				
				    return "";
				
				}
				public String paymentPattern(){
				
					return "";
				
				}
				public String paymentOriginalDbColumnName(){
				
					return "payment";
				
				}

				
			    public String statusHistories;

				public String getStatusHistories () {
					return this.statusHistories;
				}

				public Boolean statusHistoriesIsNullable(){
				    return true;
				}
				public Boolean statusHistoriesIsKey(){
				    return false;
				}
				public Integer statusHistoriesLength(){
				    return null;
				}
				public Integer statusHistoriesPrecision(){
				    return null;
				}
				public String statusHistoriesDefault(){
				
					return null;
				
				}
				public String statusHistoriesComment(){
				
				    return "";
				
				}
				public String statusHistoriesPattern(){
				
					return "";
				
				}
				public String statusHistoriesOriginalDbColumnName(){
				
					return "statusHistories";
				
				}

				
			    public String anymarket;

				public String getAnymarket () {
					return this.anymarket;
				}

				public Boolean anymarketIsNullable(){
				    return true;
				}
				public Boolean anymarketIsKey(){
				    return false;
				}
				public Integer anymarketLength(){
				    return null;
				}
				public Integer anymarketPrecision(){
				    return null;
				}
				public String anymarketDefault(){
				
					return null;
				
				}
				public String anymarketComment(){
				
				    return "";
				
				}
				public String anymarketPattern(){
				
					return "";
				
				}
				public String anymarketOriginalDbColumnName(){
				
					return "anymarket";
				
				}

				
			    public String marketplace;

				public String getMarketplace () {
					return this.marketplace;
				}

				public Boolean marketplaceIsNullable(){
				    return true;
				}
				public Boolean marketplaceIsKey(){
				    return false;
				}
				public Integer marketplaceLength(){
				    return null;
				}
				public Integer marketplacePrecision(){
				    return null;
				}
				public String marketplaceDefault(){
				
					return null;
				
				}
				public String marketplaceComment(){
				
				    return "";
				
				}
				public String marketplacePattern(){
				
					return "";
				
				}
				public String marketplaceOriginalDbColumnName(){
				
					return "marketplace";
				
				}

				
			    public String erpId;

				public String getErpId () {
					return this.erpId;
				}

				public Boolean erpIdIsNullable(){
				    return true;
				}
				public Boolean erpIdIsKey(){
				    return false;
				}
				public Integer erpIdLength(){
				    return null;
				}
				public Integer erpIdPrecision(){
				    return null;
				}
				public String erpIdDefault(){
				
					return null;
				
				}
				public String erpIdComment(){
				
				    return "";
				
				}
				public String erpIdPattern(){
				
					return "";
				
				}
				public String erpIdOriginalDbColumnName(){
				
					return "erpId";
				
				}

				
			    public String erpSynced;

				public String getErpSynced () {
					return this.erpSynced;
				}

				public Boolean erpSyncedIsNullable(){
				    return true;
				}
				public Boolean erpSyncedIsKey(){
				    return false;
				}
				public Integer erpSyncedLength(){
				    return null;
				}
				public Integer erpSyncedPrecision(){
				    return null;
				}
				public String erpSyncedDefault(){
				
					return null;
				
				}
				public String erpSyncedComment(){
				
				    return "";
				
				}
				public String erpSyncedPattern(){
				
					return "";
				
				}
				public String erpSyncedOriginalDbColumnName(){
				
					return "erpSynced";
				
				}

				
			    public String erpError;

				public String getErpError () {
					return this.erpError;
				}

				public Boolean erpErrorIsNullable(){
				    return true;
				}
				public Boolean erpErrorIsKey(){
				    return false;
				}
				public Integer erpErrorLength(){
				    return null;
				}
				public Integer erpErrorPrecision(){
				    return null;
				}
				public String erpErrorDefault(){
				
					return null;
				
				}
				public String erpErrorComment(){
				
				    return "";
				
				}
				public String erpErrorPattern(){
				
					return "";
				
				}
				public String erpErrorOriginalDbColumnName(){
				
					return "erpError";
				
				}

				
			    public String erpErrorLog;

				public String getErpErrorLog () {
					return this.erpErrorLog;
				}

				public Boolean erpErrorLogIsNullable(){
				    return true;
				}
				public Boolean erpErrorLogIsKey(){
				    return false;
				}
				public Integer erpErrorLogLength(){
				    return null;
				}
				public Integer erpErrorLogPrecision(){
				    return null;
				}
				public String erpErrorLogDefault(){
				
					return null;
				
				}
				public String erpErrorLogComment(){
				
				    return "";
				
				}
				public String erpErrorLogPattern(){
				
					return "";
				
				}
				public String erpErrorLogOriginalDbColumnName(){
				
					return "erpErrorLog";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.entityId == null) ? 0 : this.entityId.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tMongoDBInput_2Struct other = (after_tMongoDBInput_2Struct) obj;
		
						if (this.entityId == null) {
							if (other.entityId != null)
								return false;
						
						} else if (!this.entityId.equals(other.entityId))
						
							return false;
					

		return true;
    }

	public void copyDataTo(after_tMongoDBInput_2Struct other) {

		other._id = this._id;
	            other.entityId = this.entityId;
	            other.customerGroupId = this.customerGroupId;
	            other.incrementId = this.incrementId;
	            other.state = this.state;
	            other.status = this.status;
	            other.createdAt = this.createdAt;
	            other.totalValue = this.totalValue;
	            other.shippingAmount = this.shippingAmount;
	            other.discountAmount = this.discountAmount;
	            other.paid = this.paid;
	            other.subtotal = this.subtotal;
	            other.totalInvoiced = this.totalInvoiced;
	            other.weight = this.weight;
	            other.taxAmount = this.taxAmount;
	            other.shippingDescription = this.shippingDescription;
	            other.quote = this.quote;
	            other.synced = this.synced;
	            other.items = this.items;
	            other.shippingAddress = this.shippingAddress;
	            other.billingAddress = this.billingAddress;
	            other.payment = this.payment;
	            other.statusHistories = this.statusHistories;
	            other.anymarket = this.anymarket;
	            other.marketplace = this.marketplace;
	            other.erpId = this.erpId;
	            other.erpSynced = this.erpSynced;
	            other.erpError = this.erpError;
	            other.erpErrorLog = this.erpErrorLog;
	            
	}

	public void copyKeysDataTo(after_tMongoDBInput_2Struct other) {

		other.entityId = this.entityId;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this._id = readString(dis);
					
					this.entityId = readString(dis);
					
					this.customerGroupId = readString(dis);
					
					this.incrementId = readString(dis);
					
					this.state = readString(dis);
					
					this.status = readString(dis);
					
					this.createdAt = readString(dis);
					
					this.totalValue = readString(dis);
					
					this.shippingAmount = readString(dis);
					
					this.discountAmount = readString(dis);
					
					this.paid = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.totalInvoiced = readString(dis);
					
					this.weight = readString(dis);
					
					this.taxAmount = readString(dis);
					
					this.shippingDescription = readString(dis);
					
					this.quote = readString(dis);
					
					this.synced = readString(dis);
					
					this.items = readString(dis);
					
					this.shippingAddress = readString(dis);
					
					this.billingAddress = readString(dis);
					
					this.payment = readString(dis);
					
					this.statusHistories = readString(dis);
					
					this.anymarket = readString(dis);
					
					this.marketplace = readString(dis);
					
					this.erpId = readString(dis);
					
					this.erpSynced = readString(dis);
					
					this.erpError = readString(dis);
					
					this.erpErrorLog = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this._id,dos);
					
					// String
				
						writeString(this.entityId,dos);
					
					// String
				
						writeString(this.customerGroupId,dos);
					
					// String
				
						writeString(this.incrementId,dos);
					
					// String
				
						writeString(this.state,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// String
				
						writeString(this.createdAt,dos);
					
					// String
				
						writeString(this.totalValue,dos);
					
					// String
				
						writeString(this.shippingAmount,dos);
					
					// String
				
						writeString(this.discountAmount,dos);
					
					// String
				
						writeString(this.paid,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.totalInvoiced,dos);
					
					// String
				
						writeString(this.weight,dos);
					
					// String
				
						writeString(this.taxAmount,dos);
					
					// String
				
						writeString(this.shippingDescription,dos);
					
					// String
				
						writeString(this.quote,dos);
					
					// String
				
						writeString(this.synced,dos);
					
					// String
				
						writeString(this.items,dos);
					
					// String
				
						writeString(this.shippingAddress,dos);
					
					// String
				
						writeString(this.billingAddress,dos);
					
					// String
				
						writeString(this.payment,dos);
					
					// String
				
						writeString(this.statusHistories,dos);
					
					// String
				
						writeString(this.anymarket,dos);
					
					// String
				
						writeString(this.marketplace,dos);
					
					// String
				
						writeString(this.erpId,dos);
					
					// String
				
						writeString(this.erpSynced,dos);
					
					// String
				
						writeString(this.erpError,dos);
					
					// String
				
						writeString(this.erpErrorLog,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("_id="+_id);
		sb.append(",entityId="+entityId);
		sb.append(",customerGroupId="+customerGroupId);
		sb.append(",incrementId="+incrementId);
		sb.append(",state="+state);
		sb.append(",status="+status);
		sb.append(",createdAt="+createdAt);
		sb.append(",totalValue="+totalValue);
		sb.append(",shippingAmount="+shippingAmount);
		sb.append(",discountAmount="+discountAmount);
		sb.append(",paid="+paid);
		sb.append(",subtotal="+subtotal);
		sb.append(",totalInvoiced="+totalInvoiced);
		sb.append(",weight="+weight);
		sb.append(",taxAmount="+taxAmount);
		sb.append(",shippingDescription="+shippingDescription);
		sb.append(",quote="+quote);
		sb.append(",synced="+synced);
		sb.append(",items="+items);
		sb.append(",shippingAddress="+shippingAddress);
		sb.append(",billingAddress="+billingAddress);
		sb.append(",payment="+payment);
		sb.append(",statusHistories="+statusHistories);
		sb.append(",anymarket="+anymarket);
		sb.append(",marketplace="+marketplace);
		sb.append(",erpId="+erpId);
		sb.append(",erpSynced="+erpSynced);
		sb.append(",erpError="+erpError);
		sb.append(",erpErrorLog="+erpErrorLog);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMongoDBInput_2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.entityId, other.entityId);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tMongoDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);

		row10Struct row10 = new row10Struct();
saida2Struct saida2 = new saida2Struct();
row13Struct row13 = new row13Struct();
Insert1Struct Insert1 = new Insert1Struct();
update1Struct update1 = new update1Struct();







	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert1");
					}
				
		int tos_count_tDBOutput_5 = 0;
		





String dbschema_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_5 = null;
if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
	tableName_tDBOutput_5 = ("dw_t_mkt_order_service").toLowerCase();
} else {
	tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("dw_t_mkt_order_service").toLowerCase();
}


int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rowsToCommitCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;

boolean whetherReject_tDBOutput_5 = false;

java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;

	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_5 = 10000;
   int batchSizeCounter_tDBOutput_5=0;

int count_tDBOutput_5=0;
        java.lang.StringBuilder sb_tDBOutput_5 = new java.lang.StringBuilder();
        sb_tDBOutput_5.append("INSERT INTO \"").append(tableName_tDBOutput_5).append("\" (\"entityid\",\"customergroupid\",\"incrementid\",\"state\",\"status\",\"createdat\",\"totalvalue\",\"shippingamount\",\"discountamount\",\"paid\",\"subtotal\",\"totalinvoiced\",\"weight\",\"taxamount\",\"shippingdescription\",\"synced\",\"anymarket\",\"marketplace\",\"erpid\",\"erpsynced\",\"erperror\",\"erperrorlog\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

        String insert_tDBOutput_5 = sb_tDBOutput_5.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
	    resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
	    

 



/**
 * [tDBOutput_5 begin ] stop
 */




	
	/**
	 * [tDBOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_6", false);
		start_Hash.put("tDBOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update1");
					}
				
		int tos_count_tDBOutput_6 = 0;
		





String dbschema_tDBOutput_6 = null;
	dbschema_tDBOutput_6 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_6 = null;
if(dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
	tableName_tDBOutput_6 = ("dw_t_mkt_order_service").toLowerCase();
} else {
	tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "\".\"" + ("dw_t_mkt_order_service").toLowerCase();
}

        int updateKeyCount_tDBOutput_6 = 2;
        if(updateKeyCount_tDBOutput_6 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_6 == 22 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_6 = 0;
int nb_line_update_tDBOutput_6 = 0;
int nb_line_inserted_tDBOutput_6 = 0;
int nb_line_deleted_tDBOutput_6 = 0;
int nb_line_rejected_tDBOutput_6 = 0;

int deletedCount_tDBOutput_6=0;
int updatedCount_tDBOutput_6=0;
int insertedCount_tDBOutput_6=0;
int rowsToCommitCount_tDBOutput_6=0;
int rejectedCount_tDBOutput_6=0;

boolean whetherReject_tDBOutput_6 = false;

java.sql.Connection conn_tDBOutput_6 = null;
String dbUser_tDBOutput_6 = null;

	conn_tDBOutput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	


   int batchSize_tDBOutput_6 = 10000;
   int batchSizeCounter_tDBOutput_6=0;

int count_tDBOutput_6=0;
	    String update_tDBOutput_6 = "UPDATE \"" + tableName_tDBOutput_6 + "\" SET \"customergroupid\" = ?,\"state\" = ?,\"status\" = ?,\"createdat\" = ?,\"totalvalue\" = ?,\"shippingamount\" = ?,\"discountamount\" = ?,\"paid\" = ?,\"subtotal\" = ?,\"totalinvoiced\" = ?,\"weight\" = ?,\"taxamount\" = ?,\"shippingdescription\" = ?,\"synced\" = ?,\"anymarket\" = ?,\"marketplace\" = ?,\"erpid\" = ?,\"erpsynced\" = ?,\"erperror\" = ?,\"erperrorlog\" = ? WHERE \"entityid\" = ? AND \"incrementid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(update_tDBOutput_6);
	    resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);
	    

 



/**
 * [tDBOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
Insert1Struct Insert1_tmp = new Insert1Struct();
update1Struct update1_tmp = new update1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tConvertType_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tConvertType_2", false);
		start_Hash.put("tConvertType_2", System.currentTimeMillis());
		
	
	currentComponent="tConvertType_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"saida2");
					}
				
		int tos_count_tConvertType_2 = 0;
		
	int nb_line_tConvertType_2 = 0;  
 



/**
 * [tConvertType_2 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
saida2Struct saida2_tmp = new saida2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tMongoDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMongoDBInput_2", false);
		start_Hash.put("tMongoDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMongoDBInput_2";
	
	
		int tos_count_tMongoDBInput_2 = 0;
		


	

final String applicationName_tMongoDBInput_2 = "Talend";

	int nb_line_tMongoDBInput_2 = 0;
	


    // Declarations
    com.mongodb.client.MongoClient mongo_tMongoDBInput_2=null;
    com.mongodb.client.MongoDatabase db_tMongoDBInput_2=null;

        mongo_tMongoDBInput_2=(com.mongodb.client.MongoClient)globalMap.get("mongo_tMongoDBConnection_1");
        db_tMongoDBInput_2 = (com.mongodb.client.MongoDatabase)globalMap.get("db_tMongoDBConnection_1");


				
					com.mongodb.client.MongoCollection<org.bson.Document> coll_tMongoDBInput_2 = db_tMongoDBInput_2.getCollection("orders");
				
				
				
				try{
					// Add warning if an index is not in the query.
					boolean needIndexWarning = true;
					String indexList = "";
					java.lang.StringBuilder sb_tMongoDBInput_2 = new java.lang.StringBuilder();
	                
	                    for (com.mongodb.DBObject index: coll_tMongoDBInput_2.listIndexes(com.mongodb.DBObject.class)) {
	                 
	                        for (String key: ((com.mongodb.DBObject)index.get("key")).keySet()) {
	                            // The regexp is:
	                            // - contain the db DBcolumnName between two backslashed quotes
	                            // - is followed at some point by a colon
	                            // - there is no comma between the the DBcolumnName and the colon
	                            if  (("{  'createdAt': {    '$gte': '"+context.data+"'}}").matches(".*" + key.replace("*","\\*") + "[^,]*:.*")) {
	                                // We have an index, do not print error message
	                                needIndexWarning = false;
	                            } else {
	                                // This index is not in the query, add it into the indexList
	                                sb_tMongoDBInput_2.append(", ").append(key);
	                            }
	                        }
	                        indexList = sb_tMongoDBInput_2.toString();
	                    }
	                if ((!"".equals(indexList)) && (needIndexWarning)) {
	                    
	                        System.err.println("tMongoDBInput_2 - The query does not contain any reference an index.  [" + indexList.substring(1) + " ]");
	                        
	                }
	            }catch(com.mongodb.MongoException e){
	            	// caught an exception after issuing the getIndexInfo()
	            	// don't fail the whole job
	            	// maybe due to authorization
	            }

						org.bson.Document myQuery_tMongoDBInput_2 = org.bson.Document.parse("{  'createdAt': {    '$gte': '"+context.data+"'}}");
						
							com.mongodb.client.FindIterable<org.bson.Document> findIterable_tMongoDBInput_2 = coll_tMongoDBInput_2.find(myQuery_tMongoDBInput_2).noCursorTimeout(false);
							


				
				class DBObjectInputUtil_tMongoDBInput_2{
					// Get the node value in embedded document, 
					//If have no embedded document get root document node.
					
					public Object getValue(String parentNode,String currentName,org.bson.Document dbObject){
						Object value=null;
						if(dbObject==null){
							return null;
						}
						if (parentNode == null || "".equals(parentNode)) {
						    if ("*".equals(currentName)) {
						        value = dbObject;
						    } else if (dbObject.get(currentName)!=null){
								value=dbObject.get(currentName);
							}
						}else{
							String objNames[] = parentNode.split("\\.");
							org.bson.Document currentObj=dbObject;
							for(int i=0;i<objNames.length;i++){
								currentObj=(org.bson.Document)currentObj.get(objNames[i]);
								if(currentObj==null){
									break;
								}
							}
							if ("*".equals(currentName)) {
                                value = currentObj;
                            } else if(currentObj!=null){
								value=currentObj.get(currentName);
							}
						}
						
						    if(value instanceof org.bson.Document){
						        value = ((org.bson.Document)value).toJson();
						    }else if (value instanceof java.util.List){

						    java.util.List list = new java.util.ArrayList();
						    ((java.util.List)value).stream().forEach(e -> {
						    if(e instanceof org.bson.Document){
						        list.add(((org.bson.Document)e).toJson());
						    }else{
						        list.add(e);
						    }
						    });
						    value = list;
						    }

						
						return value;
					}
				}
				DBObjectInputUtil_tMongoDBInput_2 dbObjectInputUtil_tMongoDBInput_2=new DBObjectInputUtil_tMongoDBInput_2();
				java.util.Map<String, String> pathMap_tMongoDBInput_2=new java.util.HashMap<>();
				pathMap_tMongoDBInput_2.put("_id","");
				pathMap_tMongoDBInput_2.put("entityId","");
				pathMap_tMongoDBInput_2.put("customerGroupId","");
				pathMap_tMongoDBInput_2.put("incrementId","");
				pathMap_tMongoDBInput_2.put("state","");
				pathMap_tMongoDBInput_2.put("status","");
				pathMap_tMongoDBInput_2.put("createdAt","");
				pathMap_tMongoDBInput_2.put("totalValue","");
				pathMap_tMongoDBInput_2.put("shippingAmount","");
				pathMap_tMongoDBInput_2.put("discountAmount","");
				pathMap_tMongoDBInput_2.put("paid","");
				pathMap_tMongoDBInput_2.put("subtotal","");
				pathMap_tMongoDBInput_2.put("totalInvoiced","");
				pathMap_tMongoDBInput_2.put("weight","");
				pathMap_tMongoDBInput_2.put("taxAmount","");
				pathMap_tMongoDBInput_2.put("shippingDescription","");
				pathMap_tMongoDBInput_2.put("quote","");
				pathMap_tMongoDBInput_2.put("synced","");
				pathMap_tMongoDBInput_2.put("items","");
				pathMap_tMongoDBInput_2.put("shippingAddress","");
				pathMap_tMongoDBInput_2.put("billingAddress","");
				pathMap_tMongoDBInput_2.put("payment","");
				pathMap_tMongoDBInput_2.put("statusHistories","");
				pathMap_tMongoDBInput_2.put("anymarket","");
				pathMap_tMongoDBInput_2.put("marketplace","");
				pathMap_tMongoDBInput_2.put("erpId","");
				pathMap_tMongoDBInput_2.put("erpSynced","");
				pathMap_tMongoDBInput_2.put("erpError","");
				pathMap_tMongoDBInput_2.put("erpErrorLog","");

						
					com.mongodb.client.MongoCursor<org.bson.Document> cursor_tMongoDBInput_2 = findIterable_tMongoDBInput_2.iterator();
						
				while (cursor_tMongoDBInput_2.hasNext()){
				org.bson.Document o_tMongoDBInput_2 = cursor_tMongoDBInput_2.next();
				nb_line_tMongoDBInput_2++;
				Object valueObj_tMongoDBInput_2=null;
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("_id"),"_id",o_tMongoDBInput_2);
					
				row10._id = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("entityId"),"entityId",o_tMongoDBInput_2);
					
				row10.entityId = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("customerGroupId"),"customerGroupId",o_tMongoDBInput_2);
					
				row10.customerGroupId = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("incrementId"),"incrementId",o_tMongoDBInput_2);
					
				row10.incrementId = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("state"),"state",o_tMongoDBInput_2);
					
				row10.state = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("status"),"status",o_tMongoDBInput_2);
					
				row10.status = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("createdAt"),"createdAt",o_tMongoDBInput_2);
					
				row10.createdAt = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("totalValue"),"totalValue",o_tMongoDBInput_2);
					
				row10.totalValue = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("shippingAmount"),"shippingAmount",o_tMongoDBInput_2);
					
				row10.shippingAmount = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("discountAmount"),"discountAmount",o_tMongoDBInput_2);
					
				row10.discountAmount = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("paid"),"paid",o_tMongoDBInput_2);
					
				row10.paid = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("subtotal"),"subtotal",o_tMongoDBInput_2);
					
				row10.subtotal = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("totalInvoiced"),"totalInvoiced",o_tMongoDBInput_2);
					
				row10.totalInvoiced = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("weight"),"weight",o_tMongoDBInput_2);
					
				row10.weight = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("taxAmount"),"taxAmount",o_tMongoDBInput_2);
					
				row10.taxAmount = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("shippingDescription"),"shippingDescription",o_tMongoDBInput_2);
					
				row10.shippingDescription = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("quote"),"quote",o_tMongoDBInput_2);
					
				row10.quote = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("synced"),"synced",o_tMongoDBInput_2);
					
				row10.synced = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("items"),"items",o_tMongoDBInput_2);
					
				row10.items = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("shippingAddress"),"shippingAddress",o_tMongoDBInput_2);
					
				row10.shippingAddress = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("billingAddress"),"billingAddress",o_tMongoDBInput_2);
					
				row10.billingAddress = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("payment"),"payment",o_tMongoDBInput_2);
					
				row10.payment = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("statusHistories"),"statusHistories",o_tMongoDBInput_2);
					
				row10.statusHistories = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("anymarket"),"anymarket",o_tMongoDBInput_2);
					
				row10.anymarket = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("marketplace"),"marketplace",o_tMongoDBInput_2);
					
				row10.marketplace = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("erpId"),"erpId",o_tMongoDBInput_2);
					
				row10.erpId = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("erpSynced"),"erpSynced",o_tMongoDBInput_2);
					
				row10.erpSynced = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("erpError"),"erpError",o_tMongoDBInput_2);
					
				row10.erpError = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				
                    valueObj_tMongoDBInput_2=dbObjectInputUtil_tMongoDBInput_2.getValue(pathMap_tMongoDBInput_2.get("erpErrorLog"),"erpErrorLog",o_tMongoDBInput_2);
					
				row10.erpErrorLog = valueObj_tMongoDBInput_2==null ? null : valueObj_tMongoDBInput_2.toString();
				


 



/**
 * [tMongoDBInput_2 begin ] stop
 */
	
	/**
	 * [tMongoDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";
	
	

 


	tos_count_tMongoDBInput_2++;

/**
 * [tMongoDBInput_2 main ] stop
 */
	
	/**
	 * [tMongoDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";
	
	

 



/**
 * [tMongoDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

saida2 = null;


// # Output table : 'saida2'
saida2_tmp._id = row10._id ;
saida2_tmp.entityId = row10.entityId ;
saida2_tmp.customerGroupId = row10.customerGroupId ;
saida2_tmp.incrementId = row10.incrementId ;
saida2_tmp.state = row10.state ;
saida2_tmp.status = row10.status ;
saida2_tmp.createdAt = row10.createdAt ;
saida2_tmp.totalValue = row10.totalValue ;
saida2_tmp.shippingAmount = row10.shippingAmount ;
saida2_tmp.discountAmount = row10.discountAmount ;
saida2_tmp.paid = row10.paid ;
saida2_tmp.subtotal = row10.subtotal ;
saida2_tmp.totalInvoiced = row10.totalInvoiced ;
saida2_tmp.weight = row10.weight ;
saida2_tmp.taxAmount = row10.taxAmount ;
saida2_tmp.shippingDescription = row10.shippingDescription ;
saida2_tmp.quote = row10.quote ;
saida2_tmp.synced = row10.synced ;
saida2_tmp.items = row10.items ;
saida2_tmp.shippingAddress = row10.shippingAddress ;
saida2_tmp.billingAddress = row10.billingAddress ;
saida2_tmp.payment = row10.payment ;
saida2_tmp.statusHistories = row10.statusHistories ;
saida2_tmp.anymarket = row10.anymarket ;
saida2_tmp.marketplace = row10.marketplace ;
saida2_tmp.erpId = row10.erpId ;
saida2_tmp.erpSynced = row10.erpSynced ;
saida2_tmp.erpError = row10.erpError ;
saida2_tmp.erpErrorLog = row10.erpErrorLog ;
saida2 = saida2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "saida2"
if(saida2 != null) { 



	
	/**
	 * [tConvertType_2 main ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"saida2"
						
						);
					}
					


  row13 = new row13Struct();
  boolean bHasError_tConvertType_2 = false;             
          try {
              row13._id=TypeConvert.String2String(saida2._id);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.entityId=TypeConvert.String2String(saida2.entityId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.customerGroupId=TypeConvert.String2String(saida2.customerGroupId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.incrementId=TypeConvert.String2String(saida2.incrementId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.state=TypeConvert.String2String(saida2.state);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.status=TypeConvert.String2String(saida2.status);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.createdAt=TypeConvert.String2Date(saida2.createdAt, "yyyy-MM-dd HH:mm:ss");            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.totalValue=TypeConvert.String2String(saida2.totalValue);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.shippingAmount=TypeConvert.String2String(saida2.shippingAmount);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.discountAmount=TypeConvert.String2String(saida2.discountAmount);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.paid=TypeConvert.String2String(saida2.paid);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.subtotal=TypeConvert.String2String(saida2.subtotal);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.totalInvoiced=TypeConvert.String2String(saida2.totalInvoiced);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.weight=TypeConvert.String2String(saida2.weight);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.taxAmount=TypeConvert.String2String(saida2.taxAmount);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.shippingDescription=TypeConvert.String2String(saida2.shippingDescription);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.quote=TypeConvert.String2String(saida2.quote);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.synced=TypeConvert.String2String(saida2.synced);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.items=TypeConvert.String2String(saida2.items);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.shippingAddress=TypeConvert.String2String(saida2.shippingAddress);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.billingAddress=TypeConvert.String2String(saida2.billingAddress);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.payment=TypeConvert.String2String(saida2.payment);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.statusHistories=TypeConvert.String2String(saida2.statusHistories);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.anymarket=TypeConvert.String2String(saida2.anymarket);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.marketplace=TypeConvert.String2String(saida2.marketplace);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.erpId=TypeConvert.String2String(saida2.erpId);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.erpSynced=TypeConvert.String2String(saida2.erpSynced);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.erpError=TypeConvert.String2String(saida2.erpError);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }           
          try {
              row13.erpErrorLog=TypeConvert.String2String(saida2.erpErrorLog);            
          } catch(java.lang.Exception e){
globalMap.put("tConvertType_2_ERROR_MESSAGE",e.getMessage());
            bHasError_tConvertType_2 = true;            
              System.err.println(e.getMessage());          
          }
      if (bHasError_tConvertType_2) {row13 = null;}

  nb_line_tConvertType_2 ++ ;

 


	tos_count_tConvertType_2++;

/**
 * [tConvertType_2 main ] stop
 */
	
	/**
	 * [tConvertType_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_begin ] stop
 */
// Start of branch "row13"
if(row13 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row12Struct row12 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row12HashKey.entityid = row13.entityId ;
                        		    		
                        		    		    row12HashKey.incrementid = row13.incrementId ;
                        		    		

								
		                        	row12HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
	
		  								forceLooprow12 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow12 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) || forceLooprow12) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row12'
									
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								
								if(!forceLooprow12) { // G 46
								
							
								 
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow12 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

update1 = null;
Insert1 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'update1'
update1_tmp.entityId = row13.entityId;
update1_tmp.customerGroupId = row13.customerGroupId;
update1_tmp.incrementId = row13.incrementId;
update1_tmp.state = row13.state;
update1_tmp.status = row13.status;
update1_tmp.createdAt = row13.createdAt;
update1_tmp.totalValue = row13.totalValue;
update1_tmp.shippingAmount = row13.shippingAmount;
update1_tmp.discountAmount = row13.discountAmount;
update1_tmp.paid = row13.paid;
update1_tmp.subtotal = row13.subtotal;
update1_tmp.totalInvoiced = row13.totalInvoiced;
update1_tmp.weight = row13.weight;
update1_tmp.taxAmount = row13.taxAmount;
update1_tmp.shippingDescription = row13.shippingDescription;
update1_tmp.synced = row13.synced;
update1_tmp.anymarket = row13.anymarket;
update1_tmp.marketplace = row13.marketplace;
update1_tmp.erpId = row13.erpId;
update1_tmp.erpSynced = row13.erpSynced;
update1_tmp.erpError = row13.erpError;
update1_tmp.erpErrorLog = row13.erpErrorLog;
update1 = update1_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'Insert1'
// # Filter conditions 
if( rejectedInnerJoin_tMap_6 ) {
Insert1_tmp.entityId = row13.entityId;
Insert1_tmp.customerGroupId = row13.customerGroupId;
Insert1_tmp.incrementId = row13.incrementId;
Insert1_tmp.state = row13.state;
Insert1_tmp.status = row13.status;
Insert1_tmp.createdAt = row13.createdAt;
Insert1_tmp.totalValue = row13.totalValue;
Insert1_tmp.shippingAmount = row13.shippingAmount;
Insert1_tmp.discountAmount = row13.discountAmount;
Insert1_tmp.paid = row13.paid;
Insert1_tmp.subtotal = row13.subtotal;
Insert1_tmp.totalInvoiced = row13.totalInvoiced;
Insert1_tmp.weight = row13.weight;
Insert1_tmp.taxAmount = row13.taxAmount;
Insert1_tmp.shippingDescription = row13.shippingDescription;
Insert1_tmp.synced = row13.synced;
Insert1_tmp.anymarket = row13.anymarket;
Insert1_tmp.marketplace = row13.marketplace;
Insert1_tmp.erpId = row13.erpId;
Insert1_tmp.erpSynced = row13.erpSynced;
Insert1_tmp.erpError = row13.erpError;
Insert1_tmp.erpErrorLog = row13.erpErrorLog;
Insert1 = Insert1_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "Insert1"
if(Insert1 != null) { 



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert1"
						
						);
					}
					



        whetherReject_tDBOutput_5 = false;
                    if(Insert1.entityId == null) {
pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(1, Insert1.entityId);
}

                    if(Insert1.customerGroupId == null) {
pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(2, Insert1.customerGroupId);
}

                    if(Insert1.incrementId == null) {
pstmt_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(3, Insert1.incrementId);
}

                    if(Insert1.state == null) {
pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(4, Insert1.state);
}

                    if(Insert1.status == null) {
pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(5, Insert1.status);
}

                    if(Insert1.createdAt != null) {
pstmt_tDBOutput_5.setTimestamp(6, new java.sql.Timestamp(Insert1.createdAt.getTime()));
} else {
pstmt_tDBOutput_5.setNull(6, java.sql.Types.TIMESTAMP);
}

                    if(Insert1.totalValue == null) {
pstmt_tDBOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(7, Insert1.totalValue);
}

                    if(Insert1.shippingAmount == null) {
pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(8, Insert1.shippingAmount);
}

                    if(Insert1.discountAmount == null) {
pstmt_tDBOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(9, Insert1.discountAmount);
}

                    if(Insert1.paid == null) {
pstmt_tDBOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(10, Insert1.paid);
}

                    if(Insert1.subtotal == null) {
pstmt_tDBOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(11, Insert1.subtotal);
}

                    if(Insert1.totalInvoiced == null) {
pstmt_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(12, Insert1.totalInvoiced);
}

                    if(Insert1.weight == null) {
pstmt_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(13, Insert1.weight);
}

                    if(Insert1.taxAmount == null) {
pstmt_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(14, Insert1.taxAmount);
}

                    if(Insert1.shippingDescription == null) {
pstmt_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(15, Insert1.shippingDescription);
}

                    if(Insert1.synced == null) {
pstmt_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(16, Insert1.synced);
}

                    if(Insert1.anymarket == null) {
pstmt_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(17, Insert1.anymarket);
}

                    if(Insert1.marketplace == null) {
pstmt_tDBOutput_5.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(18, Insert1.marketplace);
}

                    if(Insert1.erpId == null) {
pstmt_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(19, Insert1.erpId);
}

                    if(Insert1.erpSynced == null) {
pstmt_tDBOutput_5.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(20, Insert1.erpSynced);
}

                    if(Insert1.erpError == null) {
pstmt_tDBOutput_5.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(21, Insert1.erpError);
}

                    if(Insert1.erpErrorLog == null) {
pstmt_tDBOutput_5.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_5.setString(22, Insert1.erpErrorLog);
}

			
    		pstmt_tDBOutput_5.addBatch();
    		nb_line_tDBOutput_5++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_5++;
    		  
    			if ((batchSize_tDBOutput_5 > 0) && (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
                try {
						int countSum_tDBOutput_5 = 0;
						    
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
				    	rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
            	    	batchSizeCounter_tDBOutput_5 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
				    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
				    	String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						}else{
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}
				    	
				    	int countSum_tDBOutput_5 = 0;
						for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}
						rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
				    	
				    	System.err.println(errormessage_tDBOutput_5);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "Insert1"




// Start of branch "update1"
if(update1 != null) { 



	
	/**
	 * [tDBOutput_6 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update1"
						
						);
					}
					



        whetherReject_tDBOutput_6 = false;
                    if(update1.customerGroupId == null) {
pstmt_tDBOutput_6.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(1, update1.customerGroupId);
}

                    if(update1.state == null) {
pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(2, update1.state);
}

                    if(update1.status == null) {
pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(3, update1.status);
}

                    if(update1.createdAt != null) {
pstmt_tDBOutput_6.setTimestamp(4, new java.sql.Timestamp(update1.createdAt.getTime()));
} else {
pstmt_tDBOutput_6.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(update1.totalValue == null) {
pstmt_tDBOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(5, update1.totalValue);
}

                    if(update1.shippingAmount == null) {
pstmt_tDBOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(6, update1.shippingAmount);
}

                    if(update1.discountAmount == null) {
pstmt_tDBOutput_6.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(7, update1.discountAmount);
}

                    if(update1.paid == null) {
pstmt_tDBOutput_6.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(8, update1.paid);
}

                    if(update1.subtotal == null) {
pstmt_tDBOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(9, update1.subtotal);
}

                    if(update1.totalInvoiced == null) {
pstmt_tDBOutput_6.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(10, update1.totalInvoiced);
}

                    if(update1.weight == null) {
pstmt_tDBOutput_6.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(11, update1.weight);
}

                    if(update1.taxAmount == null) {
pstmt_tDBOutput_6.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(12, update1.taxAmount);
}

                    if(update1.shippingDescription == null) {
pstmt_tDBOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(13, update1.shippingDescription);
}

                    if(update1.synced == null) {
pstmt_tDBOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(14, update1.synced);
}

                    if(update1.anymarket == null) {
pstmt_tDBOutput_6.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(15, update1.anymarket);
}

                    if(update1.marketplace == null) {
pstmt_tDBOutput_6.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(16, update1.marketplace);
}

                    if(update1.erpId == null) {
pstmt_tDBOutput_6.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(17, update1.erpId);
}

                    if(update1.erpSynced == null) {
pstmt_tDBOutput_6.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(18, update1.erpSynced);
}

                    if(update1.erpError == null) {
pstmt_tDBOutput_6.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(19, update1.erpError);
}

                    if(update1.erpErrorLog == null) {
pstmt_tDBOutput_6.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(20, update1.erpErrorLog);
}

                    if(update1.entityId == null) {
pstmt_tDBOutput_6.setNull(21 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(21 + count_tDBOutput_6, update1.entityId);
}


                    if(update1.incrementId == null) {
pstmt_tDBOutput_6.setNull(22 + count_tDBOutput_6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_6.setString(22 + count_tDBOutput_6, update1.incrementId);
}


    		pstmt_tDBOutput_6.addBatch();
    		nb_line_tDBOutput_6++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_6++;
    		  
    			if ((batchSize_tDBOutput_6 > 0) && (batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6)) {
                try {
						int countSum_tDBOutput_6 = 0;
						    
						for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
				    	rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
            	    	batchSizeCounter_tDBOutput_6 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
				    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
				    	String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						}else{
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}
				    	
				    	int countSum_tDBOutput_6 = 0;
						for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
							countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
						}
						rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
				    	
				    	System.err.println(errormessage_tDBOutput_6);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_6++;

/**
 * [tDBOutput_6 main ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	

 



/**
 * [tDBOutput_6 process_data_end ] stop
 */

} // End of branch "update1"



	
		} // close loop of lookup 'row12' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "row13"




	
	/**
	 * [tConvertType_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 process_data_end ] stop
 */

} // End of branch "saida2"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tMongoDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";
	
	

 



/**
 * [tMongoDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tMongoDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";
	
	

            }
    globalMap.put("tMongoDBInput_2_NB_LINE", nb_line_tMongoDBInput_2);
 

ok_Hash.put("tMongoDBInput_2", true);
end_Hash.put("tMongoDBInput_2", System.currentTimeMillis());




/**
 * [tMongoDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tConvertType_2 end ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	
      globalMap.put("tConvertType_2_NB_LINE", nb_line_tConvertType_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"saida2");
			  	}
			  	
 

ok_Hash.put("tConvertType_2", true);
end_Hash.put("tConvertType_2", System.currentTimeMillis());




/**
 * [tConvertType_2 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



	    try {
				int countSum_tDBOutput_5 = 0;
				if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {
						
					for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
						
				}
		    	
		    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_5){
globalMap.put("tDBOutput_5_ERROR_MESSAGE",e_tDBOutput_5.getMessage());
	    	java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),sqle_tDBOutput_5=null;
	    	String errormessage_tDBOutput_5;
			if (ne_tDBOutput_5 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_5 = new java.sql.SQLException(e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(), ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
				errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
			}else{
				errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
			}
	    	
	    	int countSum_tDBOutput_5 = 0;
			for(int countEach_tDBOutput_5: e_tDBOutput_5.getUpdateCounts()) {
				countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
			}
			rowsToCommitCount_tDBOutput_5 += countSum_tDBOutput_5;
			
	    		insertedCount_tDBOutput_5 += countSum_tDBOutput_5;
	    	
	    	System.err.println(errormessage_tDBOutput_5);
	    	
		}
	    
        if(pstmt_tDBOutput_5 != null) {
        		
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */




	
	/**
	 * [tDBOutput_6 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



	    try {
				int countSum_tDBOutput_6 = 0;
				if (pstmt_tDBOutput_6 != null && batchSizeCounter_tDBOutput_6 > 0) {
						
					for(int countEach_tDBOutput_6: pstmt_tDBOutput_6.executeBatch()) {
						countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
					}
					rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
						
				}
		    	
		    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_6){
globalMap.put("tDBOutput_6_ERROR_MESSAGE",e_tDBOutput_6.getMessage());
	    	java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),sqle_tDBOutput_6=null;
	    	String errormessage_tDBOutput_6;
			if (ne_tDBOutput_6 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_6 = new java.sql.SQLException(e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(), ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
				errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
			}else{
				errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
			}
	    	
	    	int countSum_tDBOutput_6 = 0;
			for(int countEach_tDBOutput_6: e_tDBOutput_6.getUpdateCounts()) {
				countSum_tDBOutput_6 += (countEach_tDBOutput_6 < 0 ? 0 : countEach_tDBOutput_6);
			}
			rowsToCommitCount_tDBOutput_6 += countSum_tDBOutput_6;
			
	    		updatedCount_tDBOutput_6 += countSum_tDBOutput_6;
	    	
	    	System.err.println(errormessage_tDBOutput_6);
	    	
		}
	    
        if(pstmt_tDBOutput_6 != null) {
        		
            pstmt_tDBOutput_6.close();
            resourceMap.remove("pstmt_tDBOutput_6");
        }
    resourceMap.put("statementClosed_tDBOutput_6", true);

	nb_line_deleted_tDBOutput_6=nb_line_deleted_tDBOutput_6+ deletedCount_tDBOutput_6;
	nb_line_update_tDBOutput_6=nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
	nb_line_inserted_tDBOutput_6=nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
	nb_line_rejected_tDBOutput_6=nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;
	
        globalMap.put("tDBOutput_6_NB_LINE",nb_line_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_UPDATED",nb_line_update_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_DELETED",nb_line_deleted_tDBOutput_6);
        globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_6", true);
end_Hash.put("tDBOutput_6", System.currentTimeMillis());




/**
 * [tDBOutput_6 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tMongoDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
				try{
					
	
	/**
	 * [tMongoDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMongoDBInput_2";
	
	

 



/**
 * [tMongoDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tConvertType_2 finally ] start
	 */

	

	
	
	currentComponent="tConvertType_2";
	
	

 



/**
 * [tConvertType_2 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */




	
	/**
	 * [tDBOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_6";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
                if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_6")) != null) {
                    pstmtToClose_tDBOutput_6.close();
                }
    }
 



/**
 * [tDBOutput_6 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMongoDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row81Struct row81 = new row81Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row80Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_dw_t_mkt_order_service_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row80Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row80Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row81.nm_programa = next_tHashInput_2.nm_programa;
	row81.data_inicio_execucao = next_tHashInput_2.data_inicio_execucao;
	row81.data_termino_execucao = next_tHashInput_2.data_termino_execucao;
	row81.mensagem = next_tHashInput_2.mensagem;
	row81.uuid = next_tHashInput_2.uuid;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row81.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row81.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_mkt_order_service_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMongoDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableComparableLookupRow<row12Struct> {
    final static byte[] commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
    static byte[] commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String entityid;

				public String getEntityid () {
					return this.entityid;
				}

				public Boolean entityidIsNullable(){
				    return true;
				}
				public Boolean entityidIsKey(){
				    return false;
				}
				public Integer entityidLength(){
				    return null;
				}
				public Integer entityidPrecision(){
				    return null;
				}
				public String entityidDefault(){
				
					return null;
				
				}
				public String entityidComment(){
				
				    return "";
				
				}
				public String entityidPattern(){
				
					return "";
				
				}
				public String entityidOriginalDbColumnName(){
				
					return "entityid";
				
				}

				
			    public String incrementid;

				public String getIncrementid () {
					return this.incrementid;
				}

				public Boolean incrementidIsNullable(){
				    return true;
				}
				public Boolean incrementidIsKey(){
				    return false;
				}
				public Integer incrementidLength(){
				    return null;
				}
				public Integer incrementidPrecision(){
				    return null;
				}
				public String incrementidDefault(){
				
					return null;
				
				}
				public String incrementidComment(){
				
				    return "";
				
				}
				public String incrementidPattern(){
				
					return "";
				
				}
				public String incrementidOriginalDbColumnName(){
				
					return "incrementid";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.entityid == null) ? 0 : this.entityid.hashCode());
					
						result = prime * result + ((this.incrementid == null) ? 0 : this.incrementid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row12Struct other = (row12Struct) obj;
		
						if (this.entityid == null) {
							if (other.entityid != null)
								return false;
						
						} else if (!this.entityid.equals(other.entityid))
						
							return false;
					
						if (this.incrementid == null) {
							if (other.incrementid != null)
								return false;
						
						} else if (!this.incrementid.equals(other.incrementid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row12Struct other) {

		other.entityid = this.entityid;
	            other.incrementid = this.incrementid;
	            
	}

	public void copyKeysDataTo(row12Struct other) {

		other.entityid = this.entityid;
	            	other.incrementid = this.incrementid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length) {
				if(length < 1024 && commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service.length == 0) {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[1024];
				} else {
   					commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length);
			strReturn = new String(commonByteArray_PALACIO_FERRAMENTAS_dw_t_mkt_order_service, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityid = readString(dis);
					
					this.incrementid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_PALACIO_FERRAMENTAS_dw_t_mkt_order_service) {

        	try {

        		int length = 0;
		
					this.entityid = readString(dis);
					
					this.incrementid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.entityid,dos);
					
					// String
				
						writeString(this.incrementid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.entityid,dos);
					
					// String
				
						writeString(this.incrementid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("entityid="+entityid);
		sb.append(",incrementid="+incrementid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.entityid, other.entityid);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.incrementid, other.incrementid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tHashInput_3 - inputs:(after_tMongoDBInput_2) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_6 - inputs:(row13,row12) outputs:(Insert1,update1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_dw_t_mkt_order_service_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row5Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row12.entityid = next_tHashInput_3.entityid;
	row12.incrementid = next_tHashInput_3.incrementid;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.entityid = row12.entityid;
				
				row12_HashRow.incrementid = row12.incrementid;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_dw_t_mkt_order_service_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";
	
	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final dw_t_mkt_order_service dw_t_mkt_order_serviceClass = new dw_t_mkt_order_service();

        int exitCode = dw_t_mkt_order_serviceClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = dw_t_mkt_order_service.class.getClassLoader().getResourceAsStream("palacio_ferramentas/dw_t_mkt_order_service_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = dw_t_mkt_order_service.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("MONGODB_HOST", "id_String");
                        if(context.getStringValue("MONGODB_HOST") == null) {
                            context.MONGODB_HOST = null;
                        } else {
                            context.MONGODB_HOST=(String) context.getProperty("MONGODB_HOST");
                        }
                        context.setContextType("MONGODB_DB", "id_String");
                        if(context.getStringValue("MONGODB_DB") == null) {
                            context.MONGODB_DB = null;
                        } else {
                            context.MONGODB_DB=(String) context.getProperty("MONGODB_DB");
                        }
                        context.setContextType("MONGODB_PORT", "id_String");
                        if(context.getStringValue("MONGODB_PORT") == null) {
                            context.MONGODB_PORT = null;
                        } else {
                            context.MONGODB_PORT=(String) context.getProperty("MONGODB_PORT");
                        }
                        context.setContextType("MONGODB_USER", "id_String");
                        if(context.getStringValue("MONGODB_USER") == null) {
                            context.MONGODB_USER = null;
                        } else {
                            context.MONGODB_USER=(String) context.getProperty("MONGODB_USER");
                        }
                        context.setContextType("MONGODB_PASSWORD", "id_String");
                        if(context.getStringValue("MONGODB_PASSWORD") == null) {
                            context.MONGODB_PASSWORD = null;
                        } else {
                            context.MONGODB_PASSWORD=(String) context.getProperty("MONGODB_PASSWORD");
                        }
                        context.setContextType("data", "id_String");
                        if(context.getStringValue("data") == null) {
                            context.data = null;
                        } else {
                            context.data=(String) context.getProperty("data");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("MONGODB_HOST")) {
                context.MONGODB_HOST = (String) parentContextMap.get("MONGODB_HOST");
            }if (parentContextMap.containsKey("MONGODB_DB")) {
                context.MONGODB_DB = (String) parentContextMap.get("MONGODB_DB");
            }if (parentContextMap.containsKey("MONGODB_PORT")) {
                context.MONGODB_PORT = (String) parentContextMap.get("MONGODB_PORT");
            }if (parentContextMap.containsKey("MONGODB_USER")) {
                context.MONGODB_USER = (String) parentContextMap.get("MONGODB_USER");
            }if (parentContextMap.containsKey("MONGODB_PASSWORD")) {
                context.MONGODB_PASSWORD = (String) parentContextMap.get("MONGODB_PASSWORD");
            }if (parentContextMap.containsKey("data")) {
                context.data = (String) parentContextMap.get("data");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : dw_t_mkt_order_service");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     477550 characters generated by Talend Open Studio for Big Data 
 *     on the 17 de fevereiro de 2025 08:47:22 BRT
 ************************************************************************************************/