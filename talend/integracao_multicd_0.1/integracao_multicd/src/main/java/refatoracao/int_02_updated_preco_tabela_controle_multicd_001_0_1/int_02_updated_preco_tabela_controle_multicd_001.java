// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package refatoracao.int_02_updated_preco_tabela_controle_multicd_001_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: int_02_updated_preco_tabela_controle_multicd_001 Purpose: updated_preco_tabela_controle_multicd_010<br>
 * Description:  <br>
 * @author luisll@uol.com.br
 * @version 8.0.1.20230922_0317-SNAPSHOT
 * @status 
 */
public class int_02_updated_preco_tabela_controle_multicd_001 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(versao != null){
				
					this.setProperty("versao", versao.toString());
				
			}
			
			if(programa != null){
				
					this.setProperty("programa", programa.toString());
				
			}
			
			if(AUTCOM_DB != null){
				
					this.setProperty("AUTCOM_DB", AUTCOM_DB.toString());
				
			}
			
			if(AUTCOM_HOST != null){
				
					this.setProperty("AUTCOM_HOST", AUTCOM_HOST.toString());
				
			}
			
			if(AUTCOM_PASSWORD != null){
				
					this.setProperty("AUTCOM_PASSWORD", AUTCOM_PASSWORD.toString());
				
			}
			
			if(AUTCOM_PORT != null){
				
					this.setProperty("AUTCOM_PORT", AUTCOM_PORT.toString());
				
			}
			
			if(AUTCOM_USER != null){
				
					this.setProperty("AUTCOM_USER", AUTCOM_USER.toString());
				
			}
			
			if(POSTGRES_DB != null){
				
					this.setProperty("POSTGRES_DB", POSTGRES_DB.toString());
				
			}
			
			if(POSTGRES_HOST != null){
				
					this.setProperty("POSTGRES_HOST", POSTGRES_HOST.toString());
				
			}
			
			if(POSTGRES_PASSWORD != null){
				
					this.setProperty("POSTGRES_PASSWORD", POSTGRES_PASSWORD.toString());
				
			}
			
			if(POSTGRES_PORT != null){
				
					this.setProperty("POSTGRES_PORT", POSTGRES_PORT.toString());
				
			}
			
			if(POSTGRES_USER != null){
				
					this.setProperty("POSTGRES_USER", POSTGRES_USER.toString());
				
			}
			
			if(WINSPARE_DB != null){
				
					this.setProperty("WINSPARE_DB", WINSPARE_DB.toString());
				
			}
			
			if(WINSPARE_HOST != null){
				
					this.setProperty("WINSPARE_HOST", WINSPARE_HOST.toString());
				
			}
			
			if(WINSPARE_PORT != null){
				
					this.setProperty("WINSPARE_PORT", WINSPARE_PORT.toString());
				
			}
			
			if(WINSPARE_PWD != null){
				
					this.setProperty("WINSPARE_PWD", WINSPARE_PWD.toString());
				
			}
			
			if(WINSPARE_USER != null){
				
					this.setProperty("WINSPARE_USER", WINSPARE_USER.toString());
				
			}
			
			if(JDBC_PARAMETERS != null){
				
					this.setProperty("JDBC_PARAMETERS", JDBC_PARAMETERS.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer versao;
public Integer getVersao(){
	return this.versao;
}
public String programa;
public String getPrograma(){
	return this.programa;
}
public String AUTCOM_DB;
public String getAUTCOM_DB(){
	return this.AUTCOM_DB;
}
public String AUTCOM_HOST;
public String getAUTCOM_HOST(){
	return this.AUTCOM_HOST;
}
public String AUTCOM_PASSWORD;
public String getAUTCOM_PASSWORD(){
	return this.AUTCOM_PASSWORD;
}
public String AUTCOM_PORT;
public String getAUTCOM_PORT(){
	return this.AUTCOM_PORT;
}
public String AUTCOM_USER;
public String getAUTCOM_USER(){
	return this.AUTCOM_USER;
}
public String POSTGRES_DB;
public String getPOSTGRES_DB(){
	return this.POSTGRES_DB;
}
public String POSTGRES_HOST;
public String getPOSTGRES_HOST(){
	return this.POSTGRES_HOST;
}
public String POSTGRES_PASSWORD;
public String getPOSTGRES_PASSWORD(){
	return this.POSTGRES_PASSWORD;
}
public String POSTGRES_PORT;
public String getPOSTGRES_PORT(){
	return this.POSTGRES_PORT;
}
public String POSTGRES_USER;
public String getPOSTGRES_USER(){
	return this.POSTGRES_USER;
}
public String WINSPARE_DB;
public String getWINSPARE_DB(){
	return this.WINSPARE_DB;
}
public String WINSPARE_HOST;
public String getWINSPARE_HOST(){
	return this.WINSPARE_HOST;
}
public String WINSPARE_PORT;
public String getWINSPARE_PORT(){
	return this.WINSPARE_PORT;
}
public String WINSPARE_PWD;
public String getWINSPARE_PWD(){
	return this.WINSPARE_PWD;
}
public String WINSPARE_USER;
public String getWINSPARE_USER(){
	return this.WINSPARE_USER;
}
public String JDBC_PARAMETERS;
public String getJDBC_PARAMETERS(){
	return this.JDBC_PARAMETERS;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "int_02_updated_preco_tabela_controle_multicd_001";
	private final String projectName = "REFATORACAO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				int_02_updated_preco_tabela_controle_multicd_001.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(int_02_updated_preco_tabela_controle_multicd_001.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRowGenerator_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBClose_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_3Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_3", false);
		start_Hash.put("tDBConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_3";
	
	
		int tos_count_tDBConnection_3 = 0;
		


	
            String dbProperties_tDBConnection_3 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_3 = "jdbc:postgresql://"+System.getenv(context.WINSPARE_HOST)+":"+"5432"+"/"+System.getenv(context.WINSPARE_DB);
            
            if(dbProperties_tDBConnection_3 != null && !"".equals(dbProperties_tDBConnection_3.trim())) {
                url_tDBConnection_3 = url_tDBConnection_3 + "?" + dbProperties_tDBConnection_3;
            }
	String dbUser_tDBConnection_3 = System.getenv(context.WINSPARE_USER);
	
	
		
	final String decryptedPassword_tDBConnection_3 = System.getenv(context.WINSPARE_PWD); 
		String dbPwd_tDBConnection_3 = decryptedPassword_tDBConnection_3;
	
	
	java.sql.Connection conn_tDBConnection_3 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_3 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_3 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_3.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_3 = drivers_tDBConnection_3.nextElement();
        if (redShiftDriverNames_tDBConnection_3.contains(d_tDBConnection_3.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_3);
                java.sql.DriverManager.registerDriver(d_tDBConnection_3);
            } catch (java.lang.Exception e_tDBConnection_3) {
globalMap.put("tDBConnection_3_ERROR_MESSAGE",e_tDBConnection_3.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_3 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_3 = java.lang.Class.forName(driverClass_tDBConnection_3);
			globalMap.put("driverClass_tDBConnection_3", driverClass_tDBConnection_3);
		
			conn_tDBConnection_3 = java.sql.DriverManager.getConnection(url_tDBConnection_3,dbUser_tDBConnection_3,dbPwd_tDBConnection_3);

		globalMap.put("conn_tDBConnection_3", conn_tDBConnection_3);
	if (null != conn_tDBConnection_3) {
		
			conn_tDBConnection_3.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_3","");

 



/**
 * [tDBConnection_3 begin ] stop
 */
	
	/**
	 * [tDBConnection_3 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 


	tos_count_tDBConnection_3++;

/**
 * [tDBConnection_3 main ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_3 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 

ok_Hash.put("tDBConnection_3", true);
end_Hash.put("tDBConnection_3", System.currentTimeMillis());




/**
 * [tDBConnection_3 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBConnection_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_3";
	
	

 



/**
 * [tDBConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_3_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";
	
	
		int tos_count_tDBConnection_1 = 0;
		


	
            String dbProperties_tDBConnection_1 = "ApplicationName="+context.programa+"";
            String url_tDBConnection_1 = "jdbc:postgresql://"+System.getenv(context.POSTGRES_HOST)+":"+System.getenv(context.POSTGRES_PORT)+"/"+System.getenv(context.POSTGRES_DB);
            
            if(dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
                url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
            }
	String dbUser_tDBConnection_1 = System.getenv(context.POSTGRES_USER);
	
	
		
	final String decryptedPassword_tDBConnection_1 = System.getenv(context.POSTGRES_PASSWORD); 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
        java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 =  java.sql.DriverManager.getDrivers();
        java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(java.util.Arrays
                .asList("com.amazon.redshift.jdbc.Driver","com.amazon.redshift.jdbc41.Driver","com.amazon.redshift.jdbc42.Driver"));
    while (drivers_tDBConnection_1.hasMoreElements()) {
        java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
        if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
            try {
                java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
                java.sql.DriverManager.registerDriver(d_tDBConnection_1);
            } catch (java.lang.Exception e_tDBConnection_1) {
globalMap.put("tDBConnection_1_ERROR_MESSAGE",e_tDBConnection_1.getMessage());
                    //do nothing
            }
        }
    }
					String driverClass_tDBConnection_1 = "org.postgresql.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("schema_" + "tDBConnection_1","");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tDBConnection_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";
	
	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";
	
	
		int tos_count_tDBConnection_2 = 0;
		
	

	
        String properties_tDBConnection_2 = System.getenv(context.JDBC_PARAMETERS);
        if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
            properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
                properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
                properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBConnection_2 = "jdbc:mysql://" + System.getenv(context.AUTCOM_HOST) + ":" + System.getenv(context.AUTCOM_PORT) + "/" + System.getenv(context.AUTCOM_DB) + "?" + properties_tDBConnection_2;
	String dbUser_tDBConnection_2 = System.getenv(context.AUTCOM_USER);
	
	
		
	final String decryptedPassword_tDBConnection_2 = System.getenv(context.AUTCOM_PASSWORD); 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("db_tDBConnection_2",System.getenv(context.AUTCOM_DB));
 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tRowGenerator_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";
	
	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class insert_logStruct implements routines.system.IPersistableRow<insert_logStruct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				
			    public Integer versao;

				public Integer getVersao () {
					return this.versao;
				}

				public Boolean versaoIsNullable(){
				    return true;
				}
				public Boolean versaoIsKey(){
				    return false;
				}
				public Integer versaoLength(){
				    return null;
				}
				public Integer versaoPrecision(){
				    return null;
				}
				public String versaoDefault(){
				
					return null;
				
				}
				public String versaoComment(){
				
				    return "";
				
				}
				public String versaoPattern(){
				
					return "";
				
				}
				public String versaoOriginalDbColumnName(){
				
					return "versao";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
						this.versao = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
					// Integer
				
						writeInteger(this.versao,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
		sb.append(",versao="+String.valueOf(versao));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(insert_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public java.util.Date datainicio;

				public java.util.Date getDatainicio () {
					return this.datainicio;
				}

				public Boolean datainicioIsNullable(){
				    return true;
				}
				public Boolean datainicioIsKey(){
				    return false;
				}
				public Integer datainicioLength(){
				    return null;
				}
				public Integer datainicioPrecision(){
				    return null;
				}
				public String datainicioDefault(){
				
					return null;
				
				}
				public String datainicioComment(){
				
				    return "";
				
				}
				public String datainicioPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String datainicioOriginalDbColumnName(){
				
					return "datainicio";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.datainicio = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.datainicio,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("datainicio="+String.valueOf(datainicio));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
insert_logStruct insert_log = new insert_logStruct();
row21Struct row21 = new row21Struct();






	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"insert_log");
					}
				
		int tos_count_tDBOutput_1 = 0;
		





String dbschema_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_1 = null;
if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
	tableName_tDBOutput_1 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("dw_log_execucao").toLowerCase();
}


int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

boolean whetherReject_tDBOutput_1 = false;

java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;

	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_1=0;
        java.lang.StringBuilder sb_tDBOutput_1 = new java.lang.StringBuilder();
        sb_tDBOutput_1.append("INSERT INTO \"").append(tableName_tDBOutput_1).append("\" (\"nm_programa\",\"data_inicio_execucao\",\"data_termino_execucao\",\"mensagem\",\"uuid\",\"versao\") VALUES (?,?,?,?,?,?)");

        String insert_tDBOutput_1 = sb_tDBOutput_1.toString();
        
        
	    
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
insert_logStruct insert_log_tmp = new insert_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tRowGenerator_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRowGenerator_1", false);
		start_Hash.put("tRowGenerator_1", System.currentTimeMillis());
		
	
	currentComponent="tRowGenerator_1";
	
	
		int tos_count_tRowGenerator_1 = 0;
		


int nb_line_tRowGenerator_1 = 0;
int nb_max_row_tRowGenerator_1 = 1;


class tRowGenerator_1Randomizer {
	public java.util.Date getRandomdatainicio() {
		
		return TalendDate.getCurrentDate();
		
	}
}
	tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();
	
	for (int itRowGenerator_1=0; itRowGenerator_1<nb_max_row_tRowGenerator_1 ;itRowGenerator_1++) {
		row20.datainicio = randtRowGenerator_1.getRandomdatainicio();
		nb_line_tRowGenerator_1++;
		

 



/**
 * [tRowGenerator_1 begin ] stop
 */
	
	/**
	 * [tRowGenerator_1 main ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 


	tos_count_tRowGenerator_1++;

/**
 * [tRowGenerator_1 main ] stop
 */
	
	/**
	 * [tRowGenerator_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

insert_log = null;


// # Output table : 'insert_log'
insert_log_tmp.nm_programa = context.programa;
insert_log_tmp.data_inicio_execucao = row20.datainicio ;
insert_log_tmp.data_termino_execucao = null;
insert_log_tmp.mensagem = null;
insert_log_tmp.uuid = java.util.UUID.randomUUID().toString();;
insert_log_tmp.versao = context.versao;
insert_log = insert_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "insert_log"
if(insert_log != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"insert_log"
						
						);
					}
					



            row21 = null;
        whetherReject_tDBOutput_1 = false;
                    if(insert_log.nm_programa == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, insert_log.nm_programa);
}

                    if(insert_log.data_inicio_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(insert_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.data_termino_execucao != null) {
pstmt_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(insert_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(insert_log.mensagem == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, insert_log.mensagem);
}

                    if(insert_log.uuid == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, insert_log.uuid);
}

                    if(insert_log.versao == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(6, insert_log.versao);
}

			
            try {
                nb_line_tDBOutput_1++;
				
                int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_1 = true;
                        System.err.print(e.getMessage());
            }
            if(!whetherReject_tDBOutput_1) {
                            row21 = new row21Struct();
                                row21.nm_programa = insert_log.nm_programa;
                                row21.data_inicio_execucao = insert_log.data_inicio_execucao;
                                row21.data_termino_execucao = insert_log.data_termino_execucao;
                                row21.mensagem = insert_log.mensagem;
                                row21.uuid = insert_log.uuid;
                                row21.versao = insert_log.versao;
            }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					



    
		row21Struct oneRow_tHashOutput_7 = new row21Struct();
				
					oneRow_tHashOutput_7.nm_programa = row21.nm_programa;
					oneRow_tHashOutput_7.data_inicio_execucao = row21.data_inicio_execucao;
					oneRow_tHashOutput_7.data_termino_execucao = row21.data_termino_execucao;
					oneRow_tHashOutput_7.mensagem = row21.mensagem;
					oneRow_tHashOutput_7.uuid = row21.uuid;
					oneRow_tHashOutput_7.versao = row21.versao;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "insert_log"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tRowGenerator_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 process_data_end ] stop
 */
	
	/**
	 * [tRowGenerator_1 end ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

}
globalMap.put("tRowGenerator_1_NB_LINE",nb_line_tRowGenerator_1);

 

ok_Hash.put("tRowGenerator_1", true);
end_Hash.put("tRowGenerator_1", System.currentTimeMillis());




/**
 * [tRowGenerator_1 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



        if(pstmt_tDBOutput_1 != null) {
        		
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"insert_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRowGenerator_1 finally ] start
	 */

	

	
	
	currentComponent="tRowGenerator_1";
	
	

 



/**
 * [tRowGenerator_1 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}
	


public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHashInput_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class INSERTStruct implements routines.system.IPersistableRow<INSERTStruct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSERTStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);

		row12Struct row12 = new row12Struct();

		row13Struct row13 = new row13Struct();

		row14Struct row14 = new row14Struct();

			row15Struct row15 = new row15Struct();
INSERTStruct INSERT = new INSERTStruct();
row17Struct row17 = new row17Struct();






	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INSERT");
					}
				
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String ITE_CODEMP;
					String CD_PRODUTO;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.ITE_CODEMP == null) ? 0 : this.ITE_CODEMP.hashCode());
								
								result = prime * result + ((this.CD_PRODUTO == null) ? 0 : this.CD_PRODUTO.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.ITE_CODEMP == null) {
										if (other.ITE_CODEMP != null) 
											return false;
								
									} else if (!this.ITE_CODEMP.equals(other.ITE_CODEMP))
								 
										return false;
								
									if (this.CD_PRODUTO == null) {
										if (other.CD_PRODUTO != null) 
											return false;
								
									} else if (!this.CD_PRODUTO.equals(other.CD_PRODUTO))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSERTStruct INSERT_tmp = new INSERTStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13","row14","row12");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row10Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row10Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row12.ITE_CODEMP = next_tHashInput_1.ITE_CODEMP;
	row12.CD_PRODUTO = next_tHashInput_1.CD_PRODUTO;
	row12.SITUACAO = next_tHashInput_1.SITUACAO;
	row12.VL_ATUAL = next_tHashInput_1.VL_ATUAL;
	row12.VL_ARREDONDAMENTO = next_tHashInput_1.VL_ARREDONDAMENTO;
	row12.MKTPLACE = next_tHashInput_1.MKTPLACE;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row12"
									
							);
						}
						
//////////
 

// for output
			row15 = new row15Struct();
								
			row15.ITE_CODEMP = row12.ITE_CODEMP;								
			row15.CD_PRODUTO = row12.CD_PRODUTO;								
			row15.SITUACAO = row12.SITUACAO;								
			row15.VL_ATUAL = row12.VL_ATUAL;								
			row15.VL_ARREDONDAMENTO = row12.VL_ARREDONDAMENTO;								
			row15.MKTPLACE = row12.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row16HashKey.ALT_CODEMP = row15.ITE_CODEMP ;
                        		    		
                        		    		    row16HashKey.ALT_CODITE = row15.CD_PRODUTO ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.ALT_CODEMP = '" + row16HashKey.ALT_CODEMP + "', row16.ALT_CODITE = '" + row16HashKey.ALT_CODITE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

INSERT = null;


// # Output table : 'INSERT'
INSERT_tmp.ITE_CODEMP = row15.ITE_CODEMP ;
INSERT_tmp.CD_PRODUTO = row15.CD_PRODUTO ;
INSERT_tmp.SITUACAO = row15.SITUACAO ;
INSERT_tmp.VL_ATUAL = row15.VL_ATUAL ;
INSERT_tmp.VL_ARREDONDAMENTO = row15.VL_ARREDONDAMENTO ;
INSERT_tmp.ALT_VE7ANT = row16.ALT_VE7ANT ;
INSERT_tmp.MKTPLACE = row15.MKTPLACE ;
INSERT = INSERT_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERT"
if(INSERT != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERT"
						
						);
					}
					
row17 = null;			
if(INSERT.ITE_CODEMP == null){
	finder_tUniqRow_1.ITE_CODEMP = null;
}else{
	finder_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	finder_tUniqRow_1.CD_PRODUTO = null;
}else{
	finder_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(INSERT.ITE_CODEMP == null){
	new_tUniqRow_1.ITE_CODEMP = null;
}else{
	new_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	new_tUniqRow_1.CD_PRODUTO = null;
}else{
	new_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.ITE_CODEMP = INSERT.ITE_CODEMP;			row17.CD_PRODUTO = INSERT.CD_PRODUTO;			row17.SITUACAO = INSERT.SITUACAO;			row17.VL_ATUAL = INSERT.VL_ATUAL;			row17.VL_ARREDONDAMENTO = INSERT.VL_ARREDONDAMENTO;			row17.ALT_VE7ANT = INSERT.ALT_VE7ANT;			row17.MKTPLACE = INSERT.MKTPLACE;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_5 = new row17Struct();
				
					oneRow_tHashOutput_5.ITE_CODEMP = row17.ITE_CODEMP;
					oneRow_tHashOutput_5.CD_PRODUTO = row17.CD_PRODUTO;
					oneRow_tHashOutput_5.SITUACAO = row17.SITUACAO;
					oneRow_tHashOutput_5.VL_ATUAL = row17.VL_ATUAL;
					oneRow_tHashOutput_5.VL_ARREDONDAMENTO = row17.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_5.ALT_VE7ANT = row17.ALT_VE7ANT;
					oneRow_tHashOutput_5.MKTPLACE = row17.MKTPLACE;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "INSERT"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */
	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row3Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row13.ITE_CODEMP = next_tHashInput_3.ITE_CODEMP;
	row13.CD_PRODUTO = next_tHashInput_3.CD_PRODUTO;
	row13.SITUACAO = next_tHashInput_3.SITUACAO;
	row13.VL_ATUAL = next_tHashInput_3.VL_ATUAL;
	row13.VL_ARREDONDAMENTO = next_tHashInput_3.VL_ARREDONDAMENTO;
	row13.MKTPLACE = next_tHashInput_3.MKTPLACE;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row13"
									
							);
						}
						
//////////
 

// for output
			row15 = new row15Struct();
								
			row15.ITE_CODEMP = row13.ITE_CODEMP;								
			row15.CD_PRODUTO = row13.CD_PRODUTO;								
			row15.SITUACAO = row13.SITUACAO;								
			row15.VL_ATUAL = row13.VL_ATUAL;								
			row15.VL_ARREDONDAMENTO = row13.VL_ARREDONDAMENTO;								
			row15.MKTPLACE = row13.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row16HashKey.ALT_CODEMP = row15.ITE_CODEMP ;
                        		    		
                        		    		    row16HashKey.ALT_CODITE = row15.CD_PRODUTO ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.ALT_CODEMP = '" + row16HashKey.ALT_CODEMP + "', row16.ALT_CODITE = '" + row16HashKey.ALT_CODITE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

INSERT = null;


// # Output table : 'INSERT'
INSERT_tmp.ITE_CODEMP = row15.ITE_CODEMP ;
INSERT_tmp.CD_PRODUTO = row15.CD_PRODUTO ;
INSERT_tmp.SITUACAO = row15.SITUACAO ;
INSERT_tmp.VL_ATUAL = row15.VL_ATUAL ;
INSERT_tmp.VL_ARREDONDAMENTO = row15.VL_ARREDONDAMENTO ;
INSERT_tmp.ALT_VE7ANT = row16.ALT_VE7ANT ;
INSERT_tmp.MKTPLACE = row15.MKTPLACE ;
INSERT = INSERT_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERT"
if(INSERT != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERT"
						
						);
					}
					
row17 = null;			
if(INSERT.ITE_CODEMP == null){
	finder_tUniqRow_1.ITE_CODEMP = null;
}else{
	finder_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	finder_tUniqRow_1.CD_PRODUTO = null;
}else{
	finder_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(INSERT.ITE_CODEMP == null){
	new_tUniqRow_1.ITE_CODEMP = null;
}else{
	new_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	new_tUniqRow_1.CD_PRODUTO = null;
}else{
	new_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.ITE_CODEMP = INSERT.ITE_CODEMP;			row17.CD_PRODUTO = INSERT.CD_PRODUTO;			row17.SITUACAO = INSERT.SITUACAO;			row17.VL_ATUAL = INSERT.VL_ATUAL;			row17.VL_ARREDONDAMENTO = INSERT.VL_ARREDONDAMENTO;			row17.ALT_VE7ANT = INSERT.ALT_VE7ANT;			row17.MKTPLACE = INSERT.MKTPLACE;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_5 = new row17Struct();
				
					oneRow_tHashOutput_5.ITE_CODEMP = row17.ITE_CODEMP;
					oneRow_tHashOutput_5.CD_PRODUTO = row17.CD_PRODUTO;
					oneRow_tHashOutput_5.SITUACAO = row17.SITUACAO;
					oneRow_tHashOutput_5.VL_ATUAL = row17.VL_ATUAL;
					oneRow_tHashOutput_5.VL_ARREDONDAMENTO = row17.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_5.ALT_VE7ANT = row17.ALT_VE7ANT;
					oneRow_tHashOutput_5.MKTPLACE = row17.MKTPLACE;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "INSERT"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */
	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row6Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row6Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row14.ITE_CODEMP = next_tHashInput_4.ITE_CODEMP;
	row14.CD_PRODUTO = next_tHashInput_4.CD_PRODUTO;
	row14.SITUACAO = next_tHashInput_4.SITUACAO;
	row14.VL_ATUAL = next_tHashInput_4.VL_ATUAL;
	row14.VL_ARREDONDAMENTO = next_tHashInput_4.VL_ARREDONDAMENTO;
	row14.MKTPLACE = next_tHashInput_4.MKTPLACE;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row14"
									
							);
						}
						
//////////
 

// for output
			row15 = new row15Struct();
								
			row15.ITE_CODEMP = row14.ITE_CODEMP;								
			row15.CD_PRODUTO = row14.CD_PRODUTO;								
			row15.SITUACAO = row14.SITUACAO;								
			row15.VL_ATUAL = row14.VL_ATUAL;								
			row15.VL_ARREDONDAMENTO = row14.VL_ARREDONDAMENTO;								
			row15.MKTPLACE = row14.MKTPLACE;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row16HashKey.ALT_CODEMP = row15.ITE_CODEMP ;
                        		    		
                        		    		    row16HashKey.ALT_CODITE = row15.CD_PRODUTO ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.ALT_CODEMP = '" + row16HashKey.ALT_CODEMP + "', row16.ALT_CODITE = '" + row16HashKey.ALT_CODITE + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

INSERT = null;


// # Output table : 'INSERT'
INSERT_tmp.ITE_CODEMP = row15.ITE_CODEMP ;
INSERT_tmp.CD_PRODUTO = row15.CD_PRODUTO ;
INSERT_tmp.SITUACAO = row15.SITUACAO ;
INSERT_tmp.VL_ATUAL = row15.VL_ATUAL ;
INSERT_tmp.VL_ARREDONDAMENTO = row15.VL_ARREDONDAMENTO ;
INSERT_tmp.ALT_VE7ANT = row16.ALT_VE7ANT ;
INSERT_tmp.MKTPLACE = row15.MKTPLACE ;
INSERT = INSERT_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "INSERT"
if(INSERT != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INSERT"
						
						);
					}
					
row17 = null;			
if(INSERT.ITE_CODEMP == null){
	finder_tUniqRow_1.ITE_CODEMP = null;
}else{
	finder_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	finder_tUniqRow_1.CD_PRODUTO = null;
}else{
	finder_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(INSERT.ITE_CODEMP == null){
	new_tUniqRow_1.ITE_CODEMP = null;
}else{
	new_tUniqRow_1.ITE_CODEMP = INSERT.ITE_CODEMP.toLowerCase();
}
if(INSERT.CD_PRODUTO == null){
	new_tUniqRow_1.CD_PRODUTO = null;
}else{
	new_tUniqRow_1.CD_PRODUTO = INSERT.CD_PRODUTO.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row17 == null){ 
	
	row17 = new row17Struct();
}row17.ITE_CODEMP = INSERT.ITE_CODEMP;			row17.CD_PRODUTO = INSERT.CD_PRODUTO;			row17.SITUACAO = INSERT.SITUACAO;			row17.VL_ATUAL = INSERT.VL_ATUAL;			row17.VL_ARREDONDAMENTO = INSERT.VL_ARREDONDAMENTO;			row17.ALT_VE7ANT = INSERT.ALT_VE7ANT;			row17.MKTPLACE = INSERT.MKTPLACE;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_5 = new row17Struct();
				
					oneRow_tHashOutput_5.ITE_CODEMP = row17.ITE_CODEMP;
					oneRow_tHashOutput_5.CD_PRODUTO = row17.CD_PRODUTO;
					oneRow_tHashOutput_5.SITUACAO = row17.SITUACAO;
					oneRow_tHashOutput_5.VL_ATUAL = row17.VL_ATUAL;
					oneRow_tHashOutput_5.VL_ARREDONDAMENTO = row17.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_5.ALT_VE7ANT = row17.ALT_VE7ANT;
					oneRow_tHashOutput_5.MKTPLACE = row17.MKTPLACE;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "INSERT"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13","row14","row12");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INSERT");
			  	}
			  	
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";
	
	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String cd_produto;

				public String getCd_produto () {
					return this.cd_produto;
				}

				public Boolean cd_produtoIsNullable(){
				    return true;
				}
				public Boolean cd_produtoIsKey(){
				    return true;
				}
				public Integer cd_produtoLength(){
				    return 6;
				}
				public Integer cd_produtoPrecision(){
				    return null;
				}
				public String cd_produtoDefault(){
				
					return null;
				
				}
				public String cd_produtoComment(){
				
				    return "";
				
				}
				public String cd_produtoPattern(){
				
					return "";
				
				}
				public String cd_produtoOriginalDbColumnName(){
				
					return "cd_produto";
				
				}

				
			    public BigDecimal valor_atual_001;

				public BigDecimal getValor_atual_001 () {
					return this.valor_atual_001;
				}

				public Boolean valor_atual_001IsNullable(){
				    return true;
				}
				public Boolean valor_atual_001IsKey(){
				    return false;
				}
				public Integer valor_atual_001Length(){
				    return 12;
				}
				public Integer valor_atual_001Precision(){
				    return 2;
				}
				public String valor_atual_001Default(){
				
					return null;
				
				}
				public String valor_atual_001Comment(){
				
				    return "";
				
				}
				public String valor_atual_001Pattern(){
				
					return "";
				
				}
				public String valor_atual_001OriginalDbColumnName(){
				
					return "valor_atual_001";
				
				}

				
			    public BigDecimal vl_arredondamento_001;

				public BigDecimal getVl_arredondamento_001 () {
					return this.vl_arredondamento_001;
				}

				public Boolean vl_arredondamento_001IsNullable(){
				    return true;
				}
				public Boolean vl_arredondamento_001IsKey(){
				    return false;
				}
				public Integer vl_arredondamento_001Length(){
				    return 12;
				}
				public Integer vl_arredondamento_001Precision(){
				    return 2;
				}
				public String vl_arredondamento_001Default(){
				
					return null;
				
				}
				public String vl_arredondamento_001Comment(){
				
				    return "";
				
				}
				public String vl_arredondamento_001Pattern(){
				
					return "";
				
				}
				public String vl_arredondamento_001OriginalDbColumnName(){
				
					return "vl_arredondamento_001";
				
				}

				
			    public BigDecimal vl_anterior_001;

				public BigDecimal getVl_anterior_001 () {
					return this.vl_anterior_001;
				}

				public Boolean vl_anterior_001IsNullable(){
				    return true;
				}
				public Boolean vl_anterior_001IsKey(){
				    return false;
				}
				public Integer vl_anterior_001Length(){
				    return 12;
				}
				public Integer vl_anterior_001Precision(){
				    return 2;
				}
				public String vl_anterior_001Default(){
				
					return null;
				
				}
				public String vl_anterior_001Comment(){
				
				    return "";
				
				}
				public String vl_anterior_001Pattern(){
				
					return "";
				
				}
				public String vl_anterior_001OriginalDbColumnName(){
				
					return "vl_anterior_001";
				
				}

				
			    public java.util.Date dt_atualizacao_preco;

				public java.util.Date getDt_atualizacao_preco () {
					return this.dt_atualizacao_preco;
				}

				public Boolean dt_atualizacao_precoIsNullable(){
				    return true;
				}
				public Boolean dt_atualizacao_precoIsKey(){
				    return false;
				}
				public Integer dt_atualizacao_precoLength(){
				    return null;
				}
				public Integer dt_atualizacao_precoPrecision(){
				    return null;
				}
				public String dt_atualizacao_precoDefault(){
				
					return null;
				
				}
				public String dt_atualizacao_precoComment(){
				
				    return "";
				
				}
				public String dt_atualizacao_precoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String dt_atualizacao_precoOriginalDbColumnName(){
				
					return "dt_atualizacao_preco";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cd_produto == null) ? 0 : this.cd_produto.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out3Struct other = (out3Struct) obj;
		
						if (this.cd_produto == null) {
							if (other.cd_produto != null)
								return false;
						
						} else if (!this.cd_produto.equals(other.cd_produto))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out3Struct other) {

		other.cd_produto = this.cd_produto;
	            other.valor_atual_001 = this.valor_atual_001;
	            other.vl_arredondamento_001 = this.vl_arredondamento_001;
	            other.vl_anterior_001 = this.vl_anterior_001;
	            other.dt_atualizacao_preco = this.dt_atualizacao_preco;
	            
	}

	public void copyKeysDataTo(out3Struct other) {

		other.cd_produto = this.cd_produto;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_produto = readString(dis);
					
						this.valor_atual_001 = (BigDecimal) dis.readObject();
					
						this.vl_arredondamento_001 = (BigDecimal) dis.readObject();
					
						this.vl_anterior_001 = (BigDecimal) dis.readObject();
					
					this.dt_atualizacao_preco = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_produto = readString(dis);
					
						this.valor_atual_001 = (BigDecimal) dis.readObject();
					
						this.vl_arredondamento_001 = (BigDecimal) dis.readObject();
					
						this.vl_anterior_001 = (BigDecimal) dis.readObject();
					
					this.dt_atualizacao_preco = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd_produto,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_atual_001);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_arredondamento_001);
					
					// BigDecimal
				
       			    	dos.writeObject(this.vl_anterior_001);
					
					// java.util.Date
				
						writeDate(this.dt_atualizacao_preco,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.cd_produto,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_atual_001);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_arredondamento_001);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.vl_anterior_001);
					
					// java.util.Date
				
						writeDate(this.dt_atualizacao_preco,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd_produto="+cd_produto);
		sb.append(",valor_atual_001="+String.valueOf(valor_atual_001));
		sb.append(",vl_arredondamento_001="+String.valueOf(vl_arredondamento_001));
		sb.append(",vl_anterior_001="+String.valueOf(vl_anterior_001));
		sb.append(",dt_atualizacao_preco="+String.valueOf(dt_atualizacao_preco));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cd_produto, other.cd_produto);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALT_VE7ANT);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);

		row2Struct row2 = new row2Struct();
out3Struct out3 = new out3Struct();





	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tDBOutput_2 = 0;
		





String dbschema_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("schema_" + "tDBConnection_3");
	

String tableName_tDBOutput_2 = null;
if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
	tableName_tDBOutput_2 = ("control_price_multicd").toLowerCase();
} else {
	tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("control_price_multicd").toLowerCase();
}

        int updateKeyCount_tDBOutput_2 = 1;
        if(updateKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_2 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rowsToCommitCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;

boolean whetherReject_tDBOutput_2 = false;

java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;

	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	
	


   int batchSize_tDBOutput_2 = 1000;
   int batchSizeCounter_tDBOutput_2=0;

int count_tDBOutput_2=0;
	    String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2 + "\" SET \"valor_atual_001\" = ?,\"vl_arredondamento_001\" = ?,\"vl_anterior_001\" = ?,\"dt_atualizacao_preco\" = ? WHERE \"cd_produto\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
	    resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
	    

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row17Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row17Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row2.ITE_CODEMP = next_tHashInput_2.ITE_CODEMP;
	row2.CD_PRODUTO = next_tHashInput_2.CD_PRODUTO;
	row2.SITUACAO = next_tHashInput_2.SITUACAO;
	row2.VL_ATUAL = next_tHashInput_2.VL_ATUAL;
	row2.VL_ARREDONDAMENTO = next_tHashInput_2.VL_ARREDONDAMENTO;
	row2.ALT_VE7ANT = next_tHashInput_2.ALT_VE7ANT;
	row2.MKTPLACE = next_tHashInput_2.MKTPLACE;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row19Struct row19 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row19HashKey.cd_produto = row2.CD_PRODUTO ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row19.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
	
		  								forceLooprow19 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow19 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row19 != null && tHash_Lookup_row19.hasNext()) || forceLooprow19) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row19'
									
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								
								if(!forceLooprow19) { // G 46
								
							
								 
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow19 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out3 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'out3'
out3_tmp.cd_produto = row2.CD_PRODUTO;
out3_tmp.valor_atual_001 = row2.VL_ATUAL ;
out3_tmp.vl_arredondamento_001 = row2.VL_ARREDONDAMENTO ;
out3_tmp.vl_anterior_001 = row2.ALT_VE7ANT ;
out3_tmp.dt_atualizacao_preco = TalendDate.getCurrentDate();
out3 = out3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					



        whetherReject_tDBOutput_2 = false;
                    pstmt_tDBOutput_2.setBigDecimal(1, out3.valor_atual_001);

                    pstmt_tDBOutput_2.setBigDecimal(2, out3.vl_arredondamento_001);

                    pstmt_tDBOutput_2.setBigDecimal(3, out3.vl_anterior_001);

                    if(out3.dt_atualizacao_preco != null) {
pstmt_tDBOutput_2.setTimestamp(4, new java.sql.Timestamp(out3.dt_atualizacao_preco.getTime()));
} else {
pstmt_tDBOutput_2.setNull(4, java.sql.Types.TIMESTAMP);
}

                    if(out3.cd_produto == null) {
pstmt_tDBOutput_2.setNull(5 + count_tDBOutput_2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_2.setString(5 + count_tDBOutput_2, out3.cd_produto);
}


    		pstmt_tDBOutput_2.addBatch();
    		nb_line_tDBOutput_2++;
    		  
    		  
    		  batchSizeCounter_tDBOutput_2++;
    		  
    			if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
                try {
						int countSum_tDBOutput_2 = 0;
						    
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
				    	rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
            	    	batchSizeCounter_tDBOutput_2 = 0;
                }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
				    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
				    	String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						}else{
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}
				    	
				    	int countSum_tDBOutput_2 = 0;
						for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
				    	
				    	System.err.println(errormessage_tDBOutput_2);
				    	
					}
    			}
    		

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "out3"



	
		} // close loop of lookup 'row19' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



	    try {
				int countSum_tDBOutput_2 = 0;
				if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {
						
					for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
						
				}
		    	
		    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
		    	
	    }catch (java.sql.BatchUpdateException e_tDBOutput_2){
globalMap.put("tDBOutput_2_ERROR_MESSAGE",e_tDBOutput_2.getMessage());
	    	java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),sqle_tDBOutput_2=null;
	    	String errormessage_tDBOutput_2;
			if (ne_tDBOutput_2 != null) {
				// build new exception to provide the original cause
				sqle_tDBOutput_2 = new java.sql.SQLException(e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(), ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
				errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
			}else{
				errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
			}
	    	
	    	int countSum_tDBOutput_2 = 0;
			for(int countEach_tDBOutput_2: e_tDBOutput_2.getUpdateCounts()) {
				countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
			}
			rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
			
	    		updatedCount_tDBOutput_2 += countSum_tDBOutput_2;
	    	
	    	System.err.println(errormessage_tDBOutput_2);
	    	
		}
	    
        if(pstmt_tDBOutput_2 != null) {
        		
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tHashInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class update_logStruct implements routines.system.IPersistableRow<update_logStruct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(update_logStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String nm_programa;

				public String getNm_programa () {
					return this.nm_programa;
				}

				public Boolean nm_programaIsNullable(){
				    return true;
				}
				public Boolean nm_programaIsKey(){
				    return false;
				}
				public Integer nm_programaLength(){
				    return 50;
				}
				public Integer nm_programaPrecision(){
				    return null;
				}
				public String nm_programaDefault(){
				
					return null;
				
				}
				public String nm_programaComment(){
				
				    return "";
				
				}
				public String nm_programaPattern(){
				
					return "";
				
				}
				public String nm_programaOriginalDbColumnName(){
				
					return "nm_programa";
				
				}

				
			    public java.util.Date data_inicio_execucao;

				public java.util.Date getData_inicio_execucao () {
					return this.data_inicio_execucao;
				}

				public Boolean data_inicio_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_inicio_execucaoIsKey(){
				    return false;
				}
				public Integer data_inicio_execucaoLength(){
				    return null;
				}
				public Integer data_inicio_execucaoPrecision(){
				    return null;
				}
				public String data_inicio_execucaoDefault(){
				
					return null;
				
				}
				public String data_inicio_execucaoComment(){
				
				    return "";
				
				}
				public String data_inicio_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_inicio_execucaoOriginalDbColumnName(){
				
					return "data_inicio_execucao";
				
				}

				
			    public java.util.Date data_termino_execucao;

				public java.util.Date getData_termino_execucao () {
					return this.data_termino_execucao;
				}

				public Boolean data_termino_execucaoIsNullable(){
				    return true;
				}
				public Boolean data_termino_execucaoIsKey(){
				    return false;
				}
				public Integer data_termino_execucaoLength(){
				    return null;
				}
				public Integer data_termino_execucaoPrecision(){
				    return null;
				}
				public String data_termino_execucaoDefault(){
				
					return null;
				
				}
				public String data_termino_execucaoComment(){
				
				    return "";
				
				}
				public String data_termino_execucaoPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String data_termino_execucaoOriginalDbColumnName(){
				
					return "data_termino_execucao";
				
				}

				
			    public String mensagem;

				public String getMensagem () {
					return this.mensagem;
				}

				public Boolean mensagemIsNullable(){
				    return true;
				}
				public Boolean mensagemIsKey(){
				    return false;
				}
				public Integer mensagemLength(){
				    return 100;
				}
				public Integer mensagemPrecision(){
				    return null;
				}
				public String mensagemDefault(){
				
					return null;
				
				}
				public String mensagemComment(){
				
				    return "";
				
				}
				public String mensagemPattern(){
				
					return "yyyy-MM-dd";
				
				}
				public String mensagemOriginalDbColumnName(){
				
					return "mensagem";
				
				}

				
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}

				public Boolean uuidIsNullable(){
				    return true;
				}
				public Boolean uuidIsKey(){
				    return false;
				}
				public Integer uuidLength(){
				    return 50;
				}
				public Integer uuidPrecision(){
				    return null;
				}
				public String uuidDefault(){
				
					return null;
				
				}
				public String uuidComment(){
				
				    return "";
				
				}
				public String uuidPattern(){
				
					return "";
				
				}
				public String uuidOriginalDbColumnName(){
				
					return "uuid";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.nm_programa = readString(dis);
					
					this.data_inicio_execucao = readDate(dis);
					
					this.data_termino_execucao = readDate(dis);
					
					this.mensagem = readString(dis);
					
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.nm_programa,dos);
					
					// java.util.Date
				
						writeDate(this.data_inicio_execucao,dos);
					
					// java.util.Date
				
						writeDate(this.data_termino_execucao,dos);
					
					// String
				
						writeString(this.mensagem,dos);
					
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("nm_programa="+nm_programa);
		sb.append(",data_inicio_execucao="+String.valueOf(data_inicio_execucao));
		sb.append(",data_termino_execucao="+String.valueOf(data_termino_execucao));
		sb.append(",mensagem="+mensagem);
		sb.append(",uuid="+uuid);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
update_logStruct update_log = new update_logStruct();





	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"update_log");
					}
				
		int tos_count_tDBOutput_3 = 0;
		





String dbschema_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("schema_" + "tDBConnection_1");
	

String tableName_tDBOutput_3 = null;
if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
	tableName_tDBOutput_3 = ("dw_log_execucao").toLowerCase();
} else {
	tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("dw_log_execucao").toLowerCase();
}

        int updateKeyCount_tDBOutput_3 = 1;
        if(updateKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_3 == 5 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }

int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rowsToCommitCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;

boolean whetherReject_tDBOutput_3 = false;

java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;

	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	
	



int count_tDBOutput_3=0;
	    String update_tDBOutput_3 = "UPDATE \"" + tableName_tDBOutput_3 + "\" SET \"nm_programa\" = ?,\"data_inicio_execucao\" = ?,\"data_termino_execucao\" = ?,\"mensagem\" = ? WHERE \"uuid\" = ?";
	    java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(update_tDBOutput_3);
	    resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
	    

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
update_logStruct update_log_tmp = new update_logStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row21Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row21Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row21Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row22.nm_programa = next_tHashInput_7.nm_programa;
	row22.data_inicio_execucao = next_tHashInput_7.data_inicio_execucao;
	row22.data_termino_execucao = next_tHashInput_7.data_termino_execucao;
	row22.mensagem = next_tHashInput_7.mensagem;
	row22.uuid = next_tHashInput_7.uuid;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

update_log = null;


// # Output table : 'update_log'
update_log_tmp.nm_programa = context.programa;
update_log_tmp.data_inicio_execucao = row22.data_inicio_execucao;
update_log_tmp.data_termino_execucao = TalendDate.getCurrentDate();
update_log_tmp.mensagem = "Finalizado com sucesso";
update_log_tmp.uuid = row22.uuid ;
update_log = update_log_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "update_log"
if(update_log != null) { 



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"update_log"
						
						);
					}
					



        whetherReject_tDBOutput_3 = false;
                    if(update_log.nm_programa == null) {
pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(1, update_log.nm_programa);
}

                    if(update_log.data_inicio_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(2, new java.sql.Timestamp(update_log.data_inicio_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(2, java.sql.Types.TIMESTAMP);
}

                    if(update_log.data_termino_execucao != null) {
pstmt_tDBOutput_3.setTimestamp(3, new java.sql.Timestamp(update_log.data_termino_execucao.getTime()));
} else {
pstmt_tDBOutput_3.setNull(3, java.sql.Types.TIMESTAMP);
}

                    if(update_log.mensagem == null) {
pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(4, update_log.mensagem);
}

                    if(update_log.uuid == null) {
pstmt_tDBOutput_3.setNull(5 + count_tDBOutput_3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_3.setString(5 + count_tDBOutput_3, update_log.uuid);
}


            try {
                nb_line_tDBOutput_3++;
				
                int processedCount_tDBOutput_3 = pstmt_tDBOutput_3.executeUpdate();
                updatedCount_tDBOutput_3 += processedCount_tDBOutput_3;
                rowsToCommitCount_tDBOutput_3 += processedCount_tDBOutput_3;
				
            } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_3_ERROR_MESSAGE",e.getMessage());
				
                whetherReject_tDBOutput_3 = true;
                        System.err.print(e.getMessage());
            }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "update_log"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



        if(pstmt_tDBOutput_3 != null) {
        		
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    

	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"update_log");
			  	}
			  	
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tDBClose_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";
	
	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";
	
	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");

	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
		
			conn_tDBClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tDBConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());




/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBClose_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";
	
	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";
	
	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());




/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBClose_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tDBClose_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";
	
	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tDBClose_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBClose_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_3", false);
		start_Hash.put("tDBClose_3", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_3";
	
	
		int tos_count_tDBClose_3 = 0;
		

 



/**
 * [tDBClose_3 begin ] stop
 */
	
	/**
	 * [tDBClose_3 main ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	



	java.sql.Connection conn_tDBClose_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
	if(conn_tDBClose_3 != null && !conn_tDBClose_3.isClosed())
	{
        conn_tDBClose_3.close();
	}

 


	tos_count_tDBClose_3++;

/**
 * [tDBClose_3 main ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_3 end ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 

ok_Hash.put("tDBClose_3", true);
end_Hash.put("tDBClose_3", System.currentTimeMillis());




/**
 * [tDBClose_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_3 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_3";
	
	

 



/**
 * [tDBClose_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_3_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String cd_emp;

				public String getCd_emp () {
					return this.cd_emp;
				}

				public Boolean cd_empIsNullable(){
				    return true;
				}
				public Boolean cd_empIsKey(){
				    return true;
				}
				public Integer cd_empLength(){
				    return 3;
				}
				public Integer cd_empPrecision(){
				    return null;
				}
				public String cd_empDefault(){
				
					return null;
				
				}
				public String cd_empComment(){
				
				    return "";
				
				}
				public String cd_empPattern(){
				
					return "";
				
				}
				public String cd_empOriginalDbColumnName(){
				
					return "cd_emp";
				
				}

				
			    public String cd_produto;

				public String getCd_produto () {
					return this.cd_produto;
				}

				public Boolean cd_produtoIsNullable(){
				    return true;
				}
				public Boolean cd_produtoIsKey(){
				    return true;
				}
				public Integer cd_produtoLength(){
				    return 6;
				}
				public Integer cd_produtoPrecision(){
				    return null;
				}
				public String cd_produtoDefault(){
				
					return null;
				
				}
				public String cd_produtoComment(){
				
				    return "";
				
				}
				public String cd_produtoPattern(){
				
					return "";
				
				}
				public String cd_produtoOriginalDbColumnName(){
				
					return "cd_produto";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cd_produto == null) ? 0 : this.cd_produto.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.cd_produto == null) {
							if (other.cd_produto != null)
								return false;
						
						} else if (!this.cd_produto.equals(other.cd_produto))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.cd_emp = this.cd_emp;
	            other.cd_produto = this.cd_produto;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.cd_produto = this.cd_produto;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_produto = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_produto = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd_produto,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.cd_produto,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.cd_emp = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.cd_emp = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.cd_emp, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.cd_emp, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd_emp="+cd_emp);
		sb.append(",cd_produto="+cd_produto);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cd_produto, other.cd_produto);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tHashInput_6 - inputs:(after_tHashInput_2) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_4 - inputs:(row2,row19) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row18Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row18Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row19.cd_emp = next_tHashInput_6.cd_emp;
	row19.cd_produto = next_tHashInput_6.cd_produto;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.cd_emp = row19.cd_emp;
				
				row19_HashRow.cd_produto = row19.cd_produto;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";
	
	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ALT_CODEMP;

				public String getALT_CODEMP () {
					return this.ALT_CODEMP;
				}

				public Boolean ALT_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ALT_CODEMPIsKey(){
				    return false;
				}
				public Integer ALT_CODEMPLength(){
				    return null;
				}
				public Integer ALT_CODEMPPrecision(){
				    return null;
				}
				public String ALT_CODEMPDefault(){
				
					return null;
				
				}
				public String ALT_CODEMPComment(){
				
				    return "";
				
				}
				public String ALT_CODEMPPattern(){
				
					return "";
				
				}
				public String ALT_CODEMPOriginalDbColumnName(){
				
					return "ALT_CODEMP";
				
				}

				
			    public String ALT_CODITE;

				public String getALT_CODITE () {
					return this.ALT_CODITE;
				}

				public Boolean ALT_CODITEIsNullable(){
				    return true;
				}
				public Boolean ALT_CODITEIsKey(){
				    return false;
				}
				public Integer ALT_CODITELength(){
				    return null;
				}
				public Integer ALT_CODITEPrecision(){
				    return null;
				}
				public String ALT_CODITEDefault(){
				
					return null;
				
				}
				public String ALT_CODITEComment(){
				
				    return "";
				
				}
				public String ALT_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ALT_CODITEOriginalDbColumnName(){
				
					return "ALT_CODITE";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public java.util.Date DT_ULTIMA_ALTERACAO;

				public java.util.Date getDT_ULTIMA_ALTERACAO () {
					return this.DT_ULTIMA_ALTERACAO;
				}

				public Boolean DT_ULTIMA_ALTERACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_ALTERACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_ALTERACAOLength(){
				    return null;
				}
				public Integer DT_ULTIMA_ALTERACAOPrecision(){
				    return null;
				}
				public String DT_ULTIMA_ALTERACAODefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_ALTERACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_ALTERACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTIMA_ALTERACAOOriginalDbColumnName(){
				
					return "DT_ULTIMA_ALTERACAO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ALT_CODEMP == null) ? 0 : this.ALT_CODEMP.hashCode());
					
						result = prime * result + ((this.ALT_CODITE == null) ? 0 : this.ALT_CODITE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.ALT_CODEMP == null) {
							if (other.ALT_CODEMP != null)
								return false;
						
						} else if (!this.ALT_CODEMP.equals(other.ALT_CODEMP))
						
							return false;
					
						if (this.ALT_CODITE == null) {
							if (other.ALT_CODITE != null)
								return false;
						
						} else if (!this.ALT_CODITE.equals(other.ALT_CODITE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.ALT_CODEMP = this.ALT_CODEMP;
	            other.ALT_CODITE = this.ALT_CODITE;
	            other.ALT_VE7ANT = this.ALT_VE7ANT;
	            other.DT_ULTIMA_ALTERACAO = this.DT_ULTIMA_ALTERACAO;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.ALT_CODEMP = this.ALT_CODEMP;
	            	other.ALT_CODITE = this.ALT_CODITE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ALT_CODEMP = readString(dis);
					
					this.ALT_CODITE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ALT_CODEMP = readString(dis);
					
					this.ALT_CODITE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALT_CODEMP,dos);
					
					// String
				
						writeString(this.ALT_CODITE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ALT_CODEMP,dos);
					
					// String
				
						writeString(this.ALT_CODITE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ALT_VE7ANT = (BigDecimal) ois.readObject();
					
						this.DT_ULTIMA_ALTERACAO = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ALT_VE7ANT = (BigDecimal) objectIn.readObject();
					
						this.DT_ULTIMA_ALTERACAO = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ALT_VE7ANT);
					
						writeDate(this.DT_ULTIMA_ALTERACAO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ALT_VE7ANT);
					
						writeDate(this.DT_ULTIMA_ALTERACAO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALT_CODEMP="+ALT_CODEMP);
		sb.append(",ALT_CODITE="+ALT_CODITE);
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",DT_ULTIMA_ALTERACAO="+String.valueOf(DT_ULTIMA_ALTERACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ALT_CODEMP, other.ALT_CODEMP);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ALT_CODITE, other.ALT_CODITE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_1) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_2 - inputs:(row15,row16) outputs:(INSERT)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row11Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row16.ALT_CODEMP = next_tHashInput_5.ALT_CODEMP;
	row16.ALT_CODITE = next_tHashInput_5.ALT_CODITE;
	row16.ALT_VE7ANT = next_tHashInput_5.ALT_VE7ANT;
	row16.DT_ULTIMA_ALTERACAO = next_tHashInput_5.DT_ULTIMA_ALTERACAO;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.ALT_CODEMP = row16.ALT_CODEMP;
				
				row16_HashRow.ALT_CODITE = row16.ALT_CODITE;
				
				row16_HashRow.ALT_VE7ANT = row16.ALT_VE7ANT;
				
				row16_HashRow.DT_ULTIMA_ALTERACAO = row16.DT_ULTIMA_ALTERACAO;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row8Struct row8 = new row8Struct();
out1Struct out1 = new out1Struct();
row3Struct row3 = new row3Struct();







	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";
	
	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\n-- QUERY 2\n-- EXTRACAO PEDIDOS ABAIXO DE 100 REAIS EXCETO PRODUTOS PMA E 008 MKTPLACE 7\n-- NESTA QUERY EXISTE O FIL"
+"TRO NO TALEND PARA IGNORAR SKU COM SITUAÇÃO 7 E 8\n  SELECT IG.ITE_CODEMP,\n       IG.ITE_CODITE , \n       COALESCE(C.I"
+"TE_SITPRO, 0) AS SITUACAO,\n       IG.ITE_PREVE7 VL_ATUAL,\n       (IG.ITE_PREVE7 / 0.90) VL_ARREDONDAMENTO,	\n       'M"
+"KTPLACE 7' AS MKTPLACE       \n  FROM ITEGER IG\n  INNER JOIN CADITE C ON C.ITE_CODITE = IG.ITE_CODITE \n  WHERE IG.ITE_"
+"CODEMP = '001'\n    AND IG.ITE_PREVE7 < 100\n--    AND IG.ITE_CODITE  in ('76396','80443','80444','80449','80450','80451"
+"','80452','80453','80454','80461','80755')\n";
		    

		    globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);

		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row4.ITE_CODEMP = null;
							} else {
	                         		
        	row4.ITE_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row4.ITE_CODITE = null;
							} else {
	                         		
        	row4.ITE_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row4.SITUACAO = null;
							} else {
		                          
            row4.SITUACAO = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    row4.SITUACAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row4.VL_ATUAL = null;
							} else {
		                          
            row4.VL_ATUAL = rs_tDBInput_2.getBigDecimal(4);
            if(rs_tDBInput_2.wasNull()){
                    row4.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row4.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row4.VL_ARREDONDAMENTO = rs_tDBInput_2.getBigDecimal(5);
            if(rs_tDBInput_2.wasNull()){
                    row4.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row4.MKTPLACE = null;
							} else {
	                         		
        	row4.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					

          row8 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
	        ope_tFilterRow_5.matches((row4.ITE_CODEMP != null)
	                       , "ITE_CODEMP!=null failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row8 == null){ 
                row8 = new row8Struct();
              }
               row8.ITE_CODEMP = row4.ITE_CODEMP;
               row8.ITE_CODITE = row4.ITE_CODITE;
               row8.SITUACAO = row4.SITUACAO;
               row8.VL_ATUAL = row4.VL_ATUAL;
               row8.VL_ARREDONDAMENTO = row4.VL_ARREDONDAMENTO;
               row8.MKTPLACE = row4.MKTPLACE;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row8"
if(row8 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.ITE_CODEMP = row8.ITE_CODEMP ;
out1_tmp.CD_PRODUTO = row8.ITE_CODITE ;
out1_tmp.SITUACAO = row8.SITUACAO;
out1_tmp.VL_ATUAL = row8.VL_ATUAL;
out1_tmp.VL_ARREDONDAMENTO = row8.VL_ARREDONDAMENTO;
out1_tmp.MKTPLACE = row8.MKTPLACE;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

          row3 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((out1.SITUACAO == null? false : out1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) != 0)
                           , "SITUACAO.compareTo(7) != 0 failed");
		 	
            ope_tFilterRow_1.matches((out1.SITUACAO == null? false : out1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(8))) != 0)
                           , "SITUACAO.compareTo(8) != 0 failed");
		 	
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row3 == null){ 
                row3 = new row3Struct();
              }
               row3.ITE_CODEMP = out1.ITE_CODEMP;
               row3.CD_PRODUTO = out1.CD_PRODUTO;
               row3.SITUACAO = out1.SITUACAO;
               row3.VL_ATUAL = out1.VL_ATUAL;
               row3.VL_ARREDONDAMENTO = out1.VL_ARREDONDAMENTO;
               row3.MKTPLACE = out1.MKTPLACE;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_2 = new row3Struct();
				
					oneRow_tHashOutput_2.ITE_CODEMP = row3.ITE_CODEMP;
					oneRow_tHashOutput_2.CD_PRODUTO = row3.CD_PRODUTO;
					oneRow_tHashOutput_2.SITUACAO = row3.SITUACAO;
					oneRow_tHashOutput_2.VL_ATUAL = row3.VL_ATUAL;
					oneRow_tHashOutput_2.VL_ARREDONDAMENTO = row3.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_2.MKTPLACE = row3.MKTPLACE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row8"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";
	
	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";
	
	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";
	
	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfout1Struct implements routines.system.IPersistableRow<copyOfcopyOfout1Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row9Struct row9 = new row9Struct();
copyOfcopyOfout1Struct copyOfcopyOfout1 = new copyOfcopyOfout1Struct();
row6Struct row6 = new row6Struct();







	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout1");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout1Struct copyOfcopyOfout1_tmp = new copyOfcopyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";
	
	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\n-- QUERY 3\n-- EXTRAÇÃO PEDIDOS PMA MKTPLACE 7\n-- NESTA QUERY EXISTE O FILTRO NO TALEND PARA CONSIDERAR APENAS SKU C"
+"OM SITUAÇÃO 7  \n    SELECT IG.ITE_CODEMP,\n       IG.ITE_CODITE , \n       COALESCE(C.ITE_SITPRO, 0) AS SITUACAO,\n    "
+"   IG.ITE_PREVE7 VL_ATUAL,\n       (IG.ITE_PREVE7 / 0.90) VL_ARREDONDAMENTO,	\n       'MKTPLACE 7' AS MKTPLACE       \n "
+" FROM ITEGER IG\n  INNER JOIN CADITE C ON C.ITE_CODITE = IG.ITE_CODITE \n  WHERE IG.ITE_CODEMP = '001'\n--    AND IG.ITE"
+"_CODITE in ('76396','80443','80444','80449','80450','80451','80452','80453','80454','80461','80755')\n";
		    

		    globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);

		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row5.ITE_CODEMP = null;
							} else {
	                         		
        	row5.ITE_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row5.ITE_CODITE = null;
							} else {
	                         		
        	row5.ITE_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row5.SITUACAO = null;
							} else {
		                          
            row5.SITUACAO = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    row5.SITUACAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row5.VL_ATUAL = null;
							} else {
		                          
            row5.VL_ATUAL = rs_tDBInput_3.getBigDecimal(4);
            if(rs_tDBInput_3.wasNull()){
                    row5.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row5.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row5.VL_ARREDONDAMENTO = rs_tDBInput_3.getBigDecimal(5);
            if(rs_tDBInput_3.wasNull()){
                    row5.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row5.MKTPLACE = null;
							} else {
	                         		
        	row5.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

          row9 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
	        ope_tFilterRow_6.matches((row5.ITE_CODEMP != null)
	                       , "ITE_CODEMP!=null failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row9 == null){ 
                row9 = new row9Struct();
              }
               row9.ITE_CODEMP = row5.ITE_CODEMP;
               row9.ITE_CODITE = row5.ITE_CODITE;
               row9.SITUACAO = row5.SITUACAO;
               row9.VL_ATUAL = row5.VL_ATUAL;
               row9.VL_ARREDONDAMENTO = row5.VL_ARREDONDAMENTO;
               row9.MKTPLACE = row5.MKTPLACE;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";
	
	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout1 = null;


// # Output table : 'copyOfcopyOfout1'
copyOfcopyOfout1_tmp.ITE_CODEMP = row9.ITE_CODEMP ;
copyOfcopyOfout1_tmp.CD_PRODUTO = row9.ITE_CODITE ;
copyOfcopyOfout1_tmp.SITUACAO = row9.SITUACAO;
copyOfcopyOfout1_tmp.VL_ATUAL = row9.VL_ATUAL;
copyOfcopyOfout1_tmp.VL_ARREDONDAMENTO = row9.VL_ARREDONDAMENTO;
copyOfcopyOfout1_tmp.MKTPLACE = row9.MKTPLACE;
copyOfcopyOfout1 = copyOfcopyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout1"
if(copyOfcopyOfout1 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfout1"
						
						);
					}
					

          row6 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((copyOfcopyOfout1.SITUACAO == null? false : copyOfcopyOfout1.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) == 0)
                           , "SITUACAO.compareTo(7) == 0 failed");
		 	
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.ITE_CODEMP = copyOfcopyOfout1.ITE_CODEMP;
               row6.CD_PRODUTO = copyOfcopyOfout1.CD_PRODUTO;
               row6.SITUACAO = copyOfcopyOfout1.SITUACAO;
               row6.VL_ATUAL = copyOfcopyOfout1.VL_ATUAL;
               row6.VL_ARREDONDAMENTO = copyOfcopyOfout1.VL_ARREDONDAMENTO;
               row6.MKTPLACE = copyOfcopyOfout1.MKTPLACE;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



    
		row6Struct oneRow_tHashOutput_4 = new row6Struct();
				
					oneRow_tHashOutput_4.ITE_CODEMP = row6.ITE_CODEMP;
					oneRow_tHashOutput_4.CD_PRODUTO = row6.CD_PRODUTO;
					oneRow_tHashOutput_4.SITUACAO = row6.SITUACAO;
					oneRow_tHashOutput_4.VL_ATUAL = row6.VL_ATUAL;
					oneRow_tHashOutput_4.VL_ARREDONDAMENTO = row6.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_4.MKTPLACE = row6.MKTPLACE;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout1"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";
	
	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";
	
	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";
	
	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";
	
	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";
	
	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout1_0Struct implements routines.system.IPersistableRow<copyOfout1_0Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String CD_PRODUTO;

				public String getCD_PRODUTO () {
					return this.CD_PRODUTO;
				}

				public Boolean CD_PRODUTOIsNullable(){
				    return true;
				}
				public Boolean CD_PRODUTOIsKey(){
				    return false;
				}
				public Integer CD_PRODUTOLength(){
				    return 6;
				}
				public Integer CD_PRODUTOPrecision(){
				    return null;
				}
				public String CD_PRODUTODefault(){
				
					return null;
				
				}
				public String CD_PRODUTOComment(){
				
				    return "";
				
				}
				public String CD_PRODUTOPattern(){
				
					return "";
				
				}
				public String CD_PRODUTOOriginalDbColumnName(){
				
					return "CD_PRODUTO";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return 12;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.CD_PRODUTO = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.CD_PRODUTO,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",CD_PRODUTO="+CD_PRODUTO);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ITE_CODEMP;

				public String getITE_CODEMP () {
					return this.ITE_CODEMP;
				}

				public Boolean ITE_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ITE_CODEMPIsKey(){
				    return false;
				}
				public Integer ITE_CODEMPLength(){
				    return null;
				}
				public Integer ITE_CODEMPPrecision(){
				    return null;
				}
				public String ITE_CODEMPDefault(){
				
					return null;
				
				}
				public String ITE_CODEMPComment(){
				
				    return "";
				
				}
				public String ITE_CODEMPPattern(){
				
					return "";
				
				}
				public String ITE_CODEMPOriginalDbColumnName(){
				
					return "ITE_CODEMP";
				
				}

				
			    public String ITE_CODITE;

				public String getITE_CODITE () {
					return this.ITE_CODITE;
				}

				public Boolean ITE_CODITEIsNullable(){
				    return true;
				}
				public Boolean ITE_CODITEIsKey(){
				    return false;
				}
				public Integer ITE_CODITELength(){
				    return null;
				}
				public Integer ITE_CODITEPrecision(){
				    return null;
				}
				public String ITE_CODITEDefault(){
				
					return null;
				
				}
				public String ITE_CODITEComment(){
				
				    return "";
				
				}
				public String ITE_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ITE_CODITEOriginalDbColumnName(){
				
					return "ITE_CODITE";
				
				}

				
			    public Integer SITUACAO;

				public Integer getSITUACAO () {
					return this.SITUACAO;
				}

				public Boolean SITUACAOIsNullable(){
				    return true;
				}
				public Boolean SITUACAOIsKey(){
				    return false;
				}
				public Integer SITUACAOLength(){
				    return null;
				}
				public Integer SITUACAOPrecision(){
				    return null;
				}
				public String SITUACAODefault(){
				
					return null;
				
				}
				public String SITUACAOComment(){
				
				    return "";
				
				}
				public String SITUACAOPattern(){
				
					return "";
				
				}
				public String SITUACAOOriginalDbColumnName(){
				
					return "SITUACAO";
				
				}

				
			    public BigDecimal VL_ATUAL;

				public BigDecimal getVL_ATUAL () {
					return this.VL_ATUAL;
				}

				public Boolean VL_ATUALIsNullable(){
				    return true;
				}
				public Boolean VL_ATUALIsKey(){
				    return false;
				}
				public Integer VL_ATUALLength(){
				    return 12;
				}
				public Integer VL_ATUALPrecision(){
				    return 2;
				}
				public String VL_ATUALDefault(){
				
					return null;
				
				}
				public String VL_ATUALComment(){
				
				    return "";
				
				}
				public String VL_ATUALPattern(){
				
					return "";
				
				}
				public String VL_ATUALOriginalDbColumnName(){
				
					return "VL_ATUAL";
				
				}

				
			    public BigDecimal VL_ARREDONDAMENTO;

				public BigDecimal getVL_ARREDONDAMENTO () {
					return this.VL_ARREDONDAMENTO;
				}

				public Boolean VL_ARREDONDAMENTOIsNullable(){
				    return true;
				}
				public Boolean VL_ARREDONDAMENTOIsKey(){
				    return false;
				}
				public Integer VL_ARREDONDAMENTOLength(){
				    return 12;
				}
				public Integer VL_ARREDONDAMENTOPrecision(){
				    return 2;
				}
				public String VL_ARREDONDAMENTODefault(){
				
					return null;
				
				}
				public String VL_ARREDONDAMENTOComment(){
				
				    return "";
				
				}
				public String VL_ARREDONDAMENTOPattern(){
				
					return "";
				
				}
				public String VL_ARREDONDAMENTOOriginalDbColumnName(){
				
					return "VL_ARREDONDAMENTO";
				
				}

				
			    public String MKTPLACE;

				public String getMKTPLACE () {
					return this.MKTPLACE;
				}

				public Boolean MKTPLACEIsNullable(){
				    return true;
				}
				public Boolean MKTPLACEIsKey(){
				    return false;
				}
				public Integer MKTPLACELength(){
				    return null;
				}
				public Integer MKTPLACEPrecision(){
				    return null;
				}
				public String MKTPLACEDefault(){
				
					return null;
				
				}
				public String MKTPLACEComment(){
				
				    return "";
				
				}
				public String MKTPLACEPattern(){
				
					return "";
				
				}
				public String MKTPLACEOriginalDbColumnName(){
				
					return "MKTPLACE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ITE_CODEMP = readString(dis);
					
					this.ITE_CODITE = readString(dis);
					
						this.SITUACAO = readInteger(dis);
					
						this.VL_ATUAL = (BigDecimal) dis.readObject();
					
						this.VL_ARREDONDAMENTO = (BigDecimal) dis.readObject();
					
					this.MKTPLACE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ITE_CODEMP,dos);
					
					// String
				
						writeString(this.ITE_CODITE,dos);
					
					// Integer
				
						writeInteger(this.SITUACAO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ATUAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VL_ARREDONDAMENTO);
					
					// String
				
						writeString(this.MKTPLACE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ITE_CODEMP="+ITE_CODEMP);
		sb.append(",ITE_CODITE="+ITE_CODITE);
		sb.append(",SITUACAO="+String.valueOf(SITUACAO));
		sb.append(",VL_ATUAL="+String.valueOf(VL_ATUAL));
		sb.append(",VL_ARREDONDAMENTO="+String.valueOf(VL_ARREDONDAMENTO));
		sb.append(",MKTPLACE="+MKTPLACE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row7Struct row7 = new row7Struct();
copyOfout1_0Struct copyOfout1_0 = new copyOfout1_0Struct();
row10Struct row10 = new row10Struct();







	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row10Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1_0");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1_0Struct copyOfout1_0_tmp = new copyOfout1_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";
	
	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\n-- QUERY 1\n-- EXTRACAO PEDIDOS ACIMA DE 100 REAIS APLICANDO A REGRA 0,90 CENTAVOS, EXCETO PRODUTOS PMA E 008 MKTPLAC"
+"E 7\n-- NESTA QUERY EXISTE O FILTRO NO TALEND PARA IGNORAR SKU COM SITUAÇÃO 7 E 8\nSELECT IG.ITE_CODEMP,\n       IG.ITE_"
+"CODITE , \n       COALESCE(C.ITE_SITPRO, 0) AS SITUACAO,\n       IG.ITE_PREVE7 VL_ATUAL,\n			((CASE\n				WHEN MOD(IG.ITE"
+"_PREVE7,\n				1) > 0 THEN CEIL(IG.ITE_PREVE7)-0.10\n				ELSE CEIL(IG.ITE_PREVE7)\n			END ) / 0.90) AS VL_ARREDONDAMENTO,"
+"		\n			'MKTPLACE 7' AS MKTPLACE\n  FROM ITEGER IG\n  INNER JOIN CADITE C ON C.ITE_CODITE = IG.ITE_CODITE \n  WHERE IG.IT"
+"E_CODEMP = '001'\n   AND IG.ITE_PREVE7 >= 100\n--   AND IG.ITE_CODITE  in ('76396','80443','80444','80449','80450','8045"
+"1','80452','80453','80454','80461','80755')\n  \n";
		    

		    globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);

		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.ITE_CODEMP = null;
							} else {
	                         		
        	row1.ITE_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.ITE_CODITE = null;
							} else {
	                         		
        	row1.ITE_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.SITUACAO = null;
							} else {
		                          
            row1.SITUACAO = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.SITUACAO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.VL_ATUAL = null;
							} else {
		                          
            row1.VL_ATUAL = rs_tDBInput_1.getBigDecimal(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.VL_ATUAL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.VL_ARREDONDAMENTO = null;
							} else {
		                          
            row1.VL_ARREDONDAMENTO = rs_tDBInput_1.getBigDecimal(5);
            if(rs_tDBInput_1.wasNull()){
                    row1.VL_ARREDONDAMENTO = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.MKTPLACE = null;
							} else {
	                         		
        	row1.MKTPLACE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

          row7 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
	        ope_tFilterRow_2.matches((row1.ITE_CODEMP != null)
	                       , "ITE_CODEMP!=null failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row7 == null){ 
                row7 = new row7Struct();
              }
               row7.ITE_CODEMP = row1.ITE_CODEMP;
               row7.ITE_CODITE = row1.ITE_CODITE;
               row7.SITUACAO = row1.SITUACAO;
               row7.VL_ATUAL = row1.VL_ATUAL;
               row7.VL_ARREDONDAMENTO = row1.VL_ARREDONDAMENTO;
               row7.MKTPLACE = row1.MKTPLACE;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfout1_0 = null;


// # Output table : 'copyOfout1_0'
copyOfout1_0_tmp.ITE_CODEMP = row7.ITE_CODEMP ;
copyOfout1_0_tmp.CD_PRODUTO = row7.ITE_CODITE ;
copyOfout1_0_tmp.SITUACAO = row7.SITUACAO;
copyOfout1_0_tmp.VL_ATUAL = row7.VL_ATUAL;
copyOfout1_0_tmp.VL_ARREDONDAMENTO = row7.VL_ARREDONDAMENTO;
copyOfout1_0_tmp.MKTPLACE = row7.MKTPLACE;
copyOfout1_0 = copyOfout1_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout1_0"
if(copyOfout1_0 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout1_0"
						
						);
					}
					

          row10 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((copyOfout1_0.SITUACAO == null? false : copyOfout1_0.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(7))) != 0)
                           , "SITUACAO.compareTo(7) != 0 failed");
		 	
            ope_tFilterRow_3.matches((copyOfout1_0.SITUACAO == null? false : copyOfout1_0.SITUACAO.compareTo(ParserUtils.parseTo_Integer(String.valueOf(8))) != 0)
                           , "SITUACAO.compareTo(8) != 0 failed");
		 	
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.ITE_CODEMP = copyOfout1_0.ITE_CODEMP;
               row10.CD_PRODUTO = copyOfout1_0.CD_PRODUTO;
               row10.SITUACAO = copyOfout1_0.SITUACAO;
               row10.VL_ATUAL = copyOfout1_0.VL_ATUAL;
               row10.VL_ARREDONDAMENTO = copyOfout1_0.VL_ARREDONDAMENTO;
               row10.MKTPLACE = copyOfout1_0.MKTPLACE;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					



    
		row10Struct oneRow_tHashOutput_1 = new row10Struct();
				
					oneRow_tHashOutput_1.ITE_CODEMP = row10.ITE_CODEMP;
					oneRow_tHashOutput_1.CD_PRODUTO = row10.CD_PRODUTO;
					oneRow_tHashOutput_1.SITUACAO = row10.SITUACAO;
					oneRow_tHashOutput_1.VL_ATUAL = row10.VL_ATUAL;
					oneRow_tHashOutput_1.VL_ARREDONDAMENTO = row10.VL_ARREDONDAMENTO;
					oneRow_tHashOutput_1.MKTPLACE = row10.MKTPLACE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "copyOfout1_0"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";
	
	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";
	
	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";
	
	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];

	
			    public String ALT_CODEMP;

				public String getALT_CODEMP () {
					return this.ALT_CODEMP;
				}

				public Boolean ALT_CODEMPIsNullable(){
				    return true;
				}
				public Boolean ALT_CODEMPIsKey(){
				    return false;
				}
				public Integer ALT_CODEMPLength(){
				    return null;
				}
				public Integer ALT_CODEMPPrecision(){
				    return null;
				}
				public String ALT_CODEMPDefault(){
				
					return null;
				
				}
				public String ALT_CODEMPComment(){
				
				    return "";
				
				}
				public String ALT_CODEMPPattern(){
				
					return "";
				
				}
				public String ALT_CODEMPOriginalDbColumnName(){
				
					return "ALT_CODEMP";
				
				}

				
			    public String ALT_CODITE;

				public String getALT_CODITE () {
					return this.ALT_CODITE;
				}

				public Boolean ALT_CODITEIsNullable(){
				    return true;
				}
				public Boolean ALT_CODITEIsKey(){
				    return false;
				}
				public Integer ALT_CODITELength(){
				    return null;
				}
				public Integer ALT_CODITEPrecision(){
				    return null;
				}
				public String ALT_CODITEDefault(){
				
					return null;
				
				}
				public String ALT_CODITEComment(){
				
				    return "";
				
				}
				public String ALT_CODITEPattern(){
				
					return "yyyy-MM-dd hh:mm:ss";
				
				}
				public String ALT_CODITEOriginalDbColumnName(){
				
					return "ALT_CODITE";
				
				}

				
			    public BigDecimal ALT_VE7ANT;

				public BigDecimal getALT_VE7ANT () {
					return this.ALT_VE7ANT;
				}

				public Boolean ALT_VE7ANTIsNullable(){
				    return true;
				}
				public Boolean ALT_VE7ANTIsKey(){
				    return false;
				}
				public Integer ALT_VE7ANTLength(){
				    return 12;
				}
				public Integer ALT_VE7ANTPrecision(){
				    return 2;
				}
				public String ALT_VE7ANTDefault(){
				
					return null;
				
				}
				public String ALT_VE7ANTComment(){
				
				    return "";
				
				}
				public String ALT_VE7ANTPattern(){
				
					return "";
				
				}
				public String ALT_VE7ANTOriginalDbColumnName(){
				
					return "ALT_VE7ANT";
				
				}

				
			    public java.util.Date DT_ULTIMA_ALTERACAO;

				public java.util.Date getDT_ULTIMA_ALTERACAO () {
					return this.DT_ULTIMA_ALTERACAO;
				}

				public Boolean DT_ULTIMA_ALTERACAOIsNullable(){
				    return true;
				}
				public Boolean DT_ULTIMA_ALTERACAOIsKey(){
				    return false;
				}
				public Integer DT_ULTIMA_ALTERACAOLength(){
				    return null;
				}
				public Integer DT_ULTIMA_ALTERACAOPrecision(){
				    return null;
				}
				public String DT_ULTIMA_ALTERACAODefault(){
				
					return null;
				
				}
				public String DT_ULTIMA_ALTERACAOComment(){
				
				    return "";
				
				}
				public String DT_ULTIMA_ALTERACAOPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String DT_ULTIMA_ALTERACAOOriginalDbColumnName(){
				
					return "DT_ULTIMA_ALTERACAO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ALT_CODEMP = readString(dis);
					
					this.ALT_CODITE = readString(dis);
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_ALTERACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.ALT_CODEMP = readString(dis);
					
					this.ALT_CODITE = readString(dis);
					
						this.ALT_VE7ANT = (BigDecimal) dis.readObject();
					
					this.DT_ULTIMA_ALTERACAO = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ALT_CODEMP,dos);
					
					// String
				
						writeString(this.ALT_CODITE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ALT_VE7ANT);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_ALTERACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.ALT_CODEMP,dos);
					
					// String
				
						writeString(this.ALT_CODITE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ALT_VE7ANT);
					
					// java.util.Date
				
						writeDate(this.DT_ULTIMA_ALTERACAO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ALT_CODEMP="+ALT_CODEMP);
		sb.append(",ALT_CODITE="+ALT_CODITE);
		sb.append(",ALT_VE7ANT="+String.valueOf(ALT_VE7ANT));
		sb.append(",DT_ULTIMA_ALTERACAO="+String.valueOf(DT_ULTIMA_ALTERACAO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";
	
	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\n 	SELECT ALT_CODEMP , \n	       ALT_CODITE , \n	       ALT_VE7ANT,\n	       MAX(CONCAT(ALT_DTAALT, ' ', ALT_HORALT)) "
+"AS DT_ULTIMA_ALTERACAO\n	  FROM PREALT\n	 WHERE ALT_CODEMP IN ('001')\n	GROUP BY ALT_CODITE,ALT_CODEMP ;\n";
		    

		    globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);

		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row11.ALT_CODEMP = null;
							} else {
	                         		
        	row11.ALT_CODEMP = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row11.ALT_CODITE = null;
							} else {
	                         		
        	row11.ALT_CODITE = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row11.ALT_VE7ANT = null;
							} else {
		                          
            row11.ALT_VE7ANT = rs_tDBInput_4.getBigDecimal(3);
            if(rs_tDBInput_4.wasNull()){
                    row11.ALT_VE7ANT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row11.DT_ULTIMA_ALTERACAO = null;
							} else {
										
				if(rs_tDBInput_4.getString(4) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						row11.DT_ULTIMA_ALTERACAO = rs_tDBInput_4.getTimestamp(4);
					} else {
						row11.DT_ULTIMA_ALTERACAO = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					row11.DT_ULTIMA_ALTERACAO =  null;
				}
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_3 = new row11Struct();
				
					oneRow_tHashOutput_3.ALT_CODEMP = row11.ALT_CODEMP;
					oneRow_tHashOutput_3.ALT_CODITE = row11.ALT_CODITE;
					oneRow_tHashOutput_3.ALT_VE7ANT = row11.ALT_VE7ANT;
					oneRow_tHashOutput_3.DT_ULTIMA_ALTERACAO = row11.DT_ULTIMA_ALTERACAO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";
	
	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
    static byte[] commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String cd_emp;

				public String getCd_emp () {
					return this.cd_emp;
				}

				public Boolean cd_empIsNullable(){
				    return true;
				}
				public Boolean cd_empIsKey(){
				    return true;
				}
				public Integer cd_empLength(){
				    return 3;
				}
				public Integer cd_empPrecision(){
				    return null;
				}
				public String cd_empDefault(){
				
					return null;
				
				}
				public String cd_empComment(){
				
				    return "";
				
				}
				public String cd_empPattern(){
				
					return "";
				
				}
				public String cd_empOriginalDbColumnName(){
				
					return "cd_emp";
				
				}

				
			    public String cd_produto;

				public String getCd_produto () {
					return this.cd_produto;
				}

				public Boolean cd_produtoIsNullable(){
				    return true;
				}
				public Boolean cd_produtoIsKey(){
				    return true;
				}
				public Integer cd_produtoLength(){
				    return 6;
				}
				public Integer cd_produtoPrecision(){
				    return null;
				}
				public String cd_produtoDefault(){
				
					return null;
				
				}
				public String cd_produtoComment(){
				
				    return "";
				
				}
				public String cd_produtoPattern(){
				
					return "";
				
				}
				public String cd_produtoOriginalDbColumnName(){
				
					return "cd_produto";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.cd_emp == null) ? 0 : this.cd_emp.hashCode());
					
						result = prime * result + ((this.cd_produto == null) ? 0 : this.cd_produto.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.cd_emp == null) {
							if (other.cd_emp != null)
								return false;
						
						} else if (!this.cd_emp.equals(other.cd_emp))
						
							return false;
					
						if (this.cd_produto == null) {
							if (other.cd_produto != null)
								return false;
						
						} else if (!this.cd_produto.equals(other.cd_produto))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.cd_emp = this.cd_emp;
	            other.cd_produto = this.cd_produto;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.cd_emp = this.cd_emp;
	            	other.cd_produto = this.cd_produto;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length) {
				if(length < 1024 && commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001.length == 0) {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[1024];
				} else {
   					commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001 = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length);
			strReturn = new String(commonByteArray_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_emp = readString(dis);
					
					this.cd_produto = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REFATORACAO_int_02_updated_preco_tabela_controle_multicd_001) {

        	try {

        		int length = 0;
		
					this.cd_emp = readString(dis);
					
					this.cd_produto = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_produto,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.cd_emp,dos);
					
					// String
				
						writeString(this.cd_produto,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("cd_emp="+cd_emp);
		sb.append(",cd_produto="+cd_produto);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.cd_emp, other.cd_emp);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.cd_produto, other.cd_produto);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_int_02_updated_preco_tabela_controle_multicd_001_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row18Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";
	
	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_3");
				
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select cd_emp ,\ncd_produto\nfrom control_price_multicd\n where estoque > 0\n-- WHERE cd_produto = '53747';\n";
		    

		    globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);

		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row18.cd_emp = null;
							} else {
	                         		
        	row18.cd_emp = routines.system.JDBCUtil.getString(rs_tDBInput_5, 1, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row18.cd_produto = null;
							} else {
	                         		
        	row18.cd_produto = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
					


 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					



    
		row18Struct oneRow_tHashOutput_6 = new row18Struct();
				
					oneRow_tHashOutput_6.cd_emp = row18.cd_emp;
					oneRow_tHashOutput_6.cd_produto = row18.cd_produto;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";
	
	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final int_02_updated_preco_tabela_controle_multicd_001 int_02_updated_preco_tabela_controle_multicd_001Class = new int_02_updated_preco_tabela_controle_multicd_001();

        int exitCode = int_02_updated_preco_tabela_controle_multicd_001Class.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = int_02_updated_preco_tabela_controle_multicd_001.class.getClassLoader().getResourceAsStream("refatoracao/int_02_updated_preco_tabela_controle_multicd_001_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = int_02_updated_preco_tabela_controle_multicd_001.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("versao", "id_Integer");
                        if(context.getStringValue("versao") == null) {
                            context.versao = null;
                        } else {
                            try{
                                context.versao=routines.system.ParserUtils.parseTo_Integer (context.getProperty("versao"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "versao", e.getMessage()));
                                context.versao=null;
                            }
                        }
                        context.setContextType("programa", "id_String");
                        if(context.getStringValue("programa") == null) {
                            context.programa = null;
                        } else {
                            context.programa=(String) context.getProperty("programa");
                        }
                        context.setContextType("AUTCOM_DB", "id_String");
                        if(context.getStringValue("AUTCOM_DB") == null) {
                            context.AUTCOM_DB = null;
                        } else {
                            context.AUTCOM_DB=(String) context.getProperty("AUTCOM_DB");
                        }
                        context.setContextType("AUTCOM_HOST", "id_String");
                        if(context.getStringValue("AUTCOM_HOST") == null) {
                            context.AUTCOM_HOST = null;
                        } else {
                            context.AUTCOM_HOST=(String) context.getProperty("AUTCOM_HOST");
                        }
                        context.setContextType("AUTCOM_PASSWORD", "id_String");
                        if(context.getStringValue("AUTCOM_PASSWORD") == null) {
                            context.AUTCOM_PASSWORD = null;
                        } else {
                            context.AUTCOM_PASSWORD=(String) context.getProperty("AUTCOM_PASSWORD");
                        }
                        context.setContextType("AUTCOM_PORT", "id_String");
                        if(context.getStringValue("AUTCOM_PORT") == null) {
                            context.AUTCOM_PORT = null;
                        } else {
                            context.AUTCOM_PORT=(String) context.getProperty("AUTCOM_PORT");
                        }
                        context.setContextType("AUTCOM_USER", "id_String");
                        if(context.getStringValue("AUTCOM_USER") == null) {
                            context.AUTCOM_USER = null;
                        } else {
                            context.AUTCOM_USER=(String) context.getProperty("AUTCOM_USER");
                        }
                        context.setContextType("POSTGRES_DB", "id_String");
                        if(context.getStringValue("POSTGRES_DB") == null) {
                            context.POSTGRES_DB = null;
                        } else {
                            context.POSTGRES_DB=(String) context.getProperty("POSTGRES_DB");
                        }
                        context.setContextType("POSTGRES_HOST", "id_String");
                        if(context.getStringValue("POSTGRES_HOST") == null) {
                            context.POSTGRES_HOST = null;
                        } else {
                            context.POSTGRES_HOST=(String) context.getProperty("POSTGRES_HOST");
                        }
                        context.setContextType("POSTGRES_PASSWORD", "id_String");
                        if(context.getStringValue("POSTGRES_PASSWORD") == null) {
                            context.POSTGRES_PASSWORD = null;
                        } else {
                            context.POSTGRES_PASSWORD=(String) context.getProperty("POSTGRES_PASSWORD");
                        }
                        context.setContextType("POSTGRES_PORT", "id_String");
                        if(context.getStringValue("POSTGRES_PORT") == null) {
                            context.POSTGRES_PORT = null;
                        } else {
                            context.POSTGRES_PORT=(String) context.getProperty("POSTGRES_PORT");
                        }
                        context.setContextType("POSTGRES_USER", "id_String");
                        if(context.getStringValue("POSTGRES_USER") == null) {
                            context.POSTGRES_USER = null;
                        } else {
                            context.POSTGRES_USER=(String) context.getProperty("POSTGRES_USER");
                        }
                        context.setContextType("WINSPARE_DB", "id_String");
                        if(context.getStringValue("WINSPARE_DB") == null) {
                            context.WINSPARE_DB = null;
                        } else {
                            context.WINSPARE_DB=(String) context.getProperty("WINSPARE_DB");
                        }
                        context.setContextType("WINSPARE_HOST", "id_String");
                        if(context.getStringValue("WINSPARE_HOST") == null) {
                            context.WINSPARE_HOST = null;
                        } else {
                            context.WINSPARE_HOST=(String) context.getProperty("WINSPARE_HOST");
                        }
                        context.setContextType("WINSPARE_PORT", "id_String");
                        if(context.getStringValue("WINSPARE_PORT") == null) {
                            context.WINSPARE_PORT = null;
                        } else {
                            context.WINSPARE_PORT=(String) context.getProperty("WINSPARE_PORT");
                        }
                        context.setContextType("WINSPARE_PWD", "id_String");
                        if(context.getStringValue("WINSPARE_PWD") == null) {
                            context.WINSPARE_PWD = null;
                        } else {
                            context.WINSPARE_PWD=(String) context.getProperty("WINSPARE_PWD");
                        }
                        context.setContextType("WINSPARE_USER", "id_String");
                        if(context.getStringValue("WINSPARE_USER") == null) {
                            context.WINSPARE_USER = null;
                        } else {
                            context.WINSPARE_USER=(String) context.getProperty("WINSPARE_USER");
                        }
                        context.setContextType("JDBC_PARAMETERS", "id_String");
                        if(context.getStringValue("JDBC_PARAMETERS") == null) {
                            context.JDBC_PARAMETERS = null;
                        } else {
                            context.JDBC_PARAMETERS=(String) context.getProperty("JDBC_PARAMETERS");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("versao")) {
                context.versao = (Integer) parentContextMap.get("versao");
            }if (parentContextMap.containsKey("programa")) {
                context.programa = (String) parentContextMap.get("programa");
            }if (parentContextMap.containsKey("AUTCOM_DB")) {
                context.AUTCOM_DB = (String) parentContextMap.get("AUTCOM_DB");
            }if (parentContextMap.containsKey("AUTCOM_HOST")) {
                context.AUTCOM_HOST = (String) parentContextMap.get("AUTCOM_HOST");
            }if (parentContextMap.containsKey("AUTCOM_PASSWORD")) {
                context.AUTCOM_PASSWORD = (String) parentContextMap.get("AUTCOM_PASSWORD");
            }if (parentContextMap.containsKey("AUTCOM_PORT")) {
                context.AUTCOM_PORT = (String) parentContextMap.get("AUTCOM_PORT");
            }if (parentContextMap.containsKey("AUTCOM_USER")) {
                context.AUTCOM_USER = (String) parentContextMap.get("AUTCOM_USER");
            }if (parentContextMap.containsKey("POSTGRES_DB")) {
                context.POSTGRES_DB = (String) parentContextMap.get("POSTGRES_DB");
            }if (parentContextMap.containsKey("POSTGRES_HOST")) {
                context.POSTGRES_HOST = (String) parentContextMap.get("POSTGRES_HOST");
            }if (parentContextMap.containsKey("POSTGRES_PASSWORD")) {
                context.POSTGRES_PASSWORD = (String) parentContextMap.get("POSTGRES_PASSWORD");
            }if (parentContextMap.containsKey("POSTGRES_PORT")) {
                context.POSTGRES_PORT = (String) parentContextMap.get("POSTGRES_PORT");
            }if (parentContextMap.containsKey("POSTGRES_USER")) {
                context.POSTGRES_USER = (String) parentContextMap.get("POSTGRES_USER");
            }if (parentContextMap.containsKey("WINSPARE_DB")) {
                context.WINSPARE_DB = (String) parentContextMap.get("WINSPARE_DB");
            }if (parentContextMap.containsKey("WINSPARE_HOST")) {
                context.WINSPARE_HOST = (String) parentContextMap.get("WINSPARE_HOST");
            }if (parentContextMap.containsKey("WINSPARE_PORT")) {
                context.WINSPARE_PORT = (String) parentContextMap.get("WINSPARE_PORT");
            }if (parentContextMap.containsKey("WINSPARE_PWD")) {
                context.WINSPARE_PWD = (String) parentContextMap.get("WINSPARE_PWD");
            }if (parentContextMap.containsKey("WINSPARE_USER")) {
                context.WINSPARE_USER = (String) parentContextMap.get("WINSPARE_USER");
            }if (parentContextMap.containsKey("JDBC_PARAMETERS")) {
                context.JDBC_PARAMETERS = (String) parentContextMap.get("JDBC_PARAMETERS");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_2Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}catch (java.lang.Error e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_2;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_3Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}catch (java.lang.Error e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_3;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}catch (java.lang.Error e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_4Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}catch (java.lang.Error e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_4;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBInput_5Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}catch (java.lang.Error e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBInput_5;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : int_02_updated_preco_tabela_controle_multicd_001");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_3");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_3", globalMap.get("conn_tDBConnection_3"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     676981 characters generated by Talend Open Studio for Big Data 
 *     on the 24 de abril de 2025 14:25:28 BRT
 ************************************************************************************************/